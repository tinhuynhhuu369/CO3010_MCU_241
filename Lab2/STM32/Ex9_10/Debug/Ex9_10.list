
Ex9_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080028f8  080028f8  000128f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800291c  0800291c  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  0800291c  0800291c  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800291c  0800291c  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800291c  0800291c  0001291c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002920  08002920  00012920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08002924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000003c  08002960  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002960  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007f94  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001861  00000000  00000000  0002803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b0  00000000  00000000  000298a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000773  00000000  00000000  0002a250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001653f  00000000  00000000  0002a9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a5fa  00000000  00000000  00040f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082390  00000000  00000000  0004b4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002750  00000000  00000000  000cd88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000cffdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028e0 	.word	0x080028e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	080028e0 	.word	0x080028e0

0800014c <setUpLEDMatrix>:
 *  Created on: Nov 14, 2024
 *      Author: admin
 */
#include "led_matrix.h"

void setUpLEDMatrix(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENM0_GPIO_Port,ENM0_Pin,SET);
 8000150:	2201      	movs	r2, #1
 8000152:	2104      	movs	r1, #4
 8000154:	482e      	ldr	r0, [pc, #184]	; (8000210 <setUpLEDMatrix+0xc4>)
 8000156:	f001 fbab 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM1_GPIO_Port,ENM1_Pin,SET);
 800015a:	2201      	movs	r2, #1
 800015c:	2108      	movs	r1, #8
 800015e:	482c      	ldr	r0, [pc, #176]	; (8000210 <setUpLEDMatrix+0xc4>)
 8000160:	f001 fba6 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM2_GPIO_Port,ENM2_Pin,SET);
 8000164:	2201      	movs	r2, #1
 8000166:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800016a:	4829      	ldr	r0, [pc, #164]	; (8000210 <setUpLEDMatrix+0xc4>)
 800016c:	f001 fba0 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM3_GPIO_Port,ENM3_Pin,SET);
 8000170:	2201      	movs	r2, #1
 8000172:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000176:	4826      	ldr	r0, [pc, #152]	; (8000210 <setUpLEDMatrix+0xc4>)
 8000178:	f001 fb9a 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM4_GPIO_Port,ENM4_Pin,SET);
 800017c:	2201      	movs	r2, #1
 800017e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000182:	4823      	ldr	r0, [pc, #140]	; (8000210 <setUpLEDMatrix+0xc4>)
 8000184:	f001 fb94 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM5_GPIO_Port,ENM5_Pin,SET);
 8000188:	2201      	movs	r2, #1
 800018a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800018e:	4820      	ldr	r0, [pc, #128]	; (8000210 <setUpLEDMatrix+0xc4>)
 8000190:	f001 fb8e 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM6_GPIO_Port,ENM6_Pin,SET);
 8000194:	2201      	movs	r2, #1
 8000196:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800019a:	481d      	ldr	r0, [pc, #116]	; (8000210 <setUpLEDMatrix+0xc4>)
 800019c:	f001 fb88 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM7_GPIO_Port,ENM7_Pin,SET);
 80001a0:	2201      	movs	r2, #1
 80001a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001a6:	481a      	ldr	r0, [pc, #104]	; (8000210 <setUpLEDMatrix+0xc4>)
 80001a8:	f001 fb82 	bl	80018b0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ROW0_GPIO_Port,ROW0_Pin,SET);
 80001ac:	2201      	movs	r2, #1
 80001ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001b2:	4818      	ldr	r0, [pc, #96]	; (8000214 <setUpLEDMatrix+0xc8>)
 80001b4:	f001 fb7c 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW1_GPIO_Port,ROW1_Pin,SET);
 80001b8:	2201      	movs	r2, #1
 80001ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001be:	4815      	ldr	r0, [pc, #84]	; (8000214 <setUpLEDMatrix+0xc8>)
 80001c0:	f001 fb76 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW2_GPIO_Port,ROW2_Pin,SET);
 80001c4:	2201      	movs	r2, #1
 80001c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001ca:	4812      	ldr	r0, [pc, #72]	; (8000214 <setUpLEDMatrix+0xc8>)
 80001cc:	f001 fb70 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW3_GPIO_Port,ROW3_Pin,SET);
 80001d0:	2201      	movs	r2, #1
 80001d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001d6:	480f      	ldr	r0, [pc, #60]	; (8000214 <setUpLEDMatrix+0xc8>)
 80001d8:	f001 fb6a 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW4_GPIO_Port,ROW4_Pin,SET);
 80001dc:	2201      	movs	r2, #1
 80001de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001e2:	480c      	ldr	r0, [pc, #48]	; (8000214 <setUpLEDMatrix+0xc8>)
 80001e4:	f001 fb64 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW5_GPIO_Port,ROW5_Pin,SET);
 80001e8:	2201      	movs	r2, #1
 80001ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ee:	4809      	ldr	r0, [pc, #36]	; (8000214 <setUpLEDMatrix+0xc8>)
 80001f0:	f001 fb5e 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW6_GPIO_Port,ROW6_Pin,SET);
 80001f4:	2201      	movs	r2, #1
 80001f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001fa:	4806      	ldr	r0, [pc, #24]	; (8000214 <setUpLEDMatrix+0xc8>)
 80001fc:	f001 fb58 	bl	80018b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW7_GPIO_Port,ROW7_Pin,SET);
 8000200:	2201      	movs	r2, #1
 8000202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000206:	4803      	ldr	r0, [pc, #12]	; (8000214 <setUpLEDMatrix+0xc8>)
 8000208:	f001 fb52 	bl	80018b0 <HAL_GPIO_WritePin>
}
 800020c:	bf00      	nop
 800020e:	bd80      	pop	{r7, pc}
 8000210:	40010800 	.word	0x40010800
 8000214:	40010c00 	.word	0x40010c00

08000218 <updateLEDMatrix>:
void updateLEDMatrix(int index){
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	setUpLEDMatrix();
 8000220:	f7ff ff94 	bl	800014c <setUpLEDMatrix>
	switch (index){
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2b07      	cmp	r3, #7
 8000228:	f200 8356 	bhi.w	80008d8 <updateLEDMatrix+0x6c0>
 800022c:	a201      	add	r2, pc, #4	; (adr r2, 8000234 <updateLEDMatrix+0x1c>)
 800022e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000232:	bf00      	nop
 8000234:	08000255 	.word	0x08000255
 8000238:	08000321 	.word	0x08000321
 800023c:	080003ed 	.word	0x080003ed
 8000240:	080004c9 	.word	0x080004c9
 8000244:	08000597 	.word	0x08000597
 8000248:	08000665 	.word	0x08000665
 800024c:	08000741 	.word	0x08000741
 8000250:	0800080d 	.word	0x0800080d
			case 0:
				//DISPLAY matrix_buffer[0]
				HAL_GPIO_WritePin(ENM0_GPIO_Port,ENM0_Pin,RESET);
 8000254:	2200      	movs	r2, #0
 8000256:	2104      	movs	r1, #4
 8000258:	4898      	ldr	r0, [pc, #608]	; (80004bc <updateLEDMatrix+0x2a4>)
 800025a:	f001 fb29 	bl	80018b0 <HAL_GPIO_WritePin>
				if((matrix_buffer[0] & 0x01) == 0x01){
 800025e:	4b98      	ldr	r3, [pc, #608]	; (80004c0 <updateLEDMatrix+0x2a8>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	f003 0301 	and.w	r3, r3, #1
 8000266:	2b00      	cmp	r3, #0
 8000268:	d005      	beq.n	8000276 <updateLEDMatrix+0x5e>
					HAL_GPIO_WritePin(ROW0_GPIO_Port,ROW0_Pin,RESET);
 800026a:	2200      	movs	r2, #0
 800026c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000270:	4894      	ldr	r0, [pc, #592]	; (80004c4 <updateLEDMatrix+0x2ac>)
 8000272:	f001 fb1d 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[0] & 0x02) == 0x02){
 8000276:	4b92      	ldr	r3, [pc, #584]	; (80004c0 <updateLEDMatrix+0x2a8>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	f003 0302 	and.w	r3, r3, #2
 800027e:	2b00      	cmp	r3, #0
 8000280:	d005      	beq.n	800028e <updateLEDMatrix+0x76>
					HAL_GPIO_WritePin(ROW1_GPIO_Port,ROW1_Pin,RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000288:	488e      	ldr	r0, [pc, #568]	; (80004c4 <updateLEDMatrix+0x2ac>)
 800028a:	f001 fb11 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[0] & 0x04) == 0x04){
 800028e:	4b8c      	ldr	r3, [pc, #560]	; (80004c0 <updateLEDMatrix+0x2a8>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	f003 0304 	and.w	r3, r3, #4
 8000296:	2b00      	cmp	r3, #0
 8000298:	d005      	beq.n	80002a6 <updateLEDMatrix+0x8e>
					HAL_GPIO_WritePin(ROW2_GPIO_Port,ROW2_Pin,RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002a0:	4888      	ldr	r0, [pc, #544]	; (80004c4 <updateLEDMatrix+0x2ac>)
 80002a2:	f001 fb05 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[0] & 0x08) == 0x08){
 80002a6:	4b86      	ldr	r3, [pc, #536]	; (80004c0 <updateLEDMatrix+0x2a8>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	f003 0308 	and.w	r3, r3, #8
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d005      	beq.n	80002be <updateLEDMatrix+0xa6>
					HAL_GPIO_WritePin(ROW3_GPIO_Port,ROW3_Pin,RESET);
 80002b2:	2200      	movs	r2, #0
 80002b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002b8:	4882      	ldr	r0, [pc, #520]	; (80004c4 <updateLEDMatrix+0x2ac>)
 80002ba:	f001 faf9 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[0] & 0x10) == 0x10){
 80002be:	4b80      	ldr	r3, [pc, #512]	; (80004c0 <updateLEDMatrix+0x2a8>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	f003 0310 	and.w	r3, r3, #16
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d005      	beq.n	80002d6 <updateLEDMatrix+0xbe>
					HAL_GPIO_WritePin(ROW4_GPIO_Port,ROW4_Pin,RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002d0:	487c      	ldr	r0, [pc, #496]	; (80004c4 <updateLEDMatrix+0x2ac>)
 80002d2:	f001 faed 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[0] & 0x20) == 0x20){
 80002d6:	4b7a      	ldr	r3, [pc, #488]	; (80004c0 <updateLEDMatrix+0x2a8>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	f003 0320 	and.w	r3, r3, #32
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d005      	beq.n	80002ee <updateLEDMatrix+0xd6>
					HAL_GPIO_WritePin(ROW5_GPIO_Port,ROW5_Pin,RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e8:	4876      	ldr	r0, [pc, #472]	; (80004c4 <updateLEDMatrix+0x2ac>)
 80002ea:	f001 fae1 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[0] & 0x40) == 0x40){
 80002ee:	4b74      	ldr	r3, [pc, #464]	; (80004c0 <updateLEDMatrix+0x2a8>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d005      	beq.n	8000306 <updateLEDMatrix+0xee>
					HAL_GPIO_WritePin(ROW6_GPIO_Port,ROW6_Pin,RESET);
 80002fa:	2200      	movs	r2, #0
 80002fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000300:	4870      	ldr	r0, [pc, #448]	; (80004c4 <updateLEDMatrix+0x2ac>)
 8000302:	f001 fad5 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[0] & 0x80) == 0x80){
 8000306:	4b6e      	ldr	r3, [pc, #440]	; (80004c0 <updateLEDMatrix+0x2a8>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	b25b      	sxtb	r3, r3
 800030c:	2b00      	cmp	r3, #0
 800030e:	f280 82e5 	bge.w	80008dc <updateLEDMatrix+0x6c4>
					HAL_GPIO_WritePin(ROW7_GPIO_Port,ROW7_Pin,RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000318:	486a      	ldr	r0, [pc, #424]	; (80004c4 <updateLEDMatrix+0x2ac>)
 800031a:	f001 fac9 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				break;
 800031e:	e2dd      	b.n	80008dc <updateLEDMatrix+0x6c4>
			case 1:
				HAL_GPIO_WritePin(ENM1_GPIO_Port,ENM1_Pin,RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	2108      	movs	r1, #8
 8000324:	4865      	ldr	r0, [pc, #404]	; (80004bc <updateLEDMatrix+0x2a4>)
 8000326:	f001 fac3 	bl	80018b0 <HAL_GPIO_WritePin>
				if((matrix_buffer[1] & 0x01) == 0x01){
 800032a:	4b65      	ldr	r3, [pc, #404]	; (80004c0 <updateLEDMatrix+0x2a8>)
 800032c:	785b      	ldrb	r3, [r3, #1]
 800032e:	f003 0301 	and.w	r3, r3, #1
 8000332:	2b00      	cmp	r3, #0
 8000334:	d005      	beq.n	8000342 <updateLEDMatrix+0x12a>
					HAL_GPIO_WritePin(ROW0_GPIO_Port,ROW0_Pin,RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	f44f 7180 	mov.w	r1, #256	; 0x100
 800033c:	4861      	ldr	r0, [pc, #388]	; (80004c4 <updateLEDMatrix+0x2ac>)
 800033e:	f001 fab7 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[1] & 0x02) == 0x02){
 8000342:	4b5f      	ldr	r3, [pc, #380]	; (80004c0 <updateLEDMatrix+0x2a8>)
 8000344:	785b      	ldrb	r3, [r3, #1]
 8000346:	f003 0302 	and.w	r3, r3, #2
 800034a:	2b00      	cmp	r3, #0
 800034c:	d005      	beq.n	800035a <updateLEDMatrix+0x142>
					HAL_GPIO_WritePin(ROW1_GPIO_Port,ROW1_Pin,RESET);
 800034e:	2200      	movs	r2, #0
 8000350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000354:	485b      	ldr	r0, [pc, #364]	; (80004c4 <updateLEDMatrix+0x2ac>)
 8000356:	f001 faab 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[1] & 0x04) == 0x04){
 800035a:	4b59      	ldr	r3, [pc, #356]	; (80004c0 <updateLEDMatrix+0x2a8>)
 800035c:	785b      	ldrb	r3, [r3, #1]
 800035e:	f003 0304 	and.w	r3, r3, #4
 8000362:	2b00      	cmp	r3, #0
 8000364:	d005      	beq.n	8000372 <updateLEDMatrix+0x15a>
					HAL_GPIO_WritePin(ROW2_GPIO_Port,ROW2_Pin,RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800036c:	4855      	ldr	r0, [pc, #340]	; (80004c4 <updateLEDMatrix+0x2ac>)
 800036e:	f001 fa9f 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[1] & 0x08) == 0x08){
 8000372:	4b53      	ldr	r3, [pc, #332]	; (80004c0 <updateLEDMatrix+0x2a8>)
 8000374:	785b      	ldrb	r3, [r3, #1]
 8000376:	f003 0308 	and.w	r3, r3, #8
 800037a:	2b00      	cmp	r3, #0
 800037c:	d005      	beq.n	800038a <updateLEDMatrix+0x172>
					HAL_GPIO_WritePin(ROW3_GPIO_Port,ROW3_Pin,RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000384:	484f      	ldr	r0, [pc, #316]	; (80004c4 <updateLEDMatrix+0x2ac>)
 8000386:	f001 fa93 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[1] & 0x10) == 0x10){
 800038a:	4b4d      	ldr	r3, [pc, #308]	; (80004c0 <updateLEDMatrix+0x2a8>)
 800038c:	785b      	ldrb	r3, [r3, #1]
 800038e:	f003 0310 	and.w	r3, r3, #16
 8000392:	2b00      	cmp	r3, #0
 8000394:	d005      	beq.n	80003a2 <updateLEDMatrix+0x18a>
					HAL_GPIO_WritePin(ROW4_GPIO_Port,ROW4_Pin,RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800039c:	4849      	ldr	r0, [pc, #292]	; (80004c4 <updateLEDMatrix+0x2ac>)
 800039e:	f001 fa87 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[1] & 0x20) == 0x20){
 80003a2:	4b47      	ldr	r3, [pc, #284]	; (80004c0 <updateLEDMatrix+0x2a8>)
 80003a4:	785b      	ldrb	r3, [r3, #1]
 80003a6:	f003 0320 	and.w	r3, r3, #32
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d005      	beq.n	80003ba <updateLEDMatrix+0x1a2>
					HAL_GPIO_WritePin(ROW5_GPIO_Port,ROW5_Pin,RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b4:	4843      	ldr	r0, [pc, #268]	; (80004c4 <updateLEDMatrix+0x2ac>)
 80003b6:	f001 fa7b 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[1] & 0x40) == 0x40){
 80003ba:	4b41      	ldr	r3, [pc, #260]	; (80004c0 <updateLEDMatrix+0x2a8>)
 80003bc:	785b      	ldrb	r3, [r3, #1]
 80003be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d005      	beq.n	80003d2 <updateLEDMatrix+0x1ba>
					HAL_GPIO_WritePin(ROW6_GPIO_Port,ROW6_Pin,RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003cc:	483d      	ldr	r0, [pc, #244]	; (80004c4 <updateLEDMatrix+0x2ac>)
 80003ce:	f001 fa6f 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[1] & 0x80) == 0x80){
 80003d2:	4b3b      	ldr	r3, [pc, #236]	; (80004c0 <updateLEDMatrix+0x2a8>)
 80003d4:	785b      	ldrb	r3, [r3, #1]
 80003d6:	b25b      	sxtb	r3, r3
 80003d8:	2b00      	cmp	r3, #0
 80003da:	f280 8281 	bge.w	80008e0 <updateLEDMatrix+0x6c8>
					HAL_GPIO_WritePin(ROW7_GPIO_Port,ROW7_Pin,RESET);
 80003de:	2200      	movs	r2, #0
 80003e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003e4:	4837      	ldr	r0, [pc, #220]	; (80004c4 <updateLEDMatrix+0x2ac>)
 80003e6:	f001 fa63 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				break;
 80003ea:	e279      	b.n	80008e0 <updateLEDMatrix+0x6c8>
			case 2:
				HAL_GPIO_WritePin(ENM2_GPIO_Port,ENM2_Pin,RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003f2:	4832      	ldr	r0, [pc, #200]	; (80004bc <updateLEDMatrix+0x2a4>)
 80003f4:	f001 fa5c 	bl	80018b0 <HAL_GPIO_WritePin>
				if((matrix_buffer[2] & 0x01) == 0x01){
 80003f8:	4b31      	ldr	r3, [pc, #196]	; (80004c0 <updateLEDMatrix+0x2a8>)
 80003fa:	789b      	ldrb	r3, [r3, #2]
 80003fc:	f003 0301 	and.w	r3, r3, #1
 8000400:	2b00      	cmp	r3, #0
 8000402:	d005      	beq.n	8000410 <updateLEDMatrix+0x1f8>
					HAL_GPIO_WritePin(ROW0_GPIO_Port,ROW0_Pin,RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	f44f 7180 	mov.w	r1, #256	; 0x100
 800040a:	482e      	ldr	r0, [pc, #184]	; (80004c4 <updateLEDMatrix+0x2ac>)
 800040c:	f001 fa50 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[2] & 0x02) == 0x02){
 8000410:	4b2b      	ldr	r3, [pc, #172]	; (80004c0 <updateLEDMatrix+0x2a8>)
 8000412:	789b      	ldrb	r3, [r3, #2]
 8000414:	f003 0302 	and.w	r3, r3, #2
 8000418:	2b00      	cmp	r3, #0
 800041a:	d005      	beq.n	8000428 <updateLEDMatrix+0x210>
					HAL_GPIO_WritePin(ROW1_GPIO_Port,ROW1_Pin,RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000422:	4828      	ldr	r0, [pc, #160]	; (80004c4 <updateLEDMatrix+0x2ac>)
 8000424:	f001 fa44 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[2] & 0x04) == 0x04){
 8000428:	4b25      	ldr	r3, [pc, #148]	; (80004c0 <updateLEDMatrix+0x2a8>)
 800042a:	789b      	ldrb	r3, [r3, #2]
 800042c:	f003 0304 	and.w	r3, r3, #4
 8000430:	2b00      	cmp	r3, #0
 8000432:	d005      	beq.n	8000440 <updateLEDMatrix+0x228>
					HAL_GPIO_WritePin(ROW2_GPIO_Port,ROW2_Pin,RESET);
 8000434:	2200      	movs	r2, #0
 8000436:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800043a:	4822      	ldr	r0, [pc, #136]	; (80004c4 <updateLEDMatrix+0x2ac>)
 800043c:	f001 fa38 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[2] & 0x08) == 0x08){
 8000440:	4b1f      	ldr	r3, [pc, #124]	; (80004c0 <updateLEDMatrix+0x2a8>)
 8000442:	789b      	ldrb	r3, [r3, #2]
 8000444:	f003 0308 	and.w	r3, r3, #8
 8000448:	2b00      	cmp	r3, #0
 800044a:	d005      	beq.n	8000458 <updateLEDMatrix+0x240>
					HAL_GPIO_WritePin(ROW3_GPIO_Port,ROW3_Pin,RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000452:	481c      	ldr	r0, [pc, #112]	; (80004c4 <updateLEDMatrix+0x2ac>)
 8000454:	f001 fa2c 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[2] & 0x10) == 0x10){
 8000458:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <updateLEDMatrix+0x2a8>)
 800045a:	789b      	ldrb	r3, [r3, #2]
 800045c:	f003 0310 	and.w	r3, r3, #16
 8000460:	2b00      	cmp	r3, #0
 8000462:	d005      	beq.n	8000470 <updateLEDMatrix+0x258>
					HAL_GPIO_WritePin(ROW4_GPIO_Port,ROW4_Pin,RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800046a:	4816      	ldr	r0, [pc, #88]	; (80004c4 <updateLEDMatrix+0x2ac>)
 800046c:	f001 fa20 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[2] & 0x20) == 0x20){
 8000470:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <updateLEDMatrix+0x2a8>)
 8000472:	789b      	ldrb	r3, [r3, #2]
 8000474:	f003 0320 	and.w	r3, r3, #32
 8000478:	2b00      	cmp	r3, #0
 800047a:	d005      	beq.n	8000488 <updateLEDMatrix+0x270>
					HAL_GPIO_WritePin(ROW5_GPIO_Port,ROW5_Pin,RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000482:	4810      	ldr	r0, [pc, #64]	; (80004c4 <updateLEDMatrix+0x2ac>)
 8000484:	f001 fa14 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[2] & 0x40) == 0x40){
 8000488:	4b0d      	ldr	r3, [pc, #52]	; (80004c0 <updateLEDMatrix+0x2a8>)
 800048a:	789b      	ldrb	r3, [r3, #2]
 800048c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000490:	2b00      	cmp	r3, #0
 8000492:	d005      	beq.n	80004a0 <updateLEDMatrix+0x288>
					HAL_GPIO_WritePin(ROW6_GPIO_Port,ROW6_Pin,RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800049a:	480a      	ldr	r0, [pc, #40]	; (80004c4 <updateLEDMatrix+0x2ac>)
 800049c:	f001 fa08 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[2] & 0x80) == 0x80){
 80004a0:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <updateLEDMatrix+0x2a8>)
 80004a2:	789b      	ldrb	r3, [r3, #2]
 80004a4:	b25b      	sxtb	r3, r3
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	f280 821c 	bge.w	80008e4 <updateLEDMatrix+0x6cc>
					HAL_GPIO_WritePin(ROW7_GPIO_Port,ROW7_Pin,RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004b2:	4804      	ldr	r0, [pc, #16]	; (80004c4 <updateLEDMatrix+0x2ac>)
 80004b4:	f001 f9fc 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				break;
 80004b8:	e214      	b.n	80008e4 <updateLEDMatrix+0x6cc>
 80004ba:	bf00      	nop
 80004bc:	40010800 	.word	0x40010800
 80004c0:	2000001c 	.word	0x2000001c
 80004c4:	40010c00 	.word	0x40010c00
			case 3:
				HAL_GPIO_WritePin(ENM3_GPIO_Port,ENM3_Pin,RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ce:	4899      	ldr	r0, [pc, #612]	; (8000734 <updateLEDMatrix+0x51c>)
 80004d0:	f001 f9ee 	bl	80018b0 <HAL_GPIO_WritePin>
				if((matrix_buffer[3] & 0x01) == 0x01){
 80004d4:	4b98      	ldr	r3, [pc, #608]	; (8000738 <updateLEDMatrix+0x520>)
 80004d6:	78db      	ldrb	r3, [r3, #3]
 80004d8:	f003 0301 	and.w	r3, r3, #1
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d005      	beq.n	80004ec <updateLEDMatrix+0x2d4>
					HAL_GPIO_WritePin(ROW0_GPIO_Port,ROW0_Pin,RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e6:	4895      	ldr	r0, [pc, #596]	; (800073c <updateLEDMatrix+0x524>)
 80004e8:	f001 f9e2 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[3] & 0x02) == 0x02){
 80004ec:	4b92      	ldr	r3, [pc, #584]	; (8000738 <updateLEDMatrix+0x520>)
 80004ee:	78db      	ldrb	r3, [r3, #3]
 80004f0:	f003 0302 	and.w	r3, r3, #2
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d005      	beq.n	8000504 <updateLEDMatrix+0x2ec>
					HAL_GPIO_WritePin(ROW1_GPIO_Port,ROW1_Pin,RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004fe:	488f      	ldr	r0, [pc, #572]	; (800073c <updateLEDMatrix+0x524>)
 8000500:	f001 f9d6 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[3] & 0x04) == 0x04){
 8000504:	4b8c      	ldr	r3, [pc, #560]	; (8000738 <updateLEDMatrix+0x520>)
 8000506:	78db      	ldrb	r3, [r3, #3]
 8000508:	f003 0304 	and.w	r3, r3, #4
 800050c:	2b00      	cmp	r3, #0
 800050e:	d005      	beq.n	800051c <updateLEDMatrix+0x304>
					HAL_GPIO_WritePin(ROW2_GPIO_Port,ROW2_Pin,RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000516:	4889      	ldr	r0, [pc, #548]	; (800073c <updateLEDMatrix+0x524>)
 8000518:	f001 f9ca 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[3] & 0x08) == 0x08){
 800051c:	4b86      	ldr	r3, [pc, #536]	; (8000738 <updateLEDMatrix+0x520>)
 800051e:	78db      	ldrb	r3, [r3, #3]
 8000520:	f003 0308 	and.w	r3, r3, #8
 8000524:	2b00      	cmp	r3, #0
 8000526:	d005      	beq.n	8000534 <updateLEDMatrix+0x31c>
					HAL_GPIO_WritePin(ROW3_GPIO_Port,ROW3_Pin,RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800052e:	4883      	ldr	r0, [pc, #524]	; (800073c <updateLEDMatrix+0x524>)
 8000530:	f001 f9be 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[3] & 0x10) == 0x10){
 8000534:	4b80      	ldr	r3, [pc, #512]	; (8000738 <updateLEDMatrix+0x520>)
 8000536:	78db      	ldrb	r3, [r3, #3]
 8000538:	f003 0310 	and.w	r3, r3, #16
 800053c:	2b00      	cmp	r3, #0
 800053e:	d005      	beq.n	800054c <updateLEDMatrix+0x334>
					HAL_GPIO_WritePin(ROW4_GPIO_Port,ROW4_Pin,RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000546:	487d      	ldr	r0, [pc, #500]	; (800073c <updateLEDMatrix+0x524>)
 8000548:	f001 f9b2 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[3] & 0x20) == 0x20){
 800054c:	4b7a      	ldr	r3, [pc, #488]	; (8000738 <updateLEDMatrix+0x520>)
 800054e:	78db      	ldrb	r3, [r3, #3]
 8000550:	f003 0320 	and.w	r3, r3, #32
 8000554:	2b00      	cmp	r3, #0
 8000556:	d005      	beq.n	8000564 <updateLEDMatrix+0x34c>
					HAL_GPIO_WritePin(ROW5_GPIO_Port,ROW5_Pin,RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055e:	4877      	ldr	r0, [pc, #476]	; (800073c <updateLEDMatrix+0x524>)
 8000560:	f001 f9a6 	bl	80018b0 <HAL_GPIO_WritePin>
								}
				if((matrix_buffer[3] & 0x40) == 0x40){
 8000564:	4b74      	ldr	r3, [pc, #464]	; (8000738 <updateLEDMatrix+0x520>)
 8000566:	78db      	ldrb	r3, [r3, #3]
 8000568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800056c:	2b00      	cmp	r3, #0
 800056e:	d005      	beq.n	800057c <updateLEDMatrix+0x364>
					HAL_GPIO_WritePin(ROW6_GPIO_Port,ROW6_Pin,RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000576:	4871      	ldr	r0, [pc, #452]	; (800073c <updateLEDMatrix+0x524>)
 8000578:	f001 f99a 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[3] & 0x80) == 0x80){
 800057c:	4b6e      	ldr	r3, [pc, #440]	; (8000738 <updateLEDMatrix+0x520>)
 800057e:	78db      	ldrb	r3, [r3, #3]
 8000580:	b25b      	sxtb	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	f280 81b0 	bge.w	80008e8 <updateLEDMatrix+0x6d0>
					HAL_GPIO_WritePin(ROW7_GPIO_Port,ROW7_Pin,RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058e:	486b      	ldr	r0, [pc, #428]	; (800073c <updateLEDMatrix+0x524>)
 8000590:	f001 f98e 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				break;
 8000594:	e1a8      	b.n	80008e8 <updateLEDMatrix+0x6d0>
			case 4:
				HAL_GPIO_WritePin(ENM4_GPIO_Port,ENM4_Pin,RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059c:	4865      	ldr	r0, [pc, #404]	; (8000734 <updateLEDMatrix+0x51c>)
 800059e:	f001 f987 	bl	80018b0 <HAL_GPIO_WritePin>
				if((matrix_buffer[4] & 0x01) == 0x01){
 80005a2:	4b65      	ldr	r3, [pc, #404]	; (8000738 <updateLEDMatrix+0x520>)
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d005      	beq.n	80005ba <updateLEDMatrix+0x3a2>
					HAL_GPIO_WritePin(ROW0_GPIO_Port,ROW0_Pin,RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b4:	4861      	ldr	r0, [pc, #388]	; (800073c <updateLEDMatrix+0x524>)
 80005b6:	f001 f97b 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[4] & 0x02) == 0x02){
 80005ba:	4b5f      	ldr	r3, [pc, #380]	; (8000738 <updateLEDMatrix+0x520>)
 80005bc:	791b      	ldrb	r3, [r3, #4]
 80005be:	f003 0302 	and.w	r3, r3, #2
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d005      	beq.n	80005d2 <updateLEDMatrix+0x3ba>
					HAL_GPIO_WritePin(ROW1_GPIO_Port,ROW1_Pin,RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005cc:	485b      	ldr	r0, [pc, #364]	; (800073c <updateLEDMatrix+0x524>)
 80005ce:	f001 f96f 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[4] & 0x04) == 0x04){
 80005d2:	4b59      	ldr	r3, [pc, #356]	; (8000738 <updateLEDMatrix+0x520>)
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	f003 0304 	and.w	r3, r3, #4
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d005      	beq.n	80005ea <updateLEDMatrix+0x3d2>
					HAL_GPIO_WritePin(ROW2_GPIO_Port,ROW2_Pin,RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e4:	4855      	ldr	r0, [pc, #340]	; (800073c <updateLEDMatrix+0x524>)
 80005e6:	f001 f963 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[4] & 0x08) == 0x08){
 80005ea:	4b53      	ldr	r3, [pc, #332]	; (8000738 <updateLEDMatrix+0x520>)
 80005ec:	791b      	ldrb	r3, [r3, #4]
 80005ee:	f003 0308 	and.w	r3, r3, #8
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d005      	beq.n	8000602 <updateLEDMatrix+0x3ea>
					HAL_GPIO_WritePin(ROW3_GPIO_Port,ROW3_Pin,RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005fc:	484f      	ldr	r0, [pc, #316]	; (800073c <updateLEDMatrix+0x524>)
 80005fe:	f001 f957 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[4] & 0x10) == 0x10){
 8000602:	4b4d      	ldr	r3, [pc, #308]	; (8000738 <updateLEDMatrix+0x520>)
 8000604:	791b      	ldrb	r3, [r3, #4]
 8000606:	f003 0310 	and.w	r3, r3, #16
 800060a:	2b00      	cmp	r3, #0
 800060c:	d005      	beq.n	800061a <updateLEDMatrix+0x402>
					HAL_GPIO_WritePin(ROW4_GPIO_Port,ROW4_Pin,RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000614:	4849      	ldr	r0, [pc, #292]	; (800073c <updateLEDMatrix+0x524>)
 8000616:	f001 f94b 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[4] & 0x20) == 0x20){
 800061a:	4b47      	ldr	r3, [pc, #284]	; (8000738 <updateLEDMatrix+0x520>)
 800061c:	791b      	ldrb	r3, [r3, #4]
 800061e:	f003 0320 	and.w	r3, r3, #32
 8000622:	2b00      	cmp	r3, #0
 8000624:	d005      	beq.n	8000632 <updateLEDMatrix+0x41a>
					HAL_GPIO_WritePin(ROW5_GPIO_Port,ROW5_Pin,RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062c:	4843      	ldr	r0, [pc, #268]	; (800073c <updateLEDMatrix+0x524>)
 800062e:	f001 f93f 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[4] & 0x40) == 0x40){
 8000632:	4b41      	ldr	r3, [pc, #260]	; (8000738 <updateLEDMatrix+0x520>)
 8000634:	791b      	ldrb	r3, [r3, #4]
 8000636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800063a:	2b00      	cmp	r3, #0
 800063c:	d005      	beq.n	800064a <updateLEDMatrix+0x432>
					HAL_GPIO_WritePin(ROW6_GPIO_Port,ROW6_Pin,RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000644:	483d      	ldr	r0, [pc, #244]	; (800073c <updateLEDMatrix+0x524>)
 8000646:	f001 f933 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[4] & 0x80) == 0x80){
 800064a:	4b3b      	ldr	r3, [pc, #236]	; (8000738 <updateLEDMatrix+0x520>)
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	b25b      	sxtb	r3, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	f280 814b 	bge.w	80008ec <updateLEDMatrix+0x6d4>
					HAL_GPIO_WritePin(ROW7_GPIO_Port,ROW7_Pin,RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800065c:	4837      	ldr	r0, [pc, #220]	; (800073c <updateLEDMatrix+0x524>)
 800065e:	f001 f927 	bl	80018b0 <HAL_GPIO_WritePin>
				}
					break;
 8000662:	e143      	b.n	80008ec <updateLEDMatrix+0x6d4>
			case 5:
				HAL_GPIO_WritePin(ENM5_GPIO_Port,ENM5_Pin,RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066a:	4832      	ldr	r0, [pc, #200]	; (8000734 <updateLEDMatrix+0x51c>)
 800066c:	f001 f920 	bl	80018b0 <HAL_GPIO_WritePin>
				if((matrix_buffer[5] & 0x01) == 0x01){
 8000670:	4b31      	ldr	r3, [pc, #196]	; (8000738 <updateLEDMatrix+0x520>)
 8000672:	795b      	ldrb	r3, [r3, #5]
 8000674:	f003 0301 	and.w	r3, r3, #1
 8000678:	2b00      	cmp	r3, #0
 800067a:	d005      	beq.n	8000688 <updateLEDMatrix+0x470>
					HAL_GPIO_WritePin(ROW0_GPIO_Port,ROW0_Pin,RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000682:	482e      	ldr	r0, [pc, #184]	; (800073c <updateLEDMatrix+0x524>)
 8000684:	f001 f914 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[5] & 0x02) == 0x02){
 8000688:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <updateLEDMatrix+0x520>)
 800068a:	795b      	ldrb	r3, [r3, #5]
 800068c:	f003 0302 	and.w	r3, r3, #2
 8000690:	2b00      	cmp	r3, #0
 8000692:	d005      	beq.n	80006a0 <updateLEDMatrix+0x488>
					HAL_GPIO_WritePin(ROW1_GPIO_Port,ROW1_Pin,RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069a:	4828      	ldr	r0, [pc, #160]	; (800073c <updateLEDMatrix+0x524>)
 800069c:	f001 f908 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[5] & 0x04) == 0x04){
 80006a0:	4b25      	ldr	r3, [pc, #148]	; (8000738 <updateLEDMatrix+0x520>)
 80006a2:	795b      	ldrb	r3, [r3, #5]
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d005      	beq.n	80006b8 <updateLEDMatrix+0x4a0>
					HAL_GPIO_WritePin(ROW2_GPIO_Port,ROW2_Pin,RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b2:	4822      	ldr	r0, [pc, #136]	; (800073c <updateLEDMatrix+0x524>)
 80006b4:	f001 f8fc 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[5] & 0x08) == 0x08){
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <updateLEDMatrix+0x520>)
 80006ba:	795b      	ldrb	r3, [r3, #5]
 80006bc:	f003 0308 	and.w	r3, r3, #8
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d005      	beq.n	80006d0 <updateLEDMatrix+0x4b8>
					HAL_GPIO_WritePin(ROW3_GPIO_Port,ROW3_Pin,RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ca:	481c      	ldr	r0, [pc, #112]	; (800073c <updateLEDMatrix+0x524>)
 80006cc:	f001 f8f0 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[5] & 0x10) == 0x10){
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <updateLEDMatrix+0x520>)
 80006d2:	795b      	ldrb	r3, [r3, #5]
 80006d4:	f003 0310 	and.w	r3, r3, #16
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d005      	beq.n	80006e8 <updateLEDMatrix+0x4d0>
					HAL_GPIO_WritePin(ROW4_GPIO_Port,ROW4_Pin,RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e2:	4816      	ldr	r0, [pc, #88]	; (800073c <updateLEDMatrix+0x524>)
 80006e4:	f001 f8e4 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[5] & 0x20) == 0x20){
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <updateLEDMatrix+0x520>)
 80006ea:	795b      	ldrb	r3, [r3, #5]
 80006ec:	f003 0320 	and.w	r3, r3, #32
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d005      	beq.n	8000700 <updateLEDMatrix+0x4e8>
					HAL_GPIO_WritePin(ROW5_GPIO_Port,ROW5_Pin,RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fa:	4810      	ldr	r0, [pc, #64]	; (800073c <updateLEDMatrix+0x524>)
 80006fc:	f001 f8d8 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[5] & 0x40) == 0x40){
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <updateLEDMatrix+0x520>)
 8000702:	795b      	ldrb	r3, [r3, #5]
 8000704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000708:	2b00      	cmp	r3, #0
 800070a:	d005      	beq.n	8000718 <updateLEDMatrix+0x500>
					HAL_GPIO_WritePin(ROW6_GPIO_Port,ROW6_Pin,RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000712:	480a      	ldr	r0, [pc, #40]	; (800073c <updateLEDMatrix+0x524>)
 8000714:	f001 f8cc 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[5] & 0x80) == 0x80){
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <updateLEDMatrix+0x520>)
 800071a:	795b      	ldrb	r3, [r3, #5]
 800071c:	b25b      	sxtb	r3, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	f280 80e6 	bge.w	80008f0 <updateLEDMatrix+0x6d8>
					HAL_GPIO_WritePin(ROW7_GPIO_Port,ROW7_Pin,RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800072a:	4804      	ldr	r0, [pc, #16]	; (800073c <updateLEDMatrix+0x524>)
 800072c:	f001 f8c0 	bl	80018b0 <HAL_GPIO_WritePin>
				}
					break;
 8000730:	e0de      	b.n	80008f0 <updateLEDMatrix+0x6d8>
 8000732:	bf00      	nop
 8000734:	40010800 	.word	0x40010800
 8000738:	2000001c 	.word	0x2000001c
 800073c:	40010c00 	.word	0x40010c00
			case 6:
				HAL_GPIO_WritePin(ENM6_GPIO_Port,ENM6_Pin,RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000746:	486f      	ldr	r0, [pc, #444]	; (8000904 <updateLEDMatrix+0x6ec>)
 8000748:	f001 f8b2 	bl	80018b0 <HAL_GPIO_WritePin>
				if((matrix_buffer[6] & 0x01) == 0x01){
 800074c:	4b6e      	ldr	r3, [pc, #440]	; (8000908 <updateLEDMatrix+0x6f0>)
 800074e:	799b      	ldrb	r3, [r3, #6]
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	2b00      	cmp	r3, #0
 8000756:	d005      	beq.n	8000764 <updateLEDMatrix+0x54c>
					HAL_GPIO_WritePin(ROW0_GPIO_Port,ROW0_Pin,RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075e:	486b      	ldr	r0, [pc, #428]	; (800090c <updateLEDMatrix+0x6f4>)
 8000760:	f001 f8a6 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[6] & 0x02) == 0x02){
 8000764:	4b68      	ldr	r3, [pc, #416]	; (8000908 <updateLEDMatrix+0x6f0>)
 8000766:	799b      	ldrb	r3, [r3, #6]
 8000768:	f003 0302 	and.w	r3, r3, #2
 800076c:	2b00      	cmp	r3, #0
 800076e:	d005      	beq.n	800077c <updateLEDMatrix+0x564>
					HAL_GPIO_WritePin(ROW1_GPIO_Port,ROW1_Pin,RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000776:	4865      	ldr	r0, [pc, #404]	; (800090c <updateLEDMatrix+0x6f4>)
 8000778:	f001 f89a 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[6] & 0x04) == 0x04){
 800077c:	4b62      	ldr	r3, [pc, #392]	; (8000908 <updateLEDMatrix+0x6f0>)
 800077e:	799b      	ldrb	r3, [r3, #6]
 8000780:	f003 0304 	and.w	r3, r3, #4
 8000784:	2b00      	cmp	r3, #0
 8000786:	d005      	beq.n	8000794 <updateLEDMatrix+0x57c>
					HAL_GPIO_WritePin(ROW2_GPIO_Port,ROW2_Pin,RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078e:	485f      	ldr	r0, [pc, #380]	; (800090c <updateLEDMatrix+0x6f4>)
 8000790:	f001 f88e 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[6] & 0x08) == 0x08){
 8000794:	4b5c      	ldr	r3, [pc, #368]	; (8000908 <updateLEDMatrix+0x6f0>)
 8000796:	799b      	ldrb	r3, [r3, #6]
 8000798:	f003 0308 	and.w	r3, r3, #8
 800079c:	2b00      	cmp	r3, #0
 800079e:	d005      	beq.n	80007ac <updateLEDMatrix+0x594>
					HAL_GPIO_WritePin(ROW3_GPIO_Port,ROW3_Pin,RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007a6:	4859      	ldr	r0, [pc, #356]	; (800090c <updateLEDMatrix+0x6f4>)
 80007a8:	f001 f882 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[6] & 0x10) == 0x10){
 80007ac:	4b56      	ldr	r3, [pc, #344]	; (8000908 <updateLEDMatrix+0x6f0>)
 80007ae:	799b      	ldrb	r3, [r3, #6]
 80007b0:	f003 0310 	and.w	r3, r3, #16
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d005      	beq.n	80007c4 <updateLEDMatrix+0x5ac>
					HAL_GPIO_WritePin(ROW4_GPIO_Port,ROW4_Pin,RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007be:	4853      	ldr	r0, [pc, #332]	; (800090c <updateLEDMatrix+0x6f4>)
 80007c0:	f001 f876 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[6] & 0x20) == 0x20){
 80007c4:	4b50      	ldr	r3, [pc, #320]	; (8000908 <updateLEDMatrix+0x6f0>)
 80007c6:	799b      	ldrb	r3, [r3, #6]
 80007c8:	f003 0320 	and.w	r3, r3, #32
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d005      	beq.n	80007dc <updateLEDMatrix+0x5c4>
					HAL_GPIO_WritePin(ROW5_GPIO_Port,ROW5_Pin,RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d6:	484d      	ldr	r0, [pc, #308]	; (800090c <updateLEDMatrix+0x6f4>)
 80007d8:	f001 f86a 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[6] & 0x40) == 0x40){
 80007dc:	4b4a      	ldr	r3, [pc, #296]	; (8000908 <updateLEDMatrix+0x6f0>)
 80007de:	799b      	ldrb	r3, [r3, #6]
 80007e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d005      	beq.n	80007f4 <updateLEDMatrix+0x5dc>
					HAL_GPIO_WritePin(ROW6_GPIO_Port,ROW6_Pin,RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ee:	4847      	ldr	r0, [pc, #284]	; (800090c <updateLEDMatrix+0x6f4>)
 80007f0:	f001 f85e 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[6] & 0x80) == 0x80){
 80007f4:	4b44      	ldr	r3, [pc, #272]	; (8000908 <updateLEDMatrix+0x6f0>)
 80007f6:	799b      	ldrb	r3, [r3, #6]
 80007f8:	b25b      	sxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da7a      	bge.n	80008f4 <updateLEDMatrix+0x6dc>
					HAL_GPIO_WritePin(ROW7_GPIO_Port,ROW7_Pin,RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000804:	4841      	ldr	r0, [pc, #260]	; (800090c <updateLEDMatrix+0x6f4>)
 8000806:	f001 f853 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				break;
 800080a:	e073      	b.n	80008f4 <updateLEDMatrix+0x6dc>
			case 7:
				HAL_GPIO_WritePin(ENM7_GPIO_Port,ENM7_Pin,RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000812:	483c      	ldr	r0, [pc, #240]	; (8000904 <updateLEDMatrix+0x6ec>)
 8000814:	f001 f84c 	bl	80018b0 <HAL_GPIO_WritePin>
				if((matrix_buffer[7] & 0x01) == 0x01){
 8000818:	4b3b      	ldr	r3, [pc, #236]	; (8000908 <updateLEDMatrix+0x6f0>)
 800081a:	79db      	ldrb	r3, [r3, #7]
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	2b00      	cmp	r3, #0
 8000822:	d005      	beq.n	8000830 <updateLEDMatrix+0x618>
					HAL_GPIO_WritePin(ROW0_GPIO_Port,ROW0_Pin,RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082a:	4838      	ldr	r0, [pc, #224]	; (800090c <updateLEDMatrix+0x6f4>)
 800082c:	f001 f840 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[7] & 0x02) == 0x02){
 8000830:	4b35      	ldr	r3, [pc, #212]	; (8000908 <updateLEDMatrix+0x6f0>)
 8000832:	79db      	ldrb	r3, [r3, #7]
 8000834:	f003 0302 	and.w	r3, r3, #2
 8000838:	2b00      	cmp	r3, #0
 800083a:	d005      	beq.n	8000848 <updateLEDMatrix+0x630>
					HAL_GPIO_WritePin(ROW1_GPIO_Port,ROW1_Pin,RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000842:	4832      	ldr	r0, [pc, #200]	; (800090c <updateLEDMatrix+0x6f4>)
 8000844:	f001 f834 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[7] & 0x04) == 0x04){
 8000848:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <updateLEDMatrix+0x6f0>)
 800084a:	79db      	ldrb	r3, [r3, #7]
 800084c:	f003 0304 	and.w	r3, r3, #4
 8000850:	2b00      	cmp	r3, #0
 8000852:	d005      	beq.n	8000860 <updateLEDMatrix+0x648>
					HAL_GPIO_WritePin(ROW2_GPIO_Port,ROW2_Pin,RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085a:	482c      	ldr	r0, [pc, #176]	; (800090c <updateLEDMatrix+0x6f4>)
 800085c:	f001 f828 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[7] & 0x08) == 0x08){
 8000860:	4b29      	ldr	r3, [pc, #164]	; (8000908 <updateLEDMatrix+0x6f0>)
 8000862:	79db      	ldrb	r3, [r3, #7]
 8000864:	f003 0308 	and.w	r3, r3, #8
 8000868:	2b00      	cmp	r3, #0
 800086a:	d005      	beq.n	8000878 <updateLEDMatrix+0x660>
					HAL_GPIO_WritePin(ROW3_GPIO_Port,ROW3_Pin,RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000872:	4826      	ldr	r0, [pc, #152]	; (800090c <updateLEDMatrix+0x6f4>)
 8000874:	f001 f81c 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[7] & 0x10) == 0x10){
 8000878:	4b23      	ldr	r3, [pc, #140]	; (8000908 <updateLEDMatrix+0x6f0>)
 800087a:	79db      	ldrb	r3, [r3, #7]
 800087c:	f003 0310 	and.w	r3, r3, #16
 8000880:	2b00      	cmp	r3, #0
 8000882:	d005      	beq.n	8000890 <updateLEDMatrix+0x678>
					HAL_GPIO_WritePin(ROW4_GPIO_Port,ROW4_Pin,RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088a:	4820      	ldr	r0, [pc, #128]	; (800090c <updateLEDMatrix+0x6f4>)
 800088c:	f001 f810 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[7] & 0x20) == 0x20){
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <updateLEDMatrix+0x6f0>)
 8000892:	79db      	ldrb	r3, [r3, #7]
 8000894:	f003 0320 	and.w	r3, r3, #32
 8000898:	2b00      	cmp	r3, #0
 800089a:	d005      	beq.n	80008a8 <updateLEDMatrix+0x690>
					HAL_GPIO_WritePin(ROW5_GPIO_Port,ROW5_Pin,RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a2:	481a      	ldr	r0, [pc, #104]	; (800090c <updateLEDMatrix+0x6f4>)
 80008a4:	f001 f804 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[7] & 0x40) == 0x40){
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <updateLEDMatrix+0x6f0>)
 80008aa:	79db      	ldrb	r3, [r3, #7]
 80008ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d005      	beq.n	80008c0 <updateLEDMatrix+0x6a8>
					HAL_GPIO_WritePin(ROW6_GPIO_Port,ROW6_Pin,RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ba:	4814      	ldr	r0, [pc, #80]	; (800090c <updateLEDMatrix+0x6f4>)
 80008bc:	f000 fff8 	bl	80018b0 <HAL_GPIO_WritePin>
				}
				if((matrix_buffer[7] & 0x80) == 0x80){
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <updateLEDMatrix+0x6f0>)
 80008c2:	79db      	ldrb	r3, [r3, #7]
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	da16      	bge.n	80008f8 <updateLEDMatrix+0x6e0>
					HAL_GPIO_WritePin(ROW7_GPIO_Port,ROW7_Pin,RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008d0:	480e      	ldr	r0, [pc, #56]	; (800090c <updateLEDMatrix+0x6f4>)
 80008d2:	f000 ffed 	bl	80018b0 <HAL_GPIO_WritePin>
				}
					break;
 80008d6:	e00f      	b.n	80008f8 <updateLEDMatrix+0x6e0>
			default:
				break;
 80008d8:	bf00      	nop
 80008da:	e00e      	b.n	80008fa <updateLEDMatrix+0x6e2>
				break;
 80008dc:	bf00      	nop
 80008de:	e00c      	b.n	80008fa <updateLEDMatrix+0x6e2>
				break;
 80008e0:	bf00      	nop
 80008e2:	e00a      	b.n	80008fa <updateLEDMatrix+0x6e2>
				break;
 80008e4:	bf00      	nop
 80008e6:	e008      	b.n	80008fa <updateLEDMatrix+0x6e2>
				break;
 80008e8:	bf00      	nop
 80008ea:	e006      	b.n	80008fa <updateLEDMatrix+0x6e2>
					break;
 80008ec:	bf00      	nop
 80008ee:	e004      	b.n	80008fa <updateLEDMatrix+0x6e2>
					break;
 80008f0:	bf00      	nop
 80008f2:	e002      	b.n	80008fa <updateLEDMatrix+0x6e2>
				break;
 80008f4:	bf00      	nop
 80008f6:	e000      	b.n	80008fa <updateLEDMatrix+0x6e2>
					break;
 80008f8:	bf00      	nop
		}
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40010800 	.word	0x40010800
 8000908:	2000001c 	.word	0x2000001c
 800090c:	40010c00 	.word	0x40010c00

08000910 <updateLEDMatrixBuffer>:
void updateLEDMatrixBuffer(int num){
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	switch(num){
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b09      	cmp	r3, #9
 800091c:	f200 8112 	bhi.w	8000b44 <updateLEDMatrixBuffer+0x234>
 8000920:	a201      	add	r2, pc, #4	; (adr r2, 8000928 <updateLEDMatrixBuffer+0x18>)
 8000922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000926:	bf00      	nop
 8000928:	08000951 	.word	0x08000951
 800092c:	08000983 	.word	0x08000983
 8000930:	080009b5 	.word	0x080009b5
 8000934:	080009e7 	.word	0x080009e7
 8000938:	08000a19 	.word	0x08000a19
 800093c:	08000a4b 	.word	0x08000a4b
 8000940:	08000a7d 	.word	0x08000a7d
 8000944:	08000aaf 	.word	0x08000aaf
 8000948:	08000ae1 	.word	0x08000ae1
 800094c:	08000b13 	.word	0x08000b13
	case 0:
		matrix_buffer[0] = 0x00;
 8000950:	4b7f      	ldr	r3, [pc, #508]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
		matrix_buffer[1] = 0x7E;
 8000956:	4b7e      	ldr	r3, [pc, #504]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000958:	227e      	movs	r2, #126	; 0x7e
 800095a:	705a      	strb	r2, [r3, #1]
		matrix_buffer[2] = 0x81;
 800095c:	4b7c      	ldr	r3, [pc, #496]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 800095e:	2281      	movs	r2, #129	; 0x81
 8000960:	709a      	strb	r2, [r3, #2]
		matrix_buffer[3] = 0x81;
 8000962:	4b7b      	ldr	r3, [pc, #492]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000964:	2281      	movs	r2, #129	; 0x81
 8000966:	70da      	strb	r2, [r3, #3]
		matrix_buffer[4] = 0x81;
 8000968:	4b79      	ldr	r3, [pc, #484]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 800096a:	2281      	movs	r2, #129	; 0x81
 800096c:	711a      	strb	r2, [r3, #4]
		matrix_buffer[5] = 0x81;
 800096e:	4b78      	ldr	r3, [pc, #480]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000970:	2281      	movs	r2, #129	; 0x81
 8000972:	715a      	strb	r2, [r3, #5]
		matrix_buffer[6] = 0x7E;
 8000974:	4b76      	ldr	r3, [pc, #472]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000976:	227e      	movs	r2, #126	; 0x7e
 8000978:	719a      	strb	r2, [r3, #6]
		matrix_buffer[7] = 0x00;
 800097a:	4b75      	ldr	r3, [pc, #468]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 800097c:	2200      	movs	r2, #0
 800097e:	71da      	strb	r2, [r3, #7]
		break;
 8000980:	e0e0      	b.n	8000b44 <updateLEDMatrixBuffer+0x234>
	case 1:
		matrix_buffer[0] = 0x00;
 8000982:	4b73      	ldr	r3, [pc, #460]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
		matrix_buffer[1] = 0x00;
 8000988:	4b71      	ldr	r3, [pc, #452]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 800098a:	2200      	movs	r2, #0
 800098c:	705a      	strb	r2, [r3, #1]
		matrix_buffer[2] = 0x84;
 800098e:	4b70      	ldr	r3, [pc, #448]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000990:	2284      	movs	r2, #132	; 0x84
 8000992:	709a      	strb	r2, [r3, #2]
		matrix_buffer[3] = 0xFE;
 8000994:	4b6e      	ldr	r3, [pc, #440]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000996:	22fe      	movs	r2, #254	; 0xfe
 8000998:	70da      	strb	r2, [r3, #3]
		matrix_buffer[4] = 0x80;
 800099a:	4b6d      	ldr	r3, [pc, #436]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 800099c:	2280      	movs	r2, #128	; 0x80
 800099e:	711a      	strb	r2, [r3, #4]
		matrix_buffer[5] = 0x00;
 80009a0:	4b6b      	ldr	r3, [pc, #428]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	715a      	strb	r2, [r3, #5]
		matrix_buffer[6] = 0x00;
 80009a6:	4b6a      	ldr	r3, [pc, #424]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	719a      	strb	r2, [r3, #6]
		matrix_buffer[7] = 0x00;
 80009ac:	4b68      	ldr	r3, [pc, #416]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	71da      	strb	r2, [r3, #7]
		break;
 80009b2:	e0c7      	b.n	8000b44 <updateLEDMatrixBuffer+0x234>
	case 2:
		matrix_buffer[0] = 0x00;
 80009b4:	4b66      	ldr	r3, [pc, #408]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
		matrix_buffer[1] = 0x84;
 80009ba:	4b65      	ldr	r3, [pc, #404]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 80009bc:	2284      	movs	r2, #132	; 0x84
 80009be:	705a      	strb	r2, [r3, #1]
		matrix_buffer[2] = 0xC2;
 80009c0:	4b63      	ldr	r3, [pc, #396]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 80009c2:	22c2      	movs	r2, #194	; 0xc2
 80009c4:	709a      	strb	r2, [r3, #2]
		matrix_buffer[3] = 0xA2;
 80009c6:	4b62      	ldr	r3, [pc, #392]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 80009c8:	22a2      	movs	r2, #162	; 0xa2
 80009ca:	70da      	strb	r2, [r3, #3]
		matrix_buffer[4] = 0x92;
 80009cc:	4b60      	ldr	r3, [pc, #384]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 80009ce:	2292      	movs	r2, #146	; 0x92
 80009d0:	711a      	strb	r2, [r3, #4]
		matrix_buffer[5] = 0x8C;
 80009d2:	4b5f      	ldr	r3, [pc, #380]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 80009d4:	228c      	movs	r2, #140	; 0x8c
 80009d6:	715a      	strb	r2, [r3, #5]
		matrix_buffer[6] = 0x00;
 80009d8:	4b5d      	ldr	r3, [pc, #372]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 80009da:	2200      	movs	r2, #0
 80009dc:	719a      	strb	r2, [r3, #6]
		matrix_buffer[7] = 0x00;
 80009de:	4b5c      	ldr	r3, [pc, #368]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	71da      	strb	r2, [r3, #7]
		break;
 80009e4:	e0ae      	b.n	8000b44 <updateLEDMatrixBuffer+0x234>
	case 3:
		matrix_buffer[0] = 0x00;
 80009e6:	4b5a      	ldr	r3, [pc, #360]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
		matrix_buffer[1] = 0x42;
 80009ec:	4b58      	ldr	r3, [pc, #352]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 80009ee:	2242      	movs	r2, #66	; 0x42
 80009f0:	705a      	strb	r2, [r3, #1]
		matrix_buffer[2] = 0x92;
 80009f2:	4b57      	ldr	r3, [pc, #348]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 80009f4:	2292      	movs	r2, #146	; 0x92
 80009f6:	709a      	strb	r2, [r3, #2]
		matrix_buffer[3] = 0x9A;
 80009f8:	4b55      	ldr	r3, [pc, #340]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 80009fa:	229a      	movs	r2, #154	; 0x9a
 80009fc:	70da      	strb	r2, [r3, #3]
		matrix_buffer[4] = 0x96;
 80009fe:	4b54      	ldr	r3, [pc, #336]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a00:	2296      	movs	r2, #150	; 0x96
 8000a02:	711a      	strb	r2, [r3, #4]
		matrix_buffer[5] = 0x62;
 8000a04:	4b52      	ldr	r3, [pc, #328]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a06:	2262      	movs	r2, #98	; 0x62
 8000a08:	715a      	strb	r2, [r3, #5]
		matrix_buffer[6] = 0x00;
 8000a0a:	4b51      	ldr	r3, [pc, #324]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	719a      	strb	r2, [r3, #6]
		matrix_buffer[7] = 0x00;
 8000a10:	4b4f      	ldr	r3, [pc, #316]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	71da      	strb	r2, [r3, #7]
		break;
 8000a16:	e095      	b.n	8000b44 <updateLEDMatrixBuffer+0x234>
	case 4:
		matrix_buffer[0] = 0x00;
 8000a18:	4b4d      	ldr	r3, [pc, #308]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
		matrix_buffer[1] = 0x30;
 8000a1e:	4b4c      	ldr	r3, [pc, #304]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a20:	2230      	movs	r2, #48	; 0x30
 8000a22:	705a      	strb	r2, [r3, #1]
		matrix_buffer[2] = 0x28;
 8000a24:	4b4a      	ldr	r3, [pc, #296]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a26:	2228      	movs	r2, #40	; 0x28
 8000a28:	709a      	strb	r2, [r3, #2]
		matrix_buffer[3] = 0x24;
 8000a2a:	4b49      	ldr	r3, [pc, #292]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a2c:	2224      	movs	r2, #36	; 0x24
 8000a2e:	70da      	strb	r2, [r3, #3]
		matrix_buffer[4] = 0xFE;
 8000a30:	4b47      	ldr	r3, [pc, #284]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a32:	22fe      	movs	r2, #254	; 0xfe
 8000a34:	711a      	strb	r2, [r3, #4]
		matrix_buffer[5] = 0x20;
 8000a36:	4b46      	ldr	r3, [pc, #280]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a38:	2220      	movs	r2, #32
 8000a3a:	715a      	strb	r2, [r3, #5]
		matrix_buffer[6] = 0x00;
 8000a3c:	4b44      	ldr	r3, [pc, #272]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	719a      	strb	r2, [r3, #6]
		matrix_buffer[7] = 0x00;
 8000a42:	4b43      	ldr	r3, [pc, #268]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	71da      	strb	r2, [r3, #7]
		break;
 8000a48:	e07c      	b.n	8000b44 <updateLEDMatrixBuffer+0x234>
	case 5:
		matrix_buffer[0] = 0x00;
 8000a4a:	4b41      	ldr	r3, [pc, #260]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
		matrix_buffer[1] = 0x5E;
 8000a50:	4b3f      	ldr	r3, [pc, #252]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a52:	225e      	movs	r2, #94	; 0x5e
 8000a54:	705a      	strb	r2, [r3, #1]
		matrix_buffer[2] = 0x92;
 8000a56:	4b3e      	ldr	r3, [pc, #248]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a58:	2292      	movs	r2, #146	; 0x92
 8000a5a:	709a      	strb	r2, [r3, #2]
		matrix_buffer[3] = 0x92;
 8000a5c:	4b3c      	ldr	r3, [pc, #240]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a5e:	2292      	movs	r2, #146	; 0x92
 8000a60:	70da      	strb	r2, [r3, #3]
		matrix_buffer[4] = 0x92;
 8000a62:	4b3b      	ldr	r3, [pc, #236]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a64:	2292      	movs	r2, #146	; 0x92
 8000a66:	711a      	strb	r2, [r3, #4]
		matrix_buffer[5] = 0x62;
 8000a68:	4b39      	ldr	r3, [pc, #228]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a6a:	2262      	movs	r2, #98	; 0x62
 8000a6c:	715a      	strb	r2, [r3, #5]
		matrix_buffer[6] = 0x00;
 8000a6e:	4b38      	ldr	r3, [pc, #224]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	719a      	strb	r2, [r3, #6]
		matrix_buffer[7] = 0x00;
 8000a74:	4b36      	ldr	r3, [pc, #216]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	71da      	strb	r2, [r3, #7]
		break;
 8000a7a:	e063      	b.n	8000b44 <updateLEDMatrixBuffer+0x234>
	case 6:
		matrix_buffer[0] = 0x00;
 8000a7c:	4b34      	ldr	r3, [pc, #208]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
		matrix_buffer[1] = 0x7C;
 8000a82:	4b33      	ldr	r3, [pc, #204]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a84:	227c      	movs	r2, #124	; 0x7c
 8000a86:	705a      	strb	r2, [r3, #1]
		matrix_buffer[2] = 0x92;
 8000a88:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a8a:	2292      	movs	r2, #146	; 0x92
 8000a8c:	709a      	strb	r2, [r3, #2]
		matrix_buffer[3] = 0x92;
 8000a8e:	4b30      	ldr	r3, [pc, #192]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a90:	2292      	movs	r2, #146	; 0x92
 8000a92:	70da      	strb	r2, [r3, #3]
		matrix_buffer[4] = 0x92;
 8000a94:	4b2e      	ldr	r3, [pc, #184]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a96:	2292      	movs	r2, #146	; 0x92
 8000a98:	711a      	strb	r2, [r3, #4]
		matrix_buffer[5] = 0x64;
 8000a9a:	4b2d      	ldr	r3, [pc, #180]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000a9c:	2264      	movs	r2, #100	; 0x64
 8000a9e:	715a      	strb	r2, [r3, #5]
		matrix_buffer[6] = 0x00;
 8000aa0:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	719a      	strb	r2, [r3, #6]
		matrix_buffer[7] = 0x00;
 8000aa6:	4b2a      	ldr	r3, [pc, #168]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	71da      	strb	r2, [r3, #7]
		break;
 8000aac:	e04a      	b.n	8000b44 <updateLEDMatrixBuffer+0x234>
	case 7:
		matrix_buffer[0] = 0x00;
 8000aae:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
		matrix_buffer[1] = 0x02;
 8000ab4:	4b26      	ldr	r3, [pc, #152]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	705a      	strb	r2, [r3, #1]
		matrix_buffer[2] = 0x02;
 8000aba:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000abc:	2202      	movs	r2, #2
 8000abe:	709a      	strb	r2, [r3, #2]
		matrix_buffer[3] = 0xF2;
 8000ac0:	4b23      	ldr	r3, [pc, #140]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000ac2:	22f2      	movs	r2, #242	; 0xf2
 8000ac4:	70da      	strb	r2, [r3, #3]
		matrix_buffer[4] = 0x0A;
 8000ac6:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000ac8:	220a      	movs	r2, #10
 8000aca:	711a      	strb	r2, [r3, #4]
		matrix_buffer[5] = 0x06;
 8000acc:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000ace:	2206      	movs	r2, #6
 8000ad0:	715a      	strb	r2, [r3, #5]
		matrix_buffer[6] = 0x00;
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	719a      	strb	r2, [r3, #6]
		matrix_buffer[7] = 0x00;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	71da      	strb	r2, [r3, #7]
		break;
 8000ade:	e031      	b.n	8000b44 <updateLEDMatrixBuffer+0x234>
	case 8:
		matrix_buffer[0] = 0x00;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
		matrix_buffer[1] = 0x6C;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000ae8:	226c      	movs	r2, #108	; 0x6c
 8000aea:	705a      	strb	r2, [r3, #1]
		matrix_buffer[2] = 0x92;
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000aee:	2292      	movs	r2, #146	; 0x92
 8000af0:	709a      	strb	r2, [r3, #2]
		matrix_buffer[3] = 0x92;
 8000af2:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000af4:	2292      	movs	r2, #146	; 0x92
 8000af6:	70da      	strb	r2, [r3, #3]
		matrix_buffer[4] = 0x92;
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000afa:	2292      	movs	r2, #146	; 0x92
 8000afc:	711a      	strb	r2, [r3, #4]
		matrix_buffer[5] = 0x6C;
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000b00:	226c      	movs	r2, #108	; 0x6c
 8000b02:	715a      	strb	r2, [r3, #5]
		matrix_buffer[6] = 0x00;
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	719a      	strb	r2, [r3, #6]
		matrix_buffer[7] = 0x00;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	71da      	strb	r2, [r3, #7]
		break;
 8000b10:	e018      	b.n	8000b44 <updateLEDMatrixBuffer+0x234>
	case 9:
		matrix_buffer[0] = 0x00;
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
		matrix_buffer[1] = 0x4C;
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000b1a:	224c      	movs	r2, #76	; 0x4c
 8000b1c:	705a      	strb	r2, [r3, #1]
		matrix_buffer[2] = 0x92;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000b20:	2292      	movs	r2, #146	; 0x92
 8000b22:	709a      	strb	r2, [r3, #2]
		matrix_buffer[3] = 0x92;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000b26:	2292      	movs	r2, #146	; 0x92
 8000b28:	70da      	strb	r2, [r3, #3]
		matrix_buffer[4] = 0x92;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000b2c:	2292      	movs	r2, #146	; 0x92
 8000b2e:	711a      	strb	r2, [r3, #4]
		matrix_buffer[5] = 0x7C;
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000b32:	227c      	movs	r2, #124	; 0x7c
 8000b34:	715a      	strb	r2, [r3, #5]
		matrix_buffer[6] = 0x00;
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	719a      	strb	r2, [r3, #6]
		matrix_buffer[7] = 0x00;
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <updateLEDMatrixBuffer+0x240>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	71da      	strb	r2, [r3, #7]
		break;
 8000b42:	bf00      	nop
	}
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	2000001c 	.word	0x2000001c

08000b54 <shiftLeft>:
void shiftLeft(){
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
	uint8_t temp = matrix_buffer[0];
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <shiftLeft+0x40>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	70fb      	strb	r3, [r7, #3]
	for(int i=1;i<8;i++){
 8000b60:	2301      	movs	r3, #1
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	e00a      	b.n	8000b7c <shiftLeft+0x28>
		matrix_buffer[i-1] = matrix_buffer[i];
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	490a      	ldr	r1, [pc, #40]	; (8000b94 <shiftLeft+0x40>)
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	440a      	add	r2, r1
 8000b70:	7811      	ldrb	r1, [r2, #0]
 8000b72:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <shiftLeft+0x40>)
 8000b74:	54d1      	strb	r1, [r2, r3]
	for(int i=1;i<8;i++){
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b07      	cmp	r3, #7
 8000b80:	ddf1      	ble.n	8000b66 <shiftLeft+0x12>
	}
	matrix_buffer[7] = temp;
 8000b82:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <shiftLeft+0x40>)
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	71d3      	strb	r3, [r2, #7]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	2000001c 	.word	0x2000001c

08000b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9c:	f000 fb9c 	bl	80012d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba0:	f000 f99c 	bl	8000edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba4:	f000 fa22 	bl	8000fec <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ba8:	f000 f9d4 	bl	8000f54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000bac:	4840      	ldr	r0, [pc, #256]	; (8000cb0 <main+0x118>)
 8000bae:	f001 fadf 	bl	8002170 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer0(250);
 8000bb2:	20fa      	movs	r0, #250	; 0xfa
 8000bb4:	f000 fa76 	bl	80010a4 <setTimer0>
  setTimer1(50);
 8000bb8:	2032      	movs	r0, #50	; 0x32
 8000bba:	f000 fa8f 	bl	80010dc <setTimer1>
  setUpLEDMatrix();
 8000bbe:	f7ff fac5 	bl	800014c <setUpLEDMatrix>
  updateLEDMatrixBuffer(8);
 8000bc2:	2008      	movs	r0, #8
 8000bc4:	f7ff fea4 	bl	8000910 <updateLEDMatrixBuffer>
  while (1)
  {
    /* USER CODE END WHILE */
	  if(timer0_flag == 1) {
 8000bc8:	4b3a      	ldr	r3, [pc, #232]	; (8000cb4 <main+0x11c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d14f      	bne.n	8000c70 <main+0xd8>
        //Blinking LED + DOT
        if (index_led % 2 == 0)
 8000bd0:	4b39      	ldr	r3, [pc, #228]	; (8000cb8 <main+0x120>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d103      	bne.n	8000be4 <main+0x4c>
            HAL_GPIO_TogglePin(GPIOA, DOT_Pin|LED_RED_Pin);
 8000bdc:	2130      	movs	r1, #48	; 0x30
 8000bde:	4837      	ldr	r0, [pc, #220]	; (8000cbc <main+0x124>)
 8000be0:	f000 fe7e 	bl	80018e0 <HAL_GPIO_TogglePin>

        //Digital clock
        if (index_led == 0) {
 8000be4:	4b34      	ldr	r3, [pc, #208]	; (8000cb8 <main+0x120>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d125      	bne.n	8000c38 <main+0xa0>
            second++;
 8000bec:	4b34      	ldr	r3, [pc, #208]	; (8000cc0 <main+0x128>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	4a33      	ldr	r2, [pc, #204]	; (8000cc0 <main+0x128>)
 8000bf4:	6013      	str	r3, [r2, #0]
            if(second >= 60) {
 8000bf6:	4b32      	ldr	r3, [pc, #200]	; (8000cc0 <main+0x128>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b3b      	cmp	r3, #59	; 0x3b
 8000bfc:	dd07      	ble.n	8000c0e <main+0x76>
                second = 0;
 8000bfe:	4b30      	ldr	r3, [pc, #192]	; (8000cc0 <main+0x128>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
                minute++;
 8000c04:	4b2f      	ldr	r3, [pc, #188]	; (8000cc4 <main+0x12c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	4a2e      	ldr	r2, [pc, #184]	; (8000cc4 <main+0x12c>)
 8000c0c:	6013      	str	r3, [r2, #0]
            }
            if(minute >= 60) {
 8000c0e:	4b2d      	ldr	r3, [pc, #180]	; (8000cc4 <main+0x12c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b3b      	cmp	r3, #59	; 0x3b
 8000c14:	dd07      	ble.n	8000c26 <main+0x8e>
                minute = 0;
 8000c16:	4b2b      	ldr	r3, [pc, #172]	; (8000cc4 <main+0x12c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
                hour++;
 8000c1c:	4b2a      	ldr	r3, [pc, #168]	; (8000cc8 <main+0x130>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	4a29      	ldr	r2, [pc, #164]	; (8000cc8 <main+0x130>)
 8000c24:	6013      	str	r3, [r2, #0]
            }
            if(hour >= 24) {
 8000c26:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <main+0x130>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b17      	cmp	r3, #23
 8000c2c:	dd02      	ble.n	8000c34 <main+0x9c>
                hour = 0;
 8000c2e:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <main+0x130>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
            }
            updateClockBuffer();
 8000c34:	f000 f908 	bl	8000e48 <updateClockBuffer>
        }

        //Display on 7SEG_LED
        update7SEG(index_led);
 8000c38:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <main+0x120>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 f8b7 	bl	8000db0 <update7SEG>
        display7SEG(led_buffer[index_led]);
 8000c42:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <main+0x120>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a21      	ldr	r2, [pc, #132]	; (8000ccc <main+0x134>)
 8000c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 f843 	bl	8000cd8 <display7SEG>
        index_led = (index_led + 1) % 4;
 8000c52:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <main+0x120>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3301      	adds	r3, #1
 8000c58:	425a      	negs	r2, r3
 8000c5a:	f003 0303 	and.w	r3, r3, #3
 8000c5e:	f002 0203 	and.w	r2, r2, #3
 8000c62:	bf58      	it	pl
 8000c64:	4253      	negpl	r3, r2
 8000c66:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <main+0x120>)
 8000c68:	6013      	str	r3, [r2, #0]
        setTimer0(250);
 8000c6a:	20fa      	movs	r0, #250	; 0xfa
 8000c6c:	f000 fa1a 	bl	80010a4 <setTimer0>
    }
	  if (timer1_flag == 1) {
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <main+0x138>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d1a7      	bne.n	8000bc8 <main+0x30>


		  updateLEDMatrix(index_led_matrix++);
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <main+0x13c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	1c5a      	adds	r2, r3, #1
 8000c7e:	4915      	ldr	r1, [pc, #84]	; (8000cd4 <main+0x13c>)
 8000c80:	600a      	str	r2, [r1, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fac8 	bl	8000218 <updateLEDMatrix>
		  index_led_matrix %= MAX_LED_MATRIX;
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <main+0x13c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2208      	movs	r2, #8
 8000c8e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000c92:	fb01 f202 	mul.w	r2, r1, r2
 8000c96:	1a9b      	subs	r3, r3, r2
 8000c98:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <main+0x13c>)
 8000c9a:	6013      	str	r3, [r2, #0]
		  if (index_led_matrix==0) shiftLeft();
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <main+0x13c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d101      	bne.n	8000ca8 <main+0x110>
 8000ca4:	f7ff ff56 	bl	8000b54 <shiftLeft>
		  setTimer1(50);
 8000ca8:	2032      	movs	r0, #50	; 0x32
 8000caa:	f000 fa17 	bl	80010dc <setTimer1>
	  if(timer0_flag == 1) {
 8000cae:	e78b      	b.n	8000bc8 <main+0x30>
 8000cb0:	20000058 	.word	0x20000058
 8000cb4:	200000a8 	.word	0x200000a8
 8000cb8:	200000a0 	.word	0x200000a0
 8000cbc:	40010800 	.word	0x40010800
 8000cc0:	20000018 	.word	0x20000018
 8000cc4:	20000014 	.word	0x20000014
 8000cc8:	20000010 	.word	0x20000010
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	200000b0 	.word	0x200000b0
 8000cd4:	200000a4 	.word	0x200000a4

08000cd8 <display7SEG>:
  /* USER CODE END 3 */
}

static uint8_t LED7_SEG[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};

void display7SEG(int index) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, ((LED7_SEG[index] >> 0) & 0x01));
 8000ce0:	4a31      	ldr	r2, [pc, #196]	; (8000da8 <display7SEG+0xd0>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	461a      	mov	r2, r3
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	482e      	ldr	r0, [pc, #184]	; (8000dac <display7SEG+0xd4>)
 8000cf4:	f000 fddc 	bl	80018b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, ((LED7_SEG[index] >> 1) & 0x01));
 8000cf8:	4a2b      	ldr	r2, [pc, #172]	; (8000da8 <display7SEG+0xd0>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	085b      	lsrs	r3, r3, #1
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	4827      	ldr	r0, [pc, #156]	; (8000dac <display7SEG+0xd4>)
 8000d10:	f000 fdce 	bl	80018b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, ((LED7_SEG[index] >> 2) & 0x01));
 8000d14:	4a24      	ldr	r2, [pc, #144]	; (8000da8 <display7SEG+0xd0>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	089b      	lsrs	r3, r3, #2
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	461a      	mov	r2, r3
 8000d28:	2104      	movs	r1, #4
 8000d2a:	4820      	ldr	r0, [pc, #128]	; (8000dac <display7SEG+0xd4>)
 8000d2c:	f000 fdc0 	bl	80018b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ((LED7_SEG[index] >> 3) & 0x01));
 8000d30:	4a1d      	ldr	r2, [pc, #116]	; (8000da8 <display7SEG+0xd0>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	08db      	lsrs	r3, r3, #3
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	461a      	mov	r2, r3
 8000d44:	2108      	movs	r1, #8
 8000d46:	4819      	ldr	r0, [pc, #100]	; (8000dac <display7SEG+0xd4>)
 8000d48:	f000 fdb2 	bl	80018b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, ((LED7_SEG[index] >> 4) & 0x01));
 8000d4c:	4a16      	ldr	r2, [pc, #88]	; (8000da8 <display7SEG+0xd0>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	091b      	lsrs	r3, r3, #4
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	461a      	mov	r2, r3
 8000d60:	2110      	movs	r1, #16
 8000d62:	4812      	ldr	r0, [pc, #72]	; (8000dac <display7SEG+0xd4>)
 8000d64:	f000 fda4 	bl	80018b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, ((LED7_SEG[index] >> 5) & 0x01));
 8000d68:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <display7SEG+0xd0>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	095b      	lsrs	r3, r3, #5
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	2120      	movs	r1, #32
 8000d7e:	480b      	ldr	r0, [pc, #44]	; (8000dac <display7SEG+0xd4>)
 8000d80:	f000 fd96 	bl	80018b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, ((LED7_SEG[index] >> 6) & 0x01));
 8000d84:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <display7SEG+0xd0>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	099b      	lsrs	r3, r3, #6
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	461a      	mov	r2, r3
 8000d98:	2140      	movs	r1, #64	; 0x40
 8000d9a:	4804      	ldr	r0, [pc, #16]	; (8000dac <display7SEG+0xd4>)
 8000d9c:	f000 fd88 	bl	80018b0 <HAL_GPIO_WritePin>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000024 	.word	0x20000024
 8000dac:	40010c00 	.word	0x40010c00

08000db0 <update7SEG>:

void update7SEG( int index ) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
    switch ( index ) {
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d83c      	bhi.n	8000e38 <update7SEG+0x88>
 8000dbe:	a201      	add	r2, pc, #4	; (adr r2, 8000dc4 <update7SEG+0x14>)
 8000dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc4:	08000dd5 	.word	0x08000dd5
 8000dc8:	08000ded 	.word	0x08000ded
 8000dcc:	08000e05 	.word	0x08000e05
 8000dd0:	08000e1f 	.word	0x08000e1f
        case 0:
            // Display the first 7 SEG with led_buffer [0]
        	HAL_GPIO_WritePin(GPIOA, EN0_Pin, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2140      	movs	r1, #64	; 0x40
 8000dd8:	481a      	ldr	r0, [pc, #104]	; (8000e44 <update7SEG+0x94>)
 8000dda:	f000 fd69 	bl	80018b0 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOA, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_SET);
 8000dde:	2201      	movs	r2, #1
 8000de0:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000de4:	4817      	ldr	r0, [pc, #92]	; (8000e44 <update7SEG+0x94>)
 8000de6:	f000 fd63 	bl	80018b0 <HAL_GPIO_WritePin>
            break ;
 8000dea:	e026      	b.n	8000e3a <update7SEG+0x8a>
        case 1:
            // Display the second 7 SEG with led_buffer [1]
        	HAL_GPIO_WritePin(GPIOA, EN1_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2180      	movs	r1, #128	; 0x80
 8000df0:	4814      	ldr	r0, [pc, #80]	; (8000e44 <update7SEG+0x94>)
 8000df2:	f000 fd5d 	bl	80018b0 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	f44f 7150 	mov.w	r1, #832	; 0x340
 8000dfc:	4811      	ldr	r0, [pc, #68]	; (8000e44 <update7SEG+0x94>)
 8000dfe:	f000 fd57 	bl	80018b0 <HAL_GPIO_WritePin>
            break ;
 8000e02:	e01a      	b.n	8000e3a <update7SEG+0x8a>
        case 2:
            // Display the third 7 SEG with led_buffer [2]
        	HAL_GPIO_WritePin(GPIOA, EN2_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e0a:	480e      	ldr	r0, [pc, #56]	; (8000e44 <update7SEG+0x94>)
 8000e0c:	f000 fd50 	bl	80018b0 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN3_Pin, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8000e16:	480b      	ldr	r0, [pc, #44]	; (8000e44 <update7SEG+0x94>)
 8000e18:	f000 fd4a 	bl	80018b0 <HAL_GPIO_WritePin>
            break ;
 8000e1c:	e00d      	b.n	8000e3a <update7SEG+0x8a>
        case 3:
            // Display the forth 7 SEG with led_buffer [3]
        	HAL_GPIO_WritePin(GPIOA, EN3_Pin, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <update7SEG+0x94>)
 8000e26:	f000 fd43 	bl	80018b0 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <update7SEG+0x94>)
 8000e32:	f000 fd3d 	bl	80018b0 <HAL_GPIO_WritePin>
            break ;
 8000e36:	e000      	b.n	8000e3a <update7SEG+0x8a>
        default :
            break ;
 8000e38:	bf00      	nop
    }
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40010800 	.word	0x40010800

08000e48 <updateClockBuffer>:

void updateClockBuffer() {
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
    led_buffer[0] = hour / 10;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <updateClockBuffer+0x70>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a1a      	ldr	r2, [pc, #104]	; (8000ebc <updateClockBuffer+0x74>)
 8000e52:	fb82 1203 	smull	r1, r2, r2, r3
 8000e56:	1092      	asrs	r2, r2, #2
 8000e58:	17db      	asrs	r3, r3, #31
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	4a18      	ldr	r2, [pc, #96]	; (8000ec0 <updateClockBuffer+0x78>)
 8000e5e:	6013      	str	r3, [r2, #0]
    led_buffer[1] = hour % 10;
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <updateClockBuffer+0x70>)
 8000e62:	6819      	ldr	r1, [r3, #0]
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <updateClockBuffer+0x74>)
 8000e66:	fb83 2301 	smull	r2, r3, r3, r1
 8000e6a:	109a      	asrs	r2, r3, #2
 8000e6c:	17cb      	asrs	r3, r1, #31
 8000e6e:	1ad2      	subs	r2, r2, r3
 8000e70:	4613      	mov	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	1aca      	subs	r2, r1, r3
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <updateClockBuffer+0x78>)
 8000e7c:	605a      	str	r2, [r3, #4]
    led_buffer[2] = minute / 10;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <updateClockBuffer+0x7c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <updateClockBuffer+0x74>)
 8000e84:	fb82 1203 	smull	r1, r2, r2, r3
 8000e88:	1092      	asrs	r2, r2, #2
 8000e8a:	17db      	asrs	r3, r3, #31
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <updateClockBuffer+0x78>)
 8000e90:	6093      	str	r3, [r2, #8]
    led_buffer[3] = minute % 10;
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <updateClockBuffer+0x7c>)
 8000e94:	6819      	ldr	r1, [r3, #0]
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <updateClockBuffer+0x74>)
 8000e98:	fb83 2301 	smull	r2, r3, r3, r1
 8000e9c:	109a      	asrs	r2, r3, #2
 8000e9e:	17cb      	asrs	r3, r1, #31
 8000ea0:	1ad2      	subs	r2, r2, r3
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	1aca      	subs	r2, r1, r3
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <updateClockBuffer+0x78>)
 8000eae:	60da      	str	r2, [r3, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	20000010 	.word	0x20000010
 8000ebc:	66666667 	.word	0x66666667
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000014 	.word	0x20000014

08000ec8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	timer_run();
 8000ed0:	f000 f920 	bl	8001114 <timer_run>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b090      	sub	sp, #64	; 0x40
 8000ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 0318 	add.w	r3, r7, #24
 8000ee6:	2228      	movs	r2, #40	; 0x28
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 fccc 	bl	8002888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f02:	2301      	movs	r3, #1
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f06:	2310      	movs	r3, #16
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0e:	f107 0318 	add.w	r3, r7, #24
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 fcfe 	bl	8001914 <HAL_RCC_OscConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f1e:	f000 f8bb 	bl	8001098 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f22:	230f      	movs	r3, #15
 8000f24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 ff6c 	bl	8001e18 <HAL_RCC_ClockConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f46:	f000 f8a7 	bl	8001098 <Error_Handler>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3740      	adds	r7, #64	; 0x40
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f7a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f88:	2209      	movs	r2, #9
 8000f8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f98:	4813      	ldr	r0, [pc, #76]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f9a:	f001 f899 	bl	80020d0 <HAL_TIM_Base_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fa4:	f000 f878 	bl	8001098 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000fb6:	f001 fa17 	bl	80023e8 <HAL_TIM_ConfigClockSource>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fc0:	f000 f86a 	bl	8001098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000fd2:	f001 fbef 	bl	80027b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fdc:	f000 f85c 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000058 	.word	0x20000058

08000fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <MX_GPIO_Init+0xa0>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a21      	ldr	r2, [pc, #132]	; (800108c <MX_GPIO_Init+0xa0>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b1f      	ldr	r3, [pc, #124]	; (800108c <MX_GPIO_Init+0xa0>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001018:	4b1c      	ldr	r3, [pc, #112]	; (800108c <MX_GPIO_Init+0xa0>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a1b      	ldr	r2, [pc, #108]	; (800108c <MX_GPIO_Init+0xa0>)
 800101e:	f043 0308 	orr.w	r3, r3, #8
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <MX_GPIO_Init+0xa0>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f003 0308 	and.w	r3, r3, #8
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8001030:	2200      	movs	r2, #0
 8001032:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8001036:	4816      	ldr	r0, [pc, #88]	; (8001090 <MX_GPIO_Init+0xa4>)
 8001038:	f000 fc3a 	bl	80018b0 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 800103c:	2200      	movs	r2, #0
 800103e:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8001042:	4814      	ldr	r0, [pc, #80]	; (8001094 <MX_GPIO_Init+0xa8>)
 8001044:	f000 fc34 	bl	80018b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8001048:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800104c:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2302      	movs	r3, #2
 8001058:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	4619      	mov	r1, r3
 8001060:	480b      	ldr	r0, [pc, #44]	; (8001090 <MX_GPIO_Init+0xa4>)
 8001062:	f000 faa9 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 8001066:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800106a:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2302      	movs	r3, #2
 8001076:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	4619      	mov	r1, r3
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_GPIO_Init+0xa8>)
 8001080:	f000 fa9a 	bl	80015b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001084:	bf00      	nop
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40021000 	.word	0x40021000
 8001090:	40010800 	.word	0x40010800
 8001094:	40010c00 	.word	0x40010c00

08001098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800109c:	b672      	cpsid	i
}
 800109e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <Error_Handler+0x8>
	...

080010a4 <setTimer0>:
int timer0_flag = 0;
int timer0_counter = 0;
int timer1_flag = 0;
int timer1_counter = 0;

void setTimer0(int duration) {
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    timer0_counter = duration / TIMER_CYCLE;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <setTimer0+0x2c>)
 80010b0:	fb82 1203 	smull	r1, r2, r2, r3
 80010b4:	1092      	asrs	r2, r2, #2
 80010b6:	17db      	asrs	r3, r3, #31
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <setTimer0+0x30>)
 80010bc:	6013      	str	r3, [r2, #0]
    timer0_flag = 0;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <setTimer0+0x34>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	66666667 	.word	0x66666667
 80010d4:	200000ac 	.word	0x200000ac
 80010d8:	200000a8 	.word	0x200000a8

080010dc <setTimer1>:

void setTimer1(int duration) {
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
    timer1_counter = duration / TIMER_CYCLE;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a08      	ldr	r2, [pc, #32]	; (8001108 <setTimer1+0x2c>)
 80010e8:	fb82 1203 	smull	r1, r2, r2, r3
 80010ec:	1092      	asrs	r2, r2, #2
 80010ee:	17db      	asrs	r3, r3, #31
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	4a06      	ldr	r2, [pc, #24]	; (800110c <setTimer1+0x30>)
 80010f4:	6013      	str	r3, [r2, #0]
    timer1_flag = 0;
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <setTimer1+0x34>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	66666667 	.word	0x66666667
 800110c:	200000b4 	.word	0x200000b4
 8001110:	200000b0 	.word	0x200000b0

08001114 <timer_run>:

void timer_run() {
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
    if (timer0_counter > 0) {
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <timer_run+0x4c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	dd0b      	ble.n	8001138 <timer_run+0x24>
        timer0_counter--;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <timer_run+0x4c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	3b01      	subs	r3, #1
 8001126:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <timer_run+0x4c>)
 8001128:	6013      	str	r3, [r2, #0]
        if (timer0_counter == 0) timer0_flag = 1;
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <timer_run+0x4c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <timer_run+0x24>
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <timer_run+0x50>)
 8001134:	2201      	movs	r2, #1
 8001136:	601a      	str	r2, [r3, #0]
    }
    if (timer1_counter > 0) {
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <timer_run+0x54>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	dd0b      	ble.n	8001158 <timer_run+0x44>
        timer1_counter--;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <timer_run+0x54>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	3b01      	subs	r3, #1
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <timer_run+0x54>)
 8001148:	6013      	str	r3, [r2, #0]
        if (timer1_counter == 0) timer1_flag = 1;
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <timer_run+0x54>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d102      	bne.n	8001158 <timer_run+0x44>
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <timer_run+0x58>)
 8001154:	2201      	movs	r2, #1
 8001156:	601a      	str	r2, [r3, #0]
    }
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	200000ac 	.word	0x200000ac
 8001164:	200000a8 	.word	0x200000a8
 8001168:	200000b4 	.word	0x200000b4
 800116c:	200000b0 	.word	0x200000b0

08001170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_MspInit+0x5c>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	4a14      	ldr	r2, [pc, #80]	; (80011cc <HAL_MspInit+0x5c>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6193      	str	r3, [r2, #24]
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_MspInit+0x5c>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_MspInit+0x5c>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_MspInit+0x5c>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001198:	61d3      	str	r3, [r2, #28]
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_MspInit+0x5c>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_MspInit+0x60>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <HAL_MspInit+0x60>)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c2:	bf00      	nop
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010000 	.word	0x40010000

080011d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e4:	d113      	bne.n	800120e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <HAL_TIM_Base_MspInit+0x44>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <HAL_TIM_Base_MspInit+0x44>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	61d3      	str	r3, [r2, #28]
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_TIM_Base_MspInit+0x44>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	201c      	movs	r0, #28
 8001204:	f000 f9a1 	bl	800154a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001208:	201c      	movs	r0, #28
 800120a:	f000 f9ba 	bl	8001582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001220:	e7fe      	b.n	8001220 <NMI_Handler+0x4>

08001222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <MemManage_Handler+0x4>

0800122e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>

0800123a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr

08001246 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr

08001252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr

0800125e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001262:	f000 f87f 	bl	8001364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <TIM2_IRQHandler+0x10>)
 8001272:	f000 ffc9 	bl	8002208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000058 	.word	0x20000058

08001280 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800128c:	f7ff fff8 	bl	8001280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001290:	480b      	ldr	r0, [pc, #44]	; (80012c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001292:	490c      	ldr	r1, [pc, #48]	; (80012c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001294:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a09      	ldr	r2, [pc, #36]	; (80012cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012a8:	4c09      	ldr	r4, [pc, #36]	; (80012d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b6:	f001 faef 	bl	8002898 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ba:	f7ff fc6d 	bl	8000b98 <main>
  bx lr
 80012be:	4770      	bx	lr
  ldr r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c4:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80012c8:	08002924 	.word	0x08002924
  ldr r2, =_sbss
 80012cc:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80012d0:	200000bc 	.word	0x200000bc

080012d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC1_2_IRQHandler>
	...

080012d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_Init+0x28>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_Init+0x28>)
 80012e2:	f043 0310 	orr.w	r3, r3, #16
 80012e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e8:	2003      	movs	r0, #3
 80012ea:	f000 f923 	bl	8001534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ee:	200f      	movs	r0, #15
 80012f0:	f000 f808 	bl	8001304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f4:	f7ff ff3c 	bl	8001170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40022000 	.word	0x40022000

08001304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x54>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_InitTick+0x58>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131a:	fbb3 f3f1 	udiv	r3, r3, r1
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f93b 	bl	800159e <HAL_SYSTICK_Config>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e00e      	b.n	8001350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b0f      	cmp	r3, #15
 8001336:	d80a      	bhi.n	800134e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f000 f903 	bl	800154a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001344:	4a06      	ldr	r2, [pc, #24]	; (8001360 <HAL_InitTick+0x5c>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	e000      	b.n	8001350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000030 	.word	0x20000030
 800135c:	20000038 	.word	0x20000038
 8001360:	20000034 	.word	0x20000034

08001364 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_IncTick+0x1c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_IncTick+0x20>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
 8001374:	4a03      	ldr	r2, [pc, #12]	; (8001384 <HAL_IncTick+0x20>)
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	20000038 	.word	0x20000038
 8001384:	200000b8 	.word	0x200000b8

08001388 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return uwTick;
 800138c:	4b02      	ldr	r3, [pc, #8]	; (8001398 <HAL_GetTick+0x10>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	200000b8 	.word	0x200000b8

0800139c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ce:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	60d3      	str	r3, [r2, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <__NVIC_GetPriorityGrouping+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f003 0307 	and.w	r3, r3, #7
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db0b      	blt.n	800142a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	f003 021f 	and.w	r2, r3, #31
 8001418:	4906      	ldr	r1, [pc, #24]	; (8001434 <__NVIC_EnableIRQ+0x34>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	2001      	movs	r0, #1
 8001422:	fa00 f202 	lsl.w	r2, r0, r2
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	e000e100 	.word	0xe000e100

08001438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	6039      	str	r1, [r7, #0]
 8001442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001448:	2b00      	cmp	r3, #0
 800144a:	db0a      	blt.n	8001462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	490c      	ldr	r1, [pc, #48]	; (8001484 <__NVIC_SetPriority+0x4c>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	0112      	lsls	r2, r2, #4
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	440b      	add	r3, r1
 800145c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001460:	e00a      	b.n	8001478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4908      	ldr	r1, [pc, #32]	; (8001488 <__NVIC_SetPriority+0x50>)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	3b04      	subs	r3, #4
 8001470:	0112      	lsls	r2, r2, #4
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	440b      	add	r3, r1
 8001476:	761a      	strb	r2, [r3, #24]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000e100 	.word	0xe000e100
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	; 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f1c3 0307 	rsb	r3, r3, #7
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	bf28      	it	cs
 80014aa:	2304      	movcs	r3, #4
 80014ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3304      	adds	r3, #4
 80014b2:	2b06      	cmp	r3, #6
 80014b4:	d902      	bls.n	80014bc <NVIC_EncodePriority+0x30>
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3b03      	subs	r3, #3
 80014ba:	e000      	b.n	80014be <NVIC_EncodePriority+0x32>
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43da      	mvns	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	401a      	ands	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	43d9      	mvns	r1, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	4313      	orrs	r3, r2
         );
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3724      	adds	r7, #36	; 0x24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001500:	d301      	bcc.n	8001506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001502:	2301      	movs	r3, #1
 8001504:	e00f      	b.n	8001526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <SysTick_Config+0x40>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150e:	210f      	movs	r1, #15
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f7ff ff90 	bl	8001438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <SysTick_Config+0x40>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151e:	4b04      	ldr	r3, [pc, #16]	; (8001530 <SysTick_Config+0x40>)
 8001520:	2207      	movs	r2, #7
 8001522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	e000e010 	.word	0xe000e010

08001534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff2d 	bl	800139c <__NVIC_SetPriorityGrouping>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800155c:	f7ff ff42 	bl	80013e4 <__NVIC_GetPriorityGrouping>
 8001560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	6978      	ldr	r0, [r7, #20]
 8001568:	f7ff ff90 	bl	800148c <NVIC_EncodePriority>
 800156c:	4602      	mov	r2, r0
 800156e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff5f 	bl	8001438 <__NVIC_SetPriority>
}
 800157a:	bf00      	nop
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff35 	bl	8001400 <__NVIC_EnableIRQ>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ffa2 	bl	80014f0 <SysTick_Config>
 80015ac:	4603      	mov	r3, r0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b08b      	sub	sp, #44	; 0x2c
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ca:	e161      	b.n	8001890 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015cc:	2201      	movs	r2, #1
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	f040 8150 	bne.w	800188a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4a97      	ldr	r2, [pc, #604]	; (800184c <HAL_GPIO_Init+0x294>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d05e      	beq.n	80016b2 <HAL_GPIO_Init+0xfa>
 80015f4:	4a95      	ldr	r2, [pc, #596]	; (800184c <HAL_GPIO_Init+0x294>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d875      	bhi.n	80016e6 <HAL_GPIO_Init+0x12e>
 80015fa:	4a95      	ldr	r2, [pc, #596]	; (8001850 <HAL_GPIO_Init+0x298>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d058      	beq.n	80016b2 <HAL_GPIO_Init+0xfa>
 8001600:	4a93      	ldr	r2, [pc, #588]	; (8001850 <HAL_GPIO_Init+0x298>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d86f      	bhi.n	80016e6 <HAL_GPIO_Init+0x12e>
 8001606:	4a93      	ldr	r2, [pc, #588]	; (8001854 <HAL_GPIO_Init+0x29c>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d052      	beq.n	80016b2 <HAL_GPIO_Init+0xfa>
 800160c:	4a91      	ldr	r2, [pc, #580]	; (8001854 <HAL_GPIO_Init+0x29c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d869      	bhi.n	80016e6 <HAL_GPIO_Init+0x12e>
 8001612:	4a91      	ldr	r2, [pc, #580]	; (8001858 <HAL_GPIO_Init+0x2a0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d04c      	beq.n	80016b2 <HAL_GPIO_Init+0xfa>
 8001618:	4a8f      	ldr	r2, [pc, #572]	; (8001858 <HAL_GPIO_Init+0x2a0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d863      	bhi.n	80016e6 <HAL_GPIO_Init+0x12e>
 800161e:	4a8f      	ldr	r2, [pc, #572]	; (800185c <HAL_GPIO_Init+0x2a4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d046      	beq.n	80016b2 <HAL_GPIO_Init+0xfa>
 8001624:	4a8d      	ldr	r2, [pc, #564]	; (800185c <HAL_GPIO_Init+0x2a4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d85d      	bhi.n	80016e6 <HAL_GPIO_Init+0x12e>
 800162a:	2b12      	cmp	r3, #18
 800162c:	d82a      	bhi.n	8001684 <HAL_GPIO_Init+0xcc>
 800162e:	2b12      	cmp	r3, #18
 8001630:	d859      	bhi.n	80016e6 <HAL_GPIO_Init+0x12e>
 8001632:	a201      	add	r2, pc, #4	; (adr r2, 8001638 <HAL_GPIO_Init+0x80>)
 8001634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001638:	080016b3 	.word	0x080016b3
 800163c:	0800168d 	.word	0x0800168d
 8001640:	0800169f 	.word	0x0800169f
 8001644:	080016e1 	.word	0x080016e1
 8001648:	080016e7 	.word	0x080016e7
 800164c:	080016e7 	.word	0x080016e7
 8001650:	080016e7 	.word	0x080016e7
 8001654:	080016e7 	.word	0x080016e7
 8001658:	080016e7 	.word	0x080016e7
 800165c:	080016e7 	.word	0x080016e7
 8001660:	080016e7 	.word	0x080016e7
 8001664:	080016e7 	.word	0x080016e7
 8001668:	080016e7 	.word	0x080016e7
 800166c:	080016e7 	.word	0x080016e7
 8001670:	080016e7 	.word	0x080016e7
 8001674:	080016e7 	.word	0x080016e7
 8001678:	080016e7 	.word	0x080016e7
 800167c:	08001695 	.word	0x08001695
 8001680:	080016a9 	.word	0x080016a9
 8001684:	4a76      	ldr	r2, [pc, #472]	; (8001860 <HAL_GPIO_Init+0x2a8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d013      	beq.n	80016b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800168a:	e02c      	b.n	80016e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	623b      	str	r3, [r7, #32]
          break;
 8001692:	e029      	b.n	80016e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	3304      	adds	r3, #4
 800169a:	623b      	str	r3, [r7, #32]
          break;
 800169c:	e024      	b.n	80016e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	3308      	adds	r3, #8
 80016a4:	623b      	str	r3, [r7, #32]
          break;
 80016a6:	e01f      	b.n	80016e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	330c      	adds	r3, #12
 80016ae:	623b      	str	r3, [r7, #32]
          break;
 80016b0:	e01a      	b.n	80016e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d102      	bne.n	80016c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ba:	2304      	movs	r3, #4
 80016bc:	623b      	str	r3, [r7, #32]
          break;
 80016be:	e013      	b.n	80016e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d105      	bne.n	80016d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c8:	2308      	movs	r3, #8
 80016ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69fa      	ldr	r2, [r7, #28]
 80016d0:	611a      	str	r2, [r3, #16]
          break;
 80016d2:	e009      	b.n	80016e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d4:	2308      	movs	r3, #8
 80016d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69fa      	ldr	r2, [r7, #28]
 80016dc:	615a      	str	r2, [r3, #20]
          break;
 80016de:	e003      	b.n	80016e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
          break;
 80016e4:	e000      	b.n	80016e8 <HAL_GPIO_Init+0x130>
          break;
 80016e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	2bff      	cmp	r3, #255	; 0xff
 80016ec:	d801      	bhi.n	80016f2 <HAL_GPIO_Init+0x13a>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	e001      	b.n	80016f6 <HAL_GPIO_Init+0x13e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3304      	adds	r3, #4
 80016f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2bff      	cmp	r3, #255	; 0xff
 80016fc:	d802      	bhi.n	8001704 <HAL_GPIO_Init+0x14c>
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	e002      	b.n	800170a <HAL_GPIO_Init+0x152>
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	3b08      	subs	r3, #8
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	210f      	movs	r1, #15
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	fa01 f303 	lsl.w	r3, r1, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	401a      	ands	r2, r3
 800171c:	6a39      	ldr	r1, [r7, #32]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	fa01 f303 	lsl.w	r3, r1, r3
 8001724:	431a      	orrs	r2, r3
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 80a9 	beq.w	800188a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001738:	4b4a      	ldr	r3, [pc, #296]	; (8001864 <HAL_GPIO_Init+0x2ac>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a49      	ldr	r2, [pc, #292]	; (8001864 <HAL_GPIO_Init+0x2ac>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	4b47      	ldr	r3, [pc, #284]	; (8001864 <HAL_GPIO_Init+0x2ac>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001750:	4a45      	ldr	r2, [pc, #276]	; (8001868 <HAL_GPIO_Init+0x2b0>)
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	089b      	lsrs	r3, r3, #2
 8001756:	3302      	adds	r3, #2
 8001758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	220f      	movs	r2, #15
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	4013      	ands	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a3d      	ldr	r2, [pc, #244]	; (800186c <HAL_GPIO_Init+0x2b4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d00d      	beq.n	8001798 <HAL_GPIO_Init+0x1e0>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a3c      	ldr	r2, [pc, #240]	; (8001870 <HAL_GPIO_Init+0x2b8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d007      	beq.n	8001794 <HAL_GPIO_Init+0x1dc>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a3b      	ldr	r2, [pc, #236]	; (8001874 <HAL_GPIO_Init+0x2bc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d101      	bne.n	8001790 <HAL_GPIO_Init+0x1d8>
 800178c:	2302      	movs	r3, #2
 800178e:	e004      	b.n	800179a <HAL_GPIO_Init+0x1e2>
 8001790:	2303      	movs	r3, #3
 8001792:	e002      	b.n	800179a <HAL_GPIO_Init+0x1e2>
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <HAL_GPIO_Init+0x1e2>
 8001798:	2300      	movs	r3, #0
 800179a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800179c:	f002 0203 	and.w	r2, r2, #3
 80017a0:	0092      	lsls	r2, r2, #2
 80017a2:	4093      	lsls	r3, r2
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017aa:	492f      	ldr	r1, [pc, #188]	; (8001868 <HAL_GPIO_Init+0x2b0>)
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	3302      	adds	r3, #2
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d006      	beq.n	80017d2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017c4:	4b2c      	ldr	r3, [pc, #176]	; (8001878 <HAL_GPIO_Init+0x2c0>)
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	492b      	ldr	r1, [pc, #172]	; (8001878 <HAL_GPIO_Init+0x2c0>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017d2:	4b29      	ldr	r3, [pc, #164]	; (8001878 <HAL_GPIO_Init+0x2c0>)
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	43db      	mvns	r3, r3
 80017da:	4927      	ldr	r1, [pc, #156]	; (8001878 <HAL_GPIO_Init+0x2c0>)
 80017dc:	4013      	ands	r3, r2
 80017de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d006      	beq.n	80017fa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017ec:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_GPIO_Init+0x2c0>)
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	4921      	ldr	r1, [pc, #132]	; (8001878 <HAL_GPIO_Init+0x2c0>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	60cb      	str	r3, [r1, #12]
 80017f8:	e006      	b.n	8001808 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017fa:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <HAL_GPIO_Init+0x2c0>)
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	43db      	mvns	r3, r3
 8001802:	491d      	ldr	r1, [pc, #116]	; (8001878 <HAL_GPIO_Init+0x2c0>)
 8001804:	4013      	ands	r3, r2
 8001806:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001814:	4b18      	ldr	r3, [pc, #96]	; (8001878 <HAL_GPIO_Init+0x2c0>)
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	4917      	ldr	r1, [pc, #92]	; (8001878 <HAL_GPIO_Init+0x2c0>)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
 8001820:	e006      	b.n	8001830 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <HAL_GPIO_Init+0x2c0>)
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	43db      	mvns	r3, r3
 800182a:	4913      	ldr	r1, [pc, #76]	; (8001878 <HAL_GPIO_Init+0x2c0>)
 800182c:	4013      	ands	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d01f      	beq.n	800187c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800183c:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <HAL_GPIO_Init+0x2c0>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	490d      	ldr	r1, [pc, #52]	; (8001878 <HAL_GPIO_Init+0x2c0>)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	600b      	str	r3, [r1, #0]
 8001848:	e01f      	b.n	800188a <HAL_GPIO_Init+0x2d2>
 800184a:	bf00      	nop
 800184c:	10320000 	.word	0x10320000
 8001850:	10310000 	.word	0x10310000
 8001854:	10220000 	.word	0x10220000
 8001858:	10210000 	.word	0x10210000
 800185c:	10120000 	.word	0x10120000
 8001860:	10110000 	.word	0x10110000
 8001864:	40021000 	.word	0x40021000
 8001868:	40010000 	.word	0x40010000
 800186c:	40010800 	.word	0x40010800
 8001870:	40010c00 	.word	0x40010c00
 8001874:	40011000 	.word	0x40011000
 8001878:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_GPIO_Init+0x2f4>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	43db      	mvns	r3, r3
 8001884:	4909      	ldr	r1, [pc, #36]	; (80018ac <HAL_GPIO_Init+0x2f4>)
 8001886:	4013      	ands	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	3301      	adds	r3, #1
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	fa22 f303 	lsr.w	r3, r2, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	f47f ae96 	bne.w	80015cc <HAL_GPIO_Init+0x14>
  }
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	372c      	adds	r7, #44	; 0x2c
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	40010400 	.word	0x40010400

080018b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	807b      	strh	r3, [r7, #2]
 80018bc:	4613      	mov	r3, r2
 80018be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018c0:	787b      	ldrb	r3, [r7, #1]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018c6:	887a      	ldrh	r2, [r7, #2]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018cc:	e003      	b.n	80018d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018ce:	887b      	ldrh	r3, [r7, #2]
 80018d0:	041a      	lsls	r2, r3, #16
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	611a      	str	r2, [r3, #16]
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018f2:	887a      	ldrh	r2, [r7, #2]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4013      	ands	r3, r2
 80018f8:	041a      	lsls	r2, r3, #16
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	43d9      	mvns	r1, r3
 80018fe:	887b      	ldrh	r3, [r7, #2]
 8001900:	400b      	ands	r3, r1
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	611a      	str	r2, [r3, #16]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
	...

08001914 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e272      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 8087 	beq.w	8001a42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001934:	4b92      	ldr	r3, [pc, #584]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b04      	cmp	r3, #4
 800193e:	d00c      	beq.n	800195a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001940:	4b8f      	ldr	r3, [pc, #572]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d112      	bne.n	8001972 <HAL_RCC_OscConfig+0x5e>
 800194c:	4b8c      	ldr	r3, [pc, #560]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001958:	d10b      	bne.n	8001972 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195a:	4b89      	ldr	r3, [pc, #548]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d06c      	beq.n	8001a40 <HAL_RCC_OscConfig+0x12c>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d168      	bne.n	8001a40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e24c      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197a:	d106      	bne.n	800198a <HAL_RCC_OscConfig+0x76>
 800197c:	4b80      	ldr	r3, [pc, #512]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a7f      	ldr	r2, [pc, #508]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	e02e      	b.n	80019e8 <HAL_RCC_OscConfig+0xd4>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x98>
 8001992:	4b7b      	ldr	r3, [pc, #492]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a7a      	ldr	r2, [pc, #488]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b78      	ldr	r3, [pc, #480]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a77      	ldr	r2, [pc, #476]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e01d      	b.n	80019e8 <HAL_RCC_OscConfig+0xd4>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0xbc>
 80019b6:	4b72      	ldr	r3, [pc, #456]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a71      	ldr	r2, [pc, #452]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b6f      	ldr	r3, [pc, #444]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a6e      	ldr	r2, [pc, #440]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0xd4>
 80019d0:	4b6b      	ldr	r3, [pc, #428]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a6a      	ldr	r2, [pc, #424]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b68      	ldr	r3, [pc, #416]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a67      	ldr	r2, [pc, #412]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d013      	beq.n	8001a18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fcca 	bl	8001388 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff fcc6 	bl	8001388 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e200      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	4b5d      	ldr	r3, [pc, #372]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0xe4>
 8001a16:	e014      	b.n	8001a42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff fcb6 	bl	8001388 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff fcb2 	bl	8001388 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e1ec      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	4b53      	ldr	r3, [pc, #332]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x10c>
 8001a3e:	e000      	b.n	8001a42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d063      	beq.n	8001b16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a4e:	4b4c      	ldr	r3, [pc, #304]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a5a:	4b49      	ldr	r3, [pc, #292]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d11c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x18c>
 8001a66:	4b46      	ldr	r3, [pc, #280]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d116      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a72:	4b43      	ldr	r3, [pc, #268]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d005      	beq.n	8001a8a <HAL_RCC_OscConfig+0x176>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e1c0      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8a:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4939      	ldr	r1, [pc, #228]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9e:	e03a      	b.n	8001b16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d020      	beq.n	8001aea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa8:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aae:	f7ff fc6b 	bl	8001388 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab6:	f7ff fc67 	bl	8001388 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e1a1      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4927      	ldr	r1, [pc, #156]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	600b      	str	r3, [r1, #0]
 8001ae8:	e015      	b.n	8001b16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aea:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff fc4a 	bl	8001388 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af8:	f7ff fc46 	bl	8001388 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e180      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d03a      	beq.n	8001b98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d019      	beq.n	8001b5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b30:	f7ff fc2a 	bl	8001388 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b38:	f7ff fc26 	bl	8001388 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e160      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b56:	2001      	movs	r0, #1
 8001b58:	f000 fa9c 	bl	8002094 <RCC_Delay>
 8001b5c:	e01c      	b.n	8001b98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_RCC_OscConfig+0x274>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b64:	f7ff fc10 	bl	8001388 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6a:	e00f      	b.n	8001b8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fc0c 	bl	8001388 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d908      	bls.n	8001b8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e146      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	42420000 	.word	0x42420000
 8001b88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8c:	4b92      	ldr	r3, [pc, #584]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1e9      	bne.n	8001b6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80a6 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001baa:	4b8b      	ldr	r3, [pc, #556]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10d      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	4b88      	ldr	r3, [pc, #544]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	4a87      	ldr	r2, [pc, #540]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	61d3      	str	r3, [r2, #28]
 8001bc2:	4b85      	ldr	r3, [pc, #532]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd2:	4b82      	ldr	r3, [pc, #520]	; (8001ddc <HAL_RCC_OscConfig+0x4c8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d118      	bne.n	8001c10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bde:	4b7f      	ldr	r3, [pc, #508]	; (8001ddc <HAL_RCC_OscConfig+0x4c8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a7e      	ldr	r2, [pc, #504]	; (8001ddc <HAL_RCC_OscConfig+0x4c8>)
 8001be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bea:	f7ff fbcd 	bl	8001388 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf2:	f7ff fbc9 	bl	8001388 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b64      	cmp	r3, #100	; 0x64
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e103      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c04:	4b75      	ldr	r3, [pc, #468]	; (8001ddc <HAL_RCC_OscConfig+0x4c8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d106      	bne.n	8001c26 <HAL_RCC_OscConfig+0x312>
 8001c18:	4b6f      	ldr	r3, [pc, #444]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4a6e      	ldr	r2, [pc, #440]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6213      	str	r3, [r2, #32]
 8001c24:	e02d      	b.n	8001c82 <HAL_RCC_OscConfig+0x36e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x334>
 8001c2e:	4b6a      	ldr	r3, [pc, #424]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	4a69      	ldr	r2, [pc, #420]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	6213      	str	r3, [r2, #32]
 8001c3a:	4b67      	ldr	r3, [pc, #412]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	4a66      	ldr	r2, [pc, #408]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	f023 0304 	bic.w	r3, r3, #4
 8001c44:	6213      	str	r3, [r2, #32]
 8001c46:	e01c      	b.n	8001c82 <HAL_RCC_OscConfig+0x36e>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2b05      	cmp	r3, #5
 8001c4e:	d10c      	bne.n	8001c6a <HAL_RCC_OscConfig+0x356>
 8001c50:	4b61      	ldr	r3, [pc, #388]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4a60      	ldr	r2, [pc, #384]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c56:	f043 0304 	orr.w	r3, r3, #4
 8001c5a:	6213      	str	r3, [r2, #32]
 8001c5c:	4b5e      	ldr	r3, [pc, #376]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	4a5d      	ldr	r2, [pc, #372]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6213      	str	r3, [r2, #32]
 8001c68:	e00b      	b.n	8001c82 <HAL_RCC_OscConfig+0x36e>
 8001c6a:	4b5b      	ldr	r3, [pc, #364]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	4a5a      	ldr	r2, [pc, #360]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	6213      	str	r3, [r2, #32]
 8001c76:	4b58      	ldr	r3, [pc, #352]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4a57      	ldr	r2, [pc, #348]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	f023 0304 	bic.w	r3, r3, #4
 8001c80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d015      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff fb7d 	bl	8001388 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c90:	e00a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c92:	f7ff fb79 	bl	8001388 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e0b1      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca8:	4b4b      	ldr	r3, [pc, #300]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0ee      	beq.n	8001c92 <HAL_RCC_OscConfig+0x37e>
 8001cb4:	e014      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff fb67 	bl	8001388 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cbc:	e00a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cbe:	f7ff fb63 	bl	8001388 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e09b      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd4:	4b40      	ldr	r3, [pc, #256]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1ee      	bne.n	8001cbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d105      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce6:	4b3c      	ldr	r3, [pc, #240]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	4a3b      	ldr	r2, [pc, #236]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 8087 	beq.w	8001e0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cfc:	4b36      	ldr	r3, [pc, #216]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d061      	beq.n	8001dcc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d146      	bne.n	8001d9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d10:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7ff fb37 	bl	8001388 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7ff fb33 	bl	8001388 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e06d      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d30:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f0      	bne.n	8001d1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d44:	d108      	bne.n	8001d58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d46:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	4921      	ldr	r1, [pc, #132]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d58:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a19      	ldr	r1, [r3, #32]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	491b      	ldr	r1, [pc, #108]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d70:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d76:	f7ff fb07 	bl	8001388 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7ff fb03 	bl	8001388 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e03d      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x46a>
 8001d9c:	e035      	b.n	8001e0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff faf0 	bl	8001388 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dac:	f7ff faec 	bl	8001388 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e026      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x498>
 8001dca:	e01e      	b.n	8001e0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d107      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e019      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40007000 	.word	0x40007000
 8001de0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_RCC_OscConfig+0x500>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d106      	bne.n	8001e06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d001      	beq.n	8001e0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000

08001e18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0d0      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e2c:	4b6a      	ldr	r3, [pc, #424]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d910      	bls.n	8001e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3a:	4b67      	ldr	r3, [pc, #412]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 0207 	bic.w	r2, r3, #7
 8001e42:	4965      	ldr	r1, [pc, #404]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4a:	4b63      	ldr	r3, [pc, #396]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0b8      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d020      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e74:	4b59      	ldr	r3, [pc, #356]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4a58      	ldr	r2, [pc, #352]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e8c:	4b53      	ldr	r3, [pc, #332]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	4a52      	ldr	r2, [pc, #328]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e98:	4b50      	ldr	r3, [pc, #320]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	494d      	ldr	r1, [pc, #308]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d040      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d107      	bne.n	8001ece <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d115      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e07f      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d107      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed6:	4b41      	ldr	r3, [pc, #260]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d109      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e073      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee6:	4b3d      	ldr	r3, [pc, #244]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e06b      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ef6:	4b39      	ldr	r3, [pc, #228]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f023 0203 	bic.w	r2, r3, #3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4936      	ldr	r1, [pc, #216]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f08:	f7ff fa3e 	bl	8001388 <HAL_GetTick>
 8001f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f10:	f7ff fa3a 	bl	8001388 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e053      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f26:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 020c 	and.w	r2, r3, #12
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d1eb      	bne.n	8001f10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f38:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d210      	bcs.n	8001f68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f46:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 0207 	bic.w	r2, r3, #7
 8001f4e:	4922      	ldr	r1, [pc, #136]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b20      	ldr	r3, [pc, #128]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e032      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f74:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4916      	ldr	r1, [pc, #88]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d009      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f92:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	490e      	ldr	r1, [pc, #56]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fa6:	f000 f821 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 8001faa:	4602      	mov	r2, r0
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	490a      	ldr	r1, [pc, #40]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb8:	5ccb      	ldrb	r3, [r1, r3]
 8001fba:	fa22 f303 	lsr.w	r3, r2, r3
 8001fbe:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <HAL_RCC_ClockConfig+0x1cc>)
 8001fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <HAL_RCC_ClockConfig+0x1d0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff f99c 	bl	8001304 <HAL_InitTick>

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	080028f8 	.word	0x080028f8
 8001fe4:	20000030 	.word	0x20000030
 8001fe8:	20000034 	.word	0x20000034

08001fec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	2300      	movs	r3, #0
 8002000:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002006:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <HAL_RCC_GetSysClockFreq+0x94>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b04      	cmp	r3, #4
 8002014:	d002      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0x30>
 8002016:	2b08      	cmp	r3, #8
 8002018:	d003      	beq.n	8002022 <HAL_RCC_GetSysClockFreq+0x36>
 800201a:	e027      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_RCC_GetSysClockFreq+0x98>)
 800201e:	613b      	str	r3, [r7, #16]
      break;
 8002020:	e027      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	0c9b      	lsrs	r3, r3, #18
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	4a17      	ldr	r2, [pc, #92]	; (8002088 <HAL_RCC_GetSysClockFreq+0x9c>)
 800202c:	5cd3      	ldrb	r3, [r2, r3]
 800202e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d010      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800203a:	4b11      	ldr	r3, [pc, #68]	; (8002080 <HAL_RCC_GetSysClockFreq+0x94>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	0c5b      	lsrs	r3, r3, #17
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	4a11      	ldr	r2, [pc, #68]	; (800208c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002046:	5cd3      	ldrb	r3, [r2, r3]
 8002048:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a0d      	ldr	r2, [pc, #52]	; (8002084 <HAL_RCC_GetSysClockFreq+0x98>)
 800204e:	fb03 f202 	mul.w	r2, r3, r2
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	fbb2 f3f3 	udiv	r3, r2, r3
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	e004      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a0c      	ldr	r2, [pc, #48]	; (8002090 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002060:	fb02 f303 	mul.w	r3, r2, r3
 8002064:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	613b      	str	r3, [r7, #16]
      break;
 800206a:	e002      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_RCC_GetSysClockFreq+0x98>)
 800206e:	613b      	str	r3, [r7, #16]
      break;
 8002070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002072:	693b      	ldr	r3, [r7, #16]
}
 8002074:	4618      	mov	r0, r3
 8002076:	371c      	adds	r7, #28
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	007a1200 	.word	0x007a1200
 8002088:	08002908 	.word	0x08002908
 800208c:	08002918 	.word	0x08002918
 8002090:	003d0900 	.word	0x003d0900

08002094 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800209c:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <RCC_Delay+0x34>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <RCC_Delay+0x38>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	0a5b      	lsrs	r3, r3, #9
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020b0:	bf00      	nop
  }
  while (Delay --);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1e5a      	subs	r2, r3, #1
 80020b6:	60fa      	str	r2, [r7, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f9      	bne.n	80020b0 <RCC_Delay+0x1c>
}
 80020bc:	bf00      	nop
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	20000030 	.word	0x20000030
 80020cc:	10624dd3 	.word	0x10624dd3

080020d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e041      	b.n	8002166 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d106      	bne.n	80020fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff f86c 	bl	80011d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3304      	adds	r3, #4
 800210c:	4619      	mov	r1, r3
 800210e:	4610      	mov	r0, r2
 8002110:	f000 fa56 	bl	80025c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b01      	cmp	r3, #1
 8002182:	d001      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e035      	b.n	80021f4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a16      	ldr	r2, [pc, #88]	; (8002200 <HAL_TIM_Base_Start_IT+0x90>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d009      	beq.n	80021be <HAL_TIM_Base_Start_IT+0x4e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b2:	d004      	beq.n	80021be <HAL_TIM_Base_Start_IT+0x4e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a12      	ldr	r2, [pc, #72]	; (8002204 <HAL_TIM_Base_Start_IT+0x94>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d111      	bne.n	80021e2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b06      	cmp	r3, #6
 80021ce:	d010      	beq.n	80021f2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021e0:	e007      	b.n	80021f2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 0201 	orr.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40012c00 	.word	0x40012c00
 8002204:	40000400 	.word	0x40000400

08002208 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d020      	beq.n	800226c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01b      	beq.n	800226c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0202 	mvn.w	r2, #2
 800223c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f998 	bl	8002588 <HAL_TIM_IC_CaptureCallback>
 8002258:	e005      	b.n	8002266 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f98b 	bl	8002576 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f99a 	bl	800259a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d020      	beq.n	80022b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01b      	beq.n	80022b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0204 	mvn.w	r2, #4
 8002288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2202      	movs	r2, #2
 800228e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f972 	bl	8002588 <HAL_TIM_IC_CaptureCallback>
 80022a4:	e005      	b.n	80022b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f965 	bl	8002576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f974 	bl	800259a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d020      	beq.n	8002304 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d01b      	beq.n	8002304 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0208 	mvn.w	r2, #8
 80022d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2204      	movs	r2, #4
 80022da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f94c 	bl	8002588 <HAL_TIM_IC_CaptureCallback>
 80022f0:	e005      	b.n	80022fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f93f 	bl	8002576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f94e 	bl	800259a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b00      	cmp	r3, #0
 800230c:	d020      	beq.n	8002350 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b00      	cmp	r3, #0
 8002316:	d01b      	beq.n	8002350 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0210 	mvn.w	r2, #16
 8002320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2208      	movs	r2, #8
 8002326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f926 	bl	8002588 <HAL_TIM_IC_CaptureCallback>
 800233c:	e005      	b.n	800234a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f919 	bl	8002576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f928 	bl	800259a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00c      	beq.n	8002374 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d007      	beq.n	8002374 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0201 	mvn.w	r2, #1
 800236c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe fdaa 	bl	8000ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00c      	beq.n	8002398 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fa6f 	bl	8002876 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00c      	beq.n	80023bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f8f8 	bl	80025ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00c      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0220 	mvn.w	r2, #32
 80023d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 fa42 	bl	8002864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023e0:	bf00      	nop
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_TIM_ConfigClockSource+0x1c>
 8002400:	2302      	movs	r3, #2
 8002402:	e0b4      	b.n	800256e <HAL_TIM_ConfigClockSource+0x186>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800242a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800243c:	d03e      	beq.n	80024bc <HAL_TIM_ConfigClockSource+0xd4>
 800243e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002442:	f200 8087 	bhi.w	8002554 <HAL_TIM_ConfigClockSource+0x16c>
 8002446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244a:	f000 8086 	beq.w	800255a <HAL_TIM_ConfigClockSource+0x172>
 800244e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002452:	d87f      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x16c>
 8002454:	2b70      	cmp	r3, #112	; 0x70
 8002456:	d01a      	beq.n	800248e <HAL_TIM_ConfigClockSource+0xa6>
 8002458:	2b70      	cmp	r3, #112	; 0x70
 800245a:	d87b      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x16c>
 800245c:	2b60      	cmp	r3, #96	; 0x60
 800245e:	d050      	beq.n	8002502 <HAL_TIM_ConfigClockSource+0x11a>
 8002460:	2b60      	cmp	r3, #96	; 0x60
 8002462:	d877      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x16c>
 8002464:	2b50      	cmp	r3, #80	; 0x50
 8002466:	d03c      	beq.n	80024e2 <HAL_TIM_ConfigClockSource+0xfa>
 8002468:	2b50      	cmp	r3, #80	; 0x50
 800246a:	d873      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x16c>
 800246c:	2b40      	cmp	r3, #64	; 0x40
 800246e:	d058      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0x13a>
 8002470:	2b40      	cmp	r3, #64	; 0x40
 8002472:	d86f      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x16c>
 8002474:	2b30      	cmp	r3, #48	; 0x30
 8002476:	d064      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x15a>
 8002478:	2b30      	cmp	r3, #48	; 0x30
 800247a:	d86b      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x16c>
 800247c:	2b20      	cmp	r3, #32
 800247e:	d060      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x15a>
 8002480:	2b20      	cmp	r3, #32
 8002482:	d867      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x16c>
 8002484:	2b00      	cmp	r3, #0
 8002486:	d05c      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x15a>
 8002488:	2b10      	cmp	r3, #16
 800248a:	d05a      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x15a>
 800248c:	e062      	b.n	8002554 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800249e:	f000 f96a 	bl	8002776 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	609a      	str	r2, [r3, #8]
      break;
 80024ba:	e04f      	b.n	800255c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024cc:	f000 f953 	bl	8002776 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024de:	609a      	str	r2, [r3, #8]
      break;
 80024e0:	e03c      	b.n	800255c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ee:	461a      	mov	r2, r3
 80024f0:	f000 f8ca 	bl	8002688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2150      	movs	r1, #80	; 0x50
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f921 	bl	8002742 <TIM_ITRx_SetConfig>
      break;
 8002500:	e02c      	b.n	800255c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800250e:	461a      	mov	r2, r3
 8002510:	f000 f8e8 	bl	80026e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2160      	movs	r1, #96	; 0x60
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f911 	bl	8002742 <TIM_ITRx_SetConfig>
      break;
 8002520:	e01c      	b.n	800255c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800252e:	461a      	mov	r2, r3
 8002530:	f000 f8aa 	bl	8002688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2140      	movs	r1, #64	; 0x40
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f901 	bl	8002742 <TIM_ITRx_SetConfig>
      break;
 8002540:	e00c      	b.n	800255c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4619      	mov	r1, r3
 800254c:	4610      	mov	r0, r2
 800254e:	f000 f8f8 	bl	8002742 <TIM_ITRx_SetConfig>
      break;
 8002552:	e003      	b.n	800255c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
      break;
 8002558:	e000      	b.n	800255c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800255a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800256c:	7bfb      	ldrb	r3, [r7, #15]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr

0800259a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
	...

080025c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a2b      	ldr	r2, [pc, #172]	; (8002680 <TIM_Base_SetConfig+0xc0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d007      	beq.n	80025e8 <TIM_Base_SetConfig+0x28>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025de:	d003      	beq.n	80025e8 <TIM_Base_SetConfig+0x28>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a28      	ldr	r2, [pc, #160]	; (8002684 <TIM_Base_SetConfig+0xc4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d108      	bne.n	80025fa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a20      	ldr	r2, [pc, #128]	; (8002680 <TIM_Base_SetConfig+0xc0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d007      	beq.n	8002612 <TIM_Base_SetConfig+0x52>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002608:	d003      	beq.n	8002612 <TIM_Base_SetConfig+0x52>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a1d      	ldr	r2, [pc, #116]	; (8002684 <TIM_Base_SetConfig+0xc4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d108      	bne.n	8002624 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4313      	orrs	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a0d      	ldr	r2, [pc, #52]	; (8002680 <TIM_Base_SetConfig+0xc0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d103      	bne.n	8002658 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f023 0201 	bic.w	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	611a      	str	r2, [r3, #16]
  }
}
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	40012c00 	.word	0x40012c00
 8002684:	40000400 	.word	0x40000400

08002688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	f023 0201 	bic.w	r2, r3, #1
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f023 030a 	bic.w	r3, r3, #10
 80026c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	621a      	str	r2, [r3, #32]
}
 80026da:	bf00      	nop
 80026dc:	371c      	adds	r7, #28
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	f023 0210 	bic.w	r2, r3, #16
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800270e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	031b      	lsls	r3, r3, #12
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002720:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	621a      	str	r2, [r3, #32]
}
 8002738:	bf00      	nop
 800273a:	371c      	adds	r7, #28
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002742:	b480      	push	{r7}
 8002744:	b085      	sub	sp, #20
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002758:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	f043 0307 	orr.w	r3, r3, #7
 8002764:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	609a      	str	r2, [r3, #8]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002776:	b480      	push	{r7}
 8002778:	b087      	sub	sp, #28
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002790:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	021a      	lsls	r2, r3, #8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	431a      	orrs	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	4313      	orrs	r3, r2
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	609a      	str	r2, [r3, #8]
}
 80027aa:	bf00      	nop
 80027ac:	371c      	adds	r7, #28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e041      	b.n	8002850 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a14      	ldr	r2, [pc, #80]	; (800285c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d009      	beq.n	8002824 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002818:	d004      	beq.n	8002824 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a10      	ldr	r2, [pc, #64]	; (8002860 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d10c      	bne.n	800283e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800282a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	4313      	orrs	r3, r2
 8002834:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40012c00 	.word	0x40012c00
 8002860:	40000400 	.word	0x40000400

08002864 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <memset>:
 8002888:	4603      	mov	r3, r0
 800288a:	4402      	add	r2, r0
 800288c:	4293      	cmp	r3, r2
 800288e:	d100      	bne.n	8002892 <memset+0xa>
 8002890:	4770      	bx	lr
 8002892:	f803 1b01 	strb.w	r1, [r3], #1
 8002896:	e7f9      	b.n	800288c <memset+0x4>

08002898 <__libc_init_array>:
 8002898:	b570      	push	{r4, r5, r6, lr}
 800289a:	2600      	movs	r6, #0
 800289c:	4d0c      	ldr	r5, [pc, #48]	; (80028d0 <__libc_init_array+0x38>)
 800289e:	4c0d      	ldr	r4, [pc, #52]	; (80028d4 <__libc_init_array+0x3c>)
 80028a0:	1b64      	subs	r4, r4, r5
 80028a2:	10a4      	asrs	r4, r4, #2
 80028a4:	42a6      	cmp	r6, r4
 80028a6:	d109      	bne.n	80028bc <__libc_init_array+0x24>
 80028a8:	f000 f81a 	bl	80028e0 <_init>
 80028ac:	2600      	movs	r6, #0
 80028ae:	4d0a      	ldr	r5, [pc, #40]	; (80028d8 <__libc_init_array+0x40>)
 80028b0:	4c0a      	ldr	r4, [pc, #40]	; (80028dc <__libc_init_array+0x44>)
 80028b2:	1b64      	subs	r4, r4, r5
 80028b4:	10a4      	asrs	r4, r4, #2
 80028b6:	42a6      	cmp	r6, r4
 80028b8:	d105      	bne.n	80028c6 <__libc_init_array+0x2e>
 80028ba:	bd70      	pop	{r4, r5, r6, pc}
 80028bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80028c0:	4798      	blx	r3
 80028c2:	3601      	adds	r6, #1
 80028c4:	e7ee      	b.n	80028a4 <__libc_init_array+0xc>
 80028c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ca:	4798      	blx	r3
 80028cc:	3601      	adds	r6, #1
 80028ce:	e7f2      	b.n	80028b6 <__libc_init_array+0x1e>
 80028d0:	0800291c 	.word	0x0800291c
 80028d4:	0800291c 	.word	0x0800291c
 80028d8:	0800291c 	.word	0x0800291c
 80028dc:	08002920 	.word	0x08002920

080028e0 <_init>:
 80028e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e2:	bf00      	nop
 80028e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028e6:	bc08      	pop	{r3}
 80028e8:	469e      	mov	lr, r3
 80028ea:	4770      	bx	lr

080028ec <_fini>:
 80028ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ee:	bf00      	nop
 80028f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028f2:	bc08      	pop	{r3}
 80028f4:	469e      	mov	lr, r3
 80028f6:	4770      	bx	lr
