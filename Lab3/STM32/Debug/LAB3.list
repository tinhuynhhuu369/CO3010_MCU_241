
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002768  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002874  08002874  00012874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002898  08002898  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08002898  08002898  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002898  08002898  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002898  08002898  00012898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800289c  0800289c  0001289c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  080028a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000048  080028e8  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  080028e8  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008716  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bf6  00000000  00000000  000287ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa0  00000000  00000000  0002a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000080e  00000000  00000000  0002ae60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017244  00000000  00000000  0002b66e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d1be  00000000  00000000  000428b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000826d4  00000000  00000000  0004fa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000295c  00000000  00000000  000d2144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d4aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	0800285c 	.word	0x0800285c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	0800285c 	.word	0x0800285c

0800014c <display7SEG_Mode>:
#include "7seg.h"

static uint8_t LED7_SEG[10] = { 0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8,
		0x80, 0x90 };

void display7SEG_Mode(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, ((LED7_SEG[num] >> 0) & 0x01));
 8000154:	4a35      	ldr	r2, [pc, #212]	; (800022c <display7SEG_Mode+0xe0>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	4413      	add	r3, r2
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	b2db      	uxtb	r3, r3
 8000162:	461a      	mov	r2, r3
 8000164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000168:	4831      	ldr	r0, [pc, #196]	; (8000230 <display7SEG_Mode+0xe4>)
 800016a:	f001 fb60 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, ((LED7_SEG[num] >> 1) & 0x01));
 800016e:	4a2f      	ldr	r2, [pc, #188]	; (800022c <display7SEG_Mode+0xe0>)
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	4413      	add	r3, r2
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	085b      	lsrs	r3, r3, #1
 8000178:	b2db      	uxtb	r3, r3
 800017a:	f003 0301 	and.w	r3, r3, #1
 800017e:	b2db      	uxtb	r3, r3
 8000180:	461a      	mov	r2, r3
 8000182:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000186:	482a      	ldr	r0, [pc, #168]	; (8000230 <display7SEG_Mode+0xe4>)
 8000188:	f001 fb51 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, ((LED7_SEG[num] >> 2) & 0x01));
 800018c:	4a27      	ldr	r2, [pc, #156]	; (800022c <display7SEG_Mode+0xe0>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4413      	add	r3, r2
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	089b      	lsrs	r3, r3, #2
 8000196:	b2db      	uxtb	r3, r3
 8000198:	f003 0301 	and.w	r3, r3, #1
 800019c:	b2db      	uxtb	r3, r3
 800019e:	461a      	mov	r2, r3
 80001a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001a4:	4822      	ldr	r0, [pc, #136]	; (8000230 <display7SEG_Mode+0xe4>)
 80001a6:	f001 fb42 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, ((LED7_SEG[num] >> 3) & 0x01));
 80001aa:	4a20      	ldr	r2, [pc, #128]	; (800022c <display7SEG_Mode+0xe0>)
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	4413      	add	r3, r2
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	08db      	lsrs	r3, r3, #3
 80001b4:	b2db      	uxtb	r3, r3
 80001b6:	f003 0301 	and.w	r3, r3, #1
 80001ba:	b2db      	uxtb	r3, r3
 80001bc:	461a      	mov	r2, r3
 80001be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001c2:	481b      	ldr	r0, [pc, #108]	; (8000230 <display7SEG_Mode+0xe4>)
 80001c4:	f001 fb33 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, ((LED7_SEG[num] >> 4) & 0x01));
 80001c8:	4a18      	ldr	r2, [pc, #96]	; (800022c <display7SEG_Mode+0xe0>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	4413      	add	r3, r2
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	091b      	lsrs	r3, r3, #4
 80001d2:	b2db      	uxtb	r3, r3
 80001d4:	f003 0301 	and.w	r3, r3, #1
 80001d8:	b2db      	uxtb	r3, r3
 80001da:	461a      	mov	r2, r3
 80001dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e0:	4813      	ldr	r0, [pc, #76]	; (8000230 <display7SEG_Mode+0xe4>)
 80001e2:	f001 fb24 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, ((LED7_SEG[num] >> 5) & 0x01));
 80001e6:	4a11      	ldr	r2, [pc, #68]	; (800022c <display7SEG_Mode+0xe0>)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4413      	add	r3, r2
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	095b      	lsrs	r3, r3, #5
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	f003 0301 	and.w	r3, r3, #1
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	461a      	mov	r2, r3
 80001fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001fe:	480c      	ldr	r0, [pc, #48]	; (8000230 <display7SEG_Mode+0xe4>)
 8000200:	f001 fb15 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, ((LED7_SEG[num] >> 6) & 0x01));
 8000204:	4a09      	ldr	r2, [pc, #36]	; (800022c <display7SEG_Mode+0xe0>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4413      	add	r3, r2
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	099b      	lsrs	r3, r3, #6
 800020e:	b2db      	uxtb	r3, r3
 8000210:	f003 0301 	and.w	r3, r3, #1
 8000214:	b2db      	uxtb	r3, r3
 8000216:	461a      	mov	r2, r3
 8000218:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800021c:	4804      	ldr	r0, [pc, #16]	; (8000230 <display7SEG_Mode+0xe4>)
 800021e:	f001 fb06 	bl	800182e <HAL_GPIO_WritePin>
}
 8000222:	bf00      	nop
 8000224:	3708      	adds	r7, #8
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	20000000 	.word	0x20000000
 8000230:	40010800 	.word	0x40010800

08000234 <display7SEG_Value>:

void display7SEG_Value(int num) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ((LED7_SEG[num] >> 0) & 0x01));
 800023c:	4a32      	ldr	r2, [pc, #200]	; (8000308 <display7SEG_Value+0xd4>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4413      	add	r3, r2
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	f003 0301 	and.w	r3, r3, #1
 8000248:	b2db      	uxtb	r3, r3
 800024a:	461a      	mov	r2, r3
 800024c:	2108      	movs	r1, #8
 800024e:	482f      	ldr	r0, [pc, #188]	; (800030c <display7SEG_Value+0xd8>)
 8000250:	f001 faed 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, ((LED7_SEG[num] >> 1) & 0x01));
 8000254:	4a2c      	ldr	r2, [pc, #176]	; (8000308 <display7SEG_Value+0xd4>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	4413      	add	r3, r2
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	085b      	lsrs	r3, r3, #1
 800025e:	b2db      	uxtb	r3, r3
 8000260:	f003 0301 	and.w	r3, r3, #1
 8000264:	b2db      	uxtb	r3, r3
 8000266:	461a      	mov	r2, r3
 8000268:	2110      	movs	r1, #16
 800026a:	4828      	ldr	r0, [pc, #160]	; (800030c <display7SEG_Value+0xd8>)
 800026c:	f001 fadf 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, ((LED7_SEG[num] >> 2) & 0x01));
 8000270:	4a25      	ldr	r2, [pc, #148]	; (8000308 <display7SEG_Value+0xd4>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4413      	add	r3, r2
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	089b      	lsrs	r3, r3, #2
 800027a:	b2db      	uxtb	r3, r3
 800027c:	f003 0301 	and.w	r3, r3, #1
 8000280:	b2db      	uxtb	r3, r3
 8000282:	461a      	mov	r2, r3
 8000284:	2120      	movs	r1, #32
 8000286:	4821      	ldr	r0, [pc, #132]	; (800030c <display7SEG_Value+0xd8>)
 8000288:	f001 fad1 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, ((LED7_SEG[num] >> 3) & 0x01));
 800028c:	4a1e      	ldr	r2, [pc, #120]	; (8000308 <display7SEG_Value+0xd4>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4413      	add	r3, r2
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	08db      	lsrs	r3, r3, #3
 8000296:	b2db      	uxtb	r3, r3
 8000298:	f003 0301 	and.w	r3, r3, #1
 800029c:	b2db      	uxtb	r3, r3
 800029e:	461a      	mov	r2, r3
 80002a0:	2140      	movs	r1, #64	; 0x40
 80002a2:	481a      	ldr	r0, [pc, #104]	; (800030c <display7SEG_Value+0xd8>)
 80002a4:	f001 fac3 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, ((LED7_SEG[num] >> 4) & 0x01));
 80002a8:	4a17      	ldr	r2, [pc, #92]	; (8000308 <display7SEG_Value+0xd4>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4413      	add	r3, r2
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	091b      	lsrs	r3, r3, #4
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	f003 0301 	and.w	r3, r3, #1
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	461a      	mov	r2, r3
 80002bc:	2180      	movs	r1, #128	; 0x80
 80002be:	4813      	ldr	r0, [pc, #76]	; (800030c <display7SEG_Value+0xd8>)
 80002c0:	f001 fab5 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, ((LED7_SEG[num] >> 5) & 0x01));
 80002c4:	4a10      	ldr	r2, [pc, #64]	; (8000308 <display7SEG_Value+0xd4>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4413      	add	r3, r2
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	095b      	lsrs	r3, r3, #5
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	461a      	mov	r2, r3
 80002d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002dc:	480b      	ldr	r0, [pc, #44]	; (800030c <display7SEG_Value+0xd8>)
 80002de:	f001 faa6 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, ((LED7_SEG[num] >> 6) & 0x01));
 80002e2:	4a09      	ldr	r2, [pc, #36]	; (8000308 <display7SEG_Value+0xd4>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4413      	add	r3, r2
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	099b      	lsrs	r3, r3, #6
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	461a      	mov	r2, r3
 80002f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002fa:	4804      	ldr	r0, [pc, #16]	; (800030c <display7SEG_Value+0xd8>)
 80002fc:	f001 fa97 	bl	800182e <HAL_GPIO_WritePin>
}
 8000300:	bf00      	nop
 8000302:	3708      	adds	r7, #8
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20000000 	.word	0x20000000
 800030c:	40010c00 	.word	0x40010c00

08000310 <update7SEG>:

void update7SEG(int position, int mode_data, int value_data) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
	switch (position) {
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d003      	beq.n	800032a <update7SEG+0x1a>
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d02f      	beq.n	8000388 <update7SEG+0x78>
			HAL_GPIO_WritePin(EN_VAL_0_GPIO_Port, EN_VAL_0_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(EN_VAL_1_GPIO_Port, EN_VAL_1_Pin, GPIO_PIN_RESET);
			display7SEG_Value(valueData % 10);
			break;
		default:
			break;
 8000328:	e067      	b.n	80003fa <update7SEG+0xea>
			HAL_GPIO_WritePin(EN_MODE_0_GPIO_Port, EN_MODE_0_Pin, GPIO_PIN_RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000330:	4834      	ldr	r0, [pc, #208]	; (8000404 <update7SEG+0xf4>)
 8000332:	f001 fa7c 	bl	800182e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_MODE_1_GPIO_Port, EN_MODE_1_Pin, GPIO_PIN_SET);
 8000336:	2201      	movs	r2, #1
 8000338:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800033c:	4831      	ldr	r0, [pc, #196]	; (8000404 <update7SEG+0xf4>)
 800033e:	f001 fa76 	bl	800182e <HAL_GPIO_WritePin>
			display7SEG_Mode(modeData / 10);
 8000342:	4b31      	ldr	r3, [pc, #196]	; (8000408 <update7SEG+0xf8>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a31      	ldr	r2, [pc, #196]	; (800040c <update7SEG+0xfc>)
 8000348:	fb82 1203 	smull	r1, r2, r2, r3
 800034c:	1092      	asrs	r2, r2, #2
 800034e:	17db      	asrs	r3, r3, #31
 8000350:	1ad3      	subs	r3, r2, r3
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff fefa 	bl	800014c <display7SEG_Mode>
			HAL_GPIO_WritePin(EN_VAL_0_GPIO_Port, EN_VAL_0_Pin, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800035e:	4829      	ldr	r0, [pc, #164]	; (8000404 <update7SEG+0xf4>)
 8000360:	f001 fa65 	bl	800182e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_VAL_1_GPIO_Port, EN_VAL_1_Pin, GPIO_PIN_SET);
 8000364:	2201      	movs	r2, #1
 8000366:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800036a:	4826      	ldr	r0, [pc, #152]	; (8000404 <update7SEG+0xf4>)
 800036c:	f001 fa5f 	bl	800182e <HAL_GPIO_WritePin>
			display7SEG_Value(valueData / 10);
 8000370:	4b27      	ldr	r3, [pc, #156]	; (8000410 <update7SEG+0x100>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a25      	ldr	r2, [pc, #148]	; (800040c <update7SEG+0xfc>)
 8000376:	fb82 1203 	smull	r1, r2, r2, r3
 800037a:	1092      	asrs	r2, r2, #2
 800037c:	17db      	asrs	r3, r3, #31
 800037e:	1ad3      	subs	r3, r2, r3
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ff57 	bl	8000234 <display7SEG_Value>
			break;
 8000386:	e038      	b.n	80003fa <update7SEG+0xea>
			HAL_GPIO_WritePin(EN_MODE_0_GPIO_Port, EN_MODE_0_Pin, GPIO_PIN_SET);
 8000388:	2201      	movs	r2, #1
 800038a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800038e:	481d      	ldr	r0, [pc, #116]	; (8000404 <update7SEG+0xf4>)
 8000390:	f001 fa4d 	bl	800182e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_MODE_1_GPIO_Port, EN_MODE_1_Pin, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800039a:	481a      	ldr	r0, [pc, #104]	; (8000404 <update7SEG+0xf4>)
 800039c:	f001 fa47 	bl	800182e <HAL_GPIO_WritePin>
			display7SEG_Mode(modeData % 10);
 80003a0:	4b19      	ldr	r3, [pc, #100]	; (8000408 <update7SEG+0xf8>)
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	4b19      	ldr	r3, [pc, #100]	; (800040c <update7SEG+0xfc>)
 80003a6:	fb83 1302 	smull	r1, r3, r3, r2
 80003aa:	1099      	asrs	r1, r3, #2
 80003ac:	17d3      	asrs	r3, r2, #31
 80003ae:	1ac9      	subs	r1, r1, r3
 80003b0:	460b      	mov	r3, r1
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	440b      	add	r3, r1
 80003b6:	005b      	lsls	r3, r3, #1
 80003b8:	1ad1      	subs	r1, r2, r3
 80003ba:	4608      	mov	r0, r1
 80003bc:	f7ff fec6 	bl	800014c <display7SEG_Mode>
			HAL_GPIO_WritePin(EN_VAL_0_GPIO_Port, EN_VAL_0_Pin, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003c6:	480f      	ldr	r0, [pc, #60]	; (8000404 <update7SEG+0xf4>)
 80003c8:	f001 fa31 	bl	800182e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_VAL_1_GPIO_Port, EN_VAL_1_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d2:	480c      	ldr	r0, [pc, #48]	; (8000404 <update7SEG+0xf4>)
 80003d4:	f001 fa2b 	bl	800182e <HAL_GPIO_WritePin>
			display7SEG_Value(valueData % 10);
 80003d8:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <update7SEG+0x100>)
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	4b0b      	ldr	r3, [pc, #44]	; (800040c <update7SEG+0xfc>)
 80003de:	fb83 1302 	smull	r1, r3, r3, r2
 80003e2:	1099      	asrs	r1, r3, #2
 80003e4:	17d3      	asrs	r3, r2, #31
 80003e6:	1ac9      	subs	r1, r1, r3
 80003e8:	460b      	mov	r3, r1
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	440b      	add	r3, r1
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	1ad1      	subs	r1, r2, r3
 80003f2:	4608      	mov	r0, r1
 80003f4:	f7ff ff1e 	bl	8000234 <display7SEG_Value>
			break;
 80003f8:	bf00      	nop
	}
}
 80003fa:	bf00      	nop
 80003fc:	3710      	adds	r7, #16
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40010c00 	.word	0x40010c00
 8000408:	200000a4 	.word	0x200000a4
 800040c:	66666667 	.word	0x66666667
 8000410:	200000a8 	.word	0x200000a8

08000414 <isButtonPressed>:
	HAL_GPIO_WritePin(BUTTON_1_GPIO_Port, BUTTON_1_Pin, NORMAL_STATE);
	HAL_GPIO_WritePin(BUTTON_2_GPIO_Port, BUTTON_2_Pin, NORMAL_STATE);
	HAL_GPIO_WritePin(BUTTON_3_GPIO_Port, BUTTON_3_Pin, NORMAL_STATE);
}

int isButtonPressed(int index) {
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 800041c:	4a09      	ldr	r2, [pc, #36]	; (8000444 <isButtonPressed+0x30>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000424:	2b01      	cmp	r3, #1
 8000426:	d106      	bne.n	8000436 <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000428:	4a06      	ldr	r2, [pc, #24]	; (8000444 <isButtonPressed+0x30>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2100      	movs	r1, #0
 800042e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000432:	2301      	movs	r3, #1
 8000434:	e000      	b.n	8000438 <isButtonPressed+0x24>
	}
	return 0;
 8000436:	2300      	movs	r3, #0
}
 8000438:	4618      	mov	r0, r3
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	20000064 	.word	0x20000064

08000448 <subKeyProcess>:

void subKeyProcess(int index) {
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000450:	4a04      	ldr	r2, [pc, #16]	; (8000464 <subKeyProcess+0x1c>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	2101      	movs	r1, #1
 8000456:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	20000064 	.word	0x20000064

08000468 <getKeyInput>:

void getKeyInput() {
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 800046e:	2300      	movs	r3, #0
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	e084      	b.n	800057e <getKeyInput+0x116>
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 8000474:	4a46      	ldr	r2, [pc, #280]	; (8000590 <getKeyInput+0x128>)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800047c:	4945      	ldr	r1, [pc, #276]	; (8000594 <getKeyInput+0x12c>)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		debounceButtonBuffer2[i] = buttonBuffer[i];
 8000484:	4a44      	ldr	r2, [pc, #272]	; (8000598 <getKeyInput+0x130>)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800048c:	4940      	ldr	r1, [pc, #256]	; (8000590 <getKeyInput+0x128>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//Read signal from user
		if (i == 0) {
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d10a      	bne.n	80004b0 <getKeyInput+0x48>
			buttonBuffer[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,
 800049a:	2101      	movs	r1, #1
 800049c:	483f      	ldr	r0, [pc, #252]	; (800059c <getKeyInput+0x134>)
 800049e:	f001 f9af 	bl	8001800 <HAL_GPIO_ReadPin>
 80004a2:	4603      	mov	r3, r0
 80004a4:	4619      	mov	r1, r3
 80004a6:	4a3c      	ldr	r2, [pc, #240]	; (8000598 <getKeyInput+0x130>)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80004ae:	e01a      	b.n	80004e6 <getKeyInput+0x7e>
			BUTTON_1_Pin);
		} else if (i == 1) {
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d10a      	bne.n	80004cc <getKeyInput+0x64>
			buttonBuffer[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port,
 80004b6:	2102      	movs	r1, #2
 80004b8:	4838      	ldr	r0, [pc, #224]	; (800059c <getKeyInput+0x134>)
 80004ba:	f001 f9a1 	bl	8001800 <HAL_GPIO_ReadPin>
 80004be:	4603      	mov	r3, r0
 80004c0:	4619      	mov	r1, r3
 80004c2:	4a35      	ldr	r2, [pc, #212]	; (8000598 <getKeyInput+0x130>)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80004ca:	e00c      	b.n	80004e6 <getKeyInput+0x7e>
			BUTTON_2_Pin);
		} else if (i == 2) {
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d109      	bne.n	80004e6 <getKeyInput+0x7e>
			buttonBuffer[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port,
 80004d2:	2104      	movs	r1, #4
 80004d4:	4831      	ldr	r0, [pc, #196]	; (800059c <getKeyInput+0x134>)
 80004d6:	f001 f993 	bl	8001800 <HAL_GPIO_ReadPin>
 80004da:	4603      	mov	r3, r0
 80004dc:	4619      	mov	r1, r3
 80004de:	4a2e      	ldr	r2, [pc, #184]	; (8000598 <getKeyInput+0x130>)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			BUTTON_3_Pin);
		}
		//debouncing step
		if ((debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 80004e6:	4a2b      	ldr	r2, [pc, #172]	; (8000594 <getKeyInput+0x12c>)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004ee:	4928      	ldr	r1, [pc, #160]	; (8000590 <getKeyInput+0x128>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	d13e      	bne.n	8000578 <getKeyInput+0x110>
				&& (debounceButtonBuffer2[i] == buttonBuffer[i])) {
 80004fa:	4a25      	ldr	r2, [pc, #148]	; (8000590 <getKeyInput+0x128>)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000502:	4925      	ldr	r1, [pc, #148]	; (8000598 <getKeyInput+0x130>)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800050a:	429a      	cmp	r2, r3
 800050c:	d134      	bne.n	8000578 <getKeyInput+0x110>
			if (buttonBuffer[i] != longPressButtonBuffer[i]) {
 800050e:	4a22      	ldr	r2, [pc, #136]	; (8000598 <getKeyInput+0x130>)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000516:	4922      	ldr	r1, [pc, #136]	; (80005a0 <getKeyInput+0x138>)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800051e:	429a      	cmp	r2, r3
 8000520:	d016      	beq.n	8000550 <getKeyInput+0xe8>
				longPressButtonBuffer[i] = buttonBuffer[i];
 8000522:	4a1d      	ldr	r2, [pc, #116]	; (8000598 <getKeyInput+0x130>)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800052a:	491d      	ldr	r1, [pc, #116]	; (80005a0 <getKeyInput+0x138>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//when pressed, do subKeyProcess()
				if (buttonBuffer[i] == PRESSED_STATE) {
 8000532:	4a19      	ldr	r2, [pc, #100]	; (8000598 <getKeyInput+0x130>)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d11c      	bne.n	8000578 <getKeyInput+0x110>
					TimeOutForKeyPress[i] = TIME_OUT_FOR_KEY_PRESS;
 800053e:	4a19      	ldr	r2, [pc, #100]	; (80005a4 <getKeyInput+0x13c>)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	21c8      	movs	r1, #200	; 0xc8
 8000544:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f7ff ff7d 	bl	8000448 <subKeyProcess>
 800054e:	e013      	b.n	8000578 <getKeyInput+0x110>
				}
			}

			else {
				TimeOutForKeyPress[i]--;
 8000550:	4a14      	ldr	r2, [pc, #80]	; (80005a4 <getKeyInput+0x13c>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000558:	1e5a      	subs	r2, r3, #1
 800055a:	4912      	ldr	r1, [pc, #72]	; (80005a4 <getKeyInput+0x13c>)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0) {
 8000562:	4a10      	ldr	r2, [pc, #64]	; (80005a4 <getKeyInput+0x13c>)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d104      	bne.n	8000578 <getKeyInput+0x110>
					longPressButtonBuffer[i] = NORMAL_STATE;
 800056e:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <getKeyInput+0x138>)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2101      	movs	r1, #1
 8000574:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3301      	adds	r3, #1
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2b02      	cmp	r3, #2
 8000582:	f77f af77 	ble.w	8000474 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000586:	bf00      	nop
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000024 	.word	0x20000024
 8000594:	20000018 	.word	0x20000018
 8000598:	2000000c 	.word	0x2000000c
 800059c:	40010c00 	.word	0x40010c00
 80005a0:	20000030 	.word	0x20000030
 80005a4:	20000070 	.word	0x20000070

080005a8 <fsm_automatic>:
int tempValYellow;
int flag_Yellow;
int tempValGreen;
int flag_Green;

void fsm_automatic() {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	switch (mode) {
 80005ac:	4b8f      	ldr	r3, [pc, #572]	; (80007ec <fsm_automatic+0x244>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b04      	cmp	r3, #4
 80005b2:	f200 81a7 	bhi.w	8000904 <fsm_automatic+0x35c>
 80005b6:	a201      	add	r2, pc, #4	; (adr r2, 80005bc <fsm_automatic+0x14>)
 80005b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005bc:	080005d1 	.word	0x080005d1
 80005c0:	08000631 	.word	0x08000631
 80005c4:	0800069b 	.word	0x0800069b
 80005c8:	08000743 	.word	0x08000743
 80005cc:	08000825 	.word	0x08000825
		case INIT:
			update7SEG(positon_7seg, modeData, valueData);
 80005d0:	4b87      	ldr	r3, [pc, #540]	; (80007f0 <fsm_automatic+0x248>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a87      	ldr	r2, [pc, #540]	; (80007f4 <fsm_automatic+0x24c>)
 80005d6:	6811      	ldr	r1, [r2, #0]
 80005d8:	4a87      	ldr	r2, [pc, #540]	; (80007f8 <fsm_automatic+0x250>)
 80005da:	6812      	ldr	r2, [r2, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff fe97 	bl	8000310 <update7SEG>
			setTimer0(500);
 80005e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e6:	f000 fc55 	bl	8000e94 <setTimer0>
			tempValRed = redTime;
 80005ea:	4b84      	ldr	r3, [pc, #528]	; (80007fc <fsm_automatic+0x254>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a84      	ldr	r2, [pc, #528]	; (8000800 <fsm_automatic+0x258>)
 80005f0:	6013      	str	r3, [r2, #0]
			tempValYellow = yellowTime;
 80005f2:	4b84      	ldr	r3, [pc, #528]	; (8000804 <fsm_automatic+0x25c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a84      	ldr	r2, [pc, #528]	; (8000808 <fsm_automatic+0x260>)
 80005f8:	6013      	str	r3, [r2, #0]
			tempValGreen = greenTime;
 80005fa:	4b84      	ldr	r3, [pc, #528]	; (800080c <fsm_automatic+0x264>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a84      	ldr	r2, [pc, #528]	; (8000810 <fsm_automatic+0x268>)
 8000600:	6013      	str	r3, [r2, #0]
			flag_Red = 0;
 8000602:	4b84      	ldr	r3, [pc, #528]	; (8000814 <fsm_automatic+0x26c>)
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
			flag_Yellow = 0;
 8000608:	4b83      	ldr	r3, [pc, #524]	; (8000818 <fsm_automatic+0x270>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
			flag_Green = 0;
 800060e:	4b83      	ldr	r3, [pc, #524]	; (800081c <fsm_automatic+0x274>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
			mode = MODE1;
 8000614:	4b75      	ldr	r3, [pc, #468]	; (80007ec <fsm_automatic+0x244>)
 8000616:	2201      	movs	r2, #1
 8000618:	601a      	str	r2, [r3, #0]
			positon_7seg = (positon_7seg + 1) % 2;
 800061a:	4b75      	ldr	r3, [pc, #468]	; (80007f0 <fsm_automatic+0x248>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3301      	adds	r3, #1
 8000620:	2b00      	cmp	r3, #0
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	bfb8      	it	lt
 8000628:	425b      	neglt	r3, r3
 800062a:	4a71      	ldr	r2, [pc, #452]	; (80007f0 <fsm_automatic+0x248>)
 800062c:	6013      	str	r3, [r2, #0]
			break;
 800062e:	e172      	b.n	8000916 <fsm_automatic+0x36e>
		case MODE1:
			fsm_manual();
 8000630:	f000 f992 	bl	8000958 <fsm_manual>
			if(timer0_flag == 1) {
 8000634:	4b7a      	ldr	r3, [pc, #488]	; (8000820 <fsm_automatic+0x278>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d116      	bne.n	800066a <fsm_automatic+0xc2>
				update7SEG(positon_7seg, modeData, valueData);
 800063c:	4b6c      	ldr	r3, [pc, #432]	; (80007f0 <fsm_automatic+0x248>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a6c      	ldr	r2, [pc, #432]	; (80007f4 <fsm_automatic+0x24c>)
 8000642:	6811      	ldr	r1, [r2, #0]
 8000644:	4a6c      	ldr	r2, [pc, #432]	; (80007f8 <fsm_automatic+0x250>)
 8000646:	6812      	ldr	r2, [r2, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff fe61 	bl	8000310 <update7SEG>
				positon_7seg = (positon_7seg + 1) % 2;
 800064e:	4b68      	ldr	r3, [pc, #416]	; (80007f0 <fsm_automatic+0x248>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	3301      	adds	r3, #1
 8000654:	2b00      	cmp	r3, #0
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	bfb8      	it	lt
 800065c:	425b      	neglt	r3, r3
 800065e:	4a64      	ldr	r2, [pc, #400]	; (80007f0 <fsm_automatic+0x248>)
 8000660:	6013      	str	r3, [r2, #0]
				setTimer0(500);
 8000662:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000666:	f000 fc15 	bl	8000e94 <setTimer0>
			}

			if(isButtonPressed(BUTTON_1_PRESS) == 1) {
 800066a:	2000      	movs	r0, #0
 800066c:	f7ff fed2 	bl	8000414 <isButtonPressed>
 8000670:	4603      	mov	r3, r0
 8000672:	2b01      	cmp	r3, #1
 8000674:	f040 8148 	bne.w	8000908 <fsm_automatic+0x360>
				modeData = MODE2;
 8000678:	4b5e      	ldr	r3, [pc, #376]	; (80007f4 <fsm_automatic+0x24c>)
 800067a:	2202      	movs	r2, #2
 800067c:	601a      	str	r2, [r3, #0]
				valueData = tempValRed;
 800067e:	4b60      	ldr	r3, [pc, #384]	; (8000800 <fsm_automatic+0x258>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a5d      	ldr	r2, [pc, #372]	; (80007f8 <fsm_automatic+0x250>)
 8000684:	6013      	str	r3, [r2, #0]
				mode = MODE2;
 8000686:	4b59      	ldr	r3, [pc, #356]	; (80007ec <fsm_automatic+0x244>)
 8000688:	2202      	movs	r2, #2
 800068a:	601a      	str	r2, [r3, #0]
				clearAll();
 800068c:	f000 fc98 	bl	8000fc0 <clearAll>
				setTimer0(500);
 8000690:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000694:	f000 fbfe 	bl	8000e94 <setTimer0>
			}
			break;
 8000698:	e136      	b.n	8000908 <fsm_automatic+0x360>
		case MODE2:
			if(timer0_flag == 1) {
 800069a:	4b61      	ldr	r3, [pc, #388]	; (8000820 <fsm_automatic+0x278>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d118      	bne.n	80006d4 <fsm_automatic+0x12c>
				update7SEG(positon_7seg, modeData, valueData);
 80006a2:	4b53      	ldr	r3, [pc, #332]	; (80007f0 <fsm_automatic+0x248>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a53      	ldr	r2, [pc, #332]	; (80007f4 <fsm_automatic+0x24c>)
 80006a8:	6811      	ldr	r1, [r2, #0]
 80006aa:	4a53      	ldr	r2, [pc, #332]	; (80007f8 <fsm_automatic+0x250>)
 80006ac:	6812      	ldr	r2, [r2, #0]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fe2e 	bl	8000310 <update7SEG>
				positon_7seg = (positon_7seg + 1) % 2;
 80006b4:	4b4e      	ldr	r3, [pc, #312]	; (80007f0 <fsm_automatic+0x248>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	3301      	adds	r3, #1
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	bfb8      	it	lt
 80006c2:	425b      	neglt	r3, r3
 80006c4:	4a4a      	ldr	r2, [pc, #296]	; (80007f0 <fsm_automatic+0x248>)
 80006c6:	6013      	str	r3, [r2, #0]
				blinkRed();
 80006c8:	f000 fd22 	bl	8001110 <blinkRed>
				setTimer0(500);
 80006cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d0:	f000 fbe0 	bl	8000e94 <setTimer0>
			}
			if (isButtonPressed(BUTTON_1_PRESS) == 1) {
 80006d4:	2000      	movs	r0, #0
 80006d6:	f7ff fe9d 	bl	8000414 <isButtonPressed>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d10f      	bne.n	8000700 <fsm_automatic+0x158>
				modeData = MODE3;
 80006e0:	4b44      	ldr	r3, [pc, #272]	; (80007f4 <fsm_automatic+0x24c>)
 80006e2:	2203      	movs	r2, #3
 80006e4:	601a      	str	r2, [r3, #0]
				valueData = tempValYellow;
 80006e6:	4b48      	ldr	r3, [pc, #288]	; (8000808 <fsm_automatic+0x260>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a43      	ldr	r2, [pc, #268]	; (80007f8 <fsm_automatic+0x250>)
 80006ec:	6013      	str	r3, [r2, #0]
				mode = MODE3;
 80006ee:	4b3f      	ldr	r3, [pc, #252]	; (80007ec <fsm_automatic+0x244>)
 80006f0:	2203      	movs	r2, #3
 80006f2:	601a      	str	r2, [r3, #0]
				clearAll();
 80006f4:	f000 fc64 	bl	8000fc0 <clearAll>
				setTimer2(500);
 80006f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006fc:	f000 fc02 	bl	8000f04 <setTimer2>
			}
			if (isButtonPressed(BUTTON_2_PRESS) == 1) {
 8000700:	2001      	movs	r0, #1
 8000702:	f7ff fe87 	bl	8000414 <isButtonPressed>
 8000706:	4603      	mov	r3, r0
 8000708:	2b01      	cmp	r3, #1
 800070a:	d10f      	bne.n	800072c <fsm_automatic+0x184>
				if (tempValRed > 99) {
 800070c:	4b3c      	ldr	r3, [pc, #240]	; (8000800 <fsm_automatic+0x258>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b63      	cmp	r3, #99	; 0x63
 8000712:	dd02      	ble.n	800071a <fsm_automatic+0x172>
					tempValRed = 1;
 8000714:	4b3a      	ldr	r3, [pc, #232]	; (8000800 <fsm_automatic+0x258>)
 8000716:	2201      	movs	r2, #1
 8000718:	601a      	str	r2, [r3, #0]
				}
				tempValRed++;
 800071a:	4b39      	ldr	r3, [pc, #228]	; (8000800 <fsm_automatic+0x258>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	3301      	adds	r3, #1
 8000720:	4a37      	ldr	r2, [pc, #220]	; (8000800 <fsm_automatic+0x258>)
 8000722:	6013      	str	r3, [r2, #0]
				valueData = tempValRed;
 8000724:	4b36      	ldr	r3, [pc, #216]	; (8000800 <fsm_automatic+0x258>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a33      	ldr	r2, [pc, #204]	; (80007f8 <fsm_automatic+0x250>)
 800072a:	6013      	str	r3, [r2, #0]
			}
			if (isButtonPressed(BUTTON_3_PRESS) == 1) {
 800072c:	2002      	movs	r0, #2
 800072e:	f7ff fe71 	bl	8000414 <isButtonPressed>
 8000732:	4603      	mov	r3, r0
 8000734:	2b01      	cmp	r3, #1
 8000736:	f040 80e9 	bne.w	800090c <fsm_automatic+0x364>
				flag_Red = 1;
 800073a:	4b36      	ldr	r3, [pc, #216]	; (8000814 <fsm_automatic+0x26c>)
 800073c:	2201      	movs	r2, #1
 800073e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000740:	e0e4      	b.n	800090c <fsm_automatic+0x364>
		case MODE3:
			if (timer0_flag == 1) {
 8000742:	4b37      	ldr	r3, [pc, #220]	; (8000820 <fsm_automatic+0x278>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d118      	bne.n	800077c <fsm_automatic+0x1d4>
				update7SEG(positon_7seg, modeData, valueData);
 800074a:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <fsm_automatic+0x248>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a29      	ldr	r2, [pc, #164]	; (80007f4 <fsm_automatic+0x24c>)
 8000750:	6811      	ldr	r1, [r2, #0]
 8000752:	4a29      	ldr	r2, [pc, #164]	; (80007f8 <fsm_automatic+0x250>)
 8000754:	6812      	ldr	r2, [r2, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fdda 	bl	8000310 <update7SEG>
				positon_7seg = (positon_7seg + 1) % 2;
 800075c:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <fsm_automatic+0x248>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	3301      	adds	r3, #1
 8000762:	2b00      	cmp	r3, #0
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	bfb8      	it	lt
 800076a:	425b      	neglt	r3, r3
 800076c:	4a20      	ldr	r2, [pc, #128]	; (80007f0 <fsm_automatic+0x248>)
 800076e:	6013      	str	r3, [r2, #0]
				blinkYellow();
 8000770:	f000 fcf0 	bl	8001154 <blinkYellow>
				setTimer0(500);
 8000774:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000778:	f000 fb8c 	bl	8000e94 <setTimer0>
			}
			if (isButtonPressed(BUTTON_1_PRESS) == 1) {
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff fe49 	bl	8000414 <isButtonPressed>
 8000782:	4603      	mov	r3, r0
 8000784:	2b01      	cmp	r3, #1
 8000786:	d10f      	bne.n	80007a8 <fsm_automatic+0x200>
				modeData = MODE4;
 8000788:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <fsm_automatic+0x24c>)
 800078a:	2204      	movs	r2, #4
 800078c:	601a      	str	r2, [r3, #0]
				valueData = tempValGreen;
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <fsm_automatic+0x268>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a19      	ldr	r2, [pc, #100]	; (80007f8 <fsm_automatic+0x250>)
 8000794:	6013      	str	r3, [r2, #0]
				mode = MODE4;
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <fsm_automatic+0x244>)
 8000798:	2204      	movs	r2, #4
 800079a:	601a      	str	r2, [r3, #0]
				clearAll();
 800079c:	f000 fc10 	bl	8000fc0 <clearAll>
				setTimer2(500);
 80007a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a4:	f000 fbae 	bl	8000f04 <setTimer2>
			}
			if (isButtonPressed(BUTTON_2_PRESS) == 1) {
 80007a8:	2001      	movs	r0, #1
 80007aa:	f7ff fe33 	bl	8000414 <isButtonPressed>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d10f      	bne.n	80007d4 <fsm_automatic+0x22c>
				if (tempValYellow > 99) {
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <fsm_automatic+0x260>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b63      	cmp	r3, #99	; 0x63
 80007ba:	dd02      	ble.n	80007c2 <fsm_automatic+0x21a>
					tempValYellow = 1;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <fsm_automatic+0x260>)
 80007be:	2201      	movs	r2, #1
 80007c0:	601a      	str	r2, [r3, #0]
				}
				tempValYellow++;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <fsm_automatic+0x260>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	3301      	adds	r3, #1
 80007c8:	4a0f      	ldr	r2, [pc, #60]	; (8000808 <fsm_automatic+0x260>)
 80007ca:	6013      	str	r3, [r2, #0]
				valueData = tempValYellow;
 80007cc:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <fsm_automatic+0x260>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a09      	ldr	r2, [pc, #36]	; (80007f8 <fsm_automatic+0x250>)
 80007d2:	6013      	str	r3, [r2, #0]
			}
			if (isButtonPressed(BUTTON_3_PRESS) == 1) {
 80007d4:	2002      	movs	r0, #2
 80007d6:	f7ff fe1d 	bl	8000414 <isButtonPressed>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b01      	cmp	r3, #1
 80007de:	f040 8097 	bne.w	8000910 <fsm_automatic+0x368>
				flag_Yellow = 1;
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <fsm_automatic+0x270>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	601a      	str	r2, [r3, #0]
			}
			break;
 80007e8:	e092      	b.n	8000910 <fsm_automatic+0x368>
 80007ea:	bf00      	nop
 80007ec:	200000ac 	.word	0x200000ac
 80007f0:	2000007c 	.word	0x2000007c
 80007f4:	200000a4 	.word	0x200000a4
 80007f8:	200000a8 	.word	0x200000a8
 80007fc:	20000098 	.word	0x20000098
 8000800:	20000080 	.word	0x20000080
 8000804:	2000009c 	.word	0x2000009c
 8000808:	20000088 	.word	0x20000088
 800080c:	200000a0 	.word	0x200000a0
 8000810:	20000090 	.word	0x20000090
 8000814:	20000084 	.word	0x20000084
 8000818:	2000008c 	.word	0x2000008c
 800081c:	20000094 	.word	0x20000094
 8000820:	20000100 	.word	0x20000100
		case MODE4:
			if (timer0_flag == 1) {
 8000824:	4b3d      	ldr	r3, [pc, #244]	; (800091c <fsm_automatic+0x374>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d118      	bne.n	800085e <fsm_automatic+0x2b6>
				update7SEG(positon_7seg, modeData, valueData);
 800082c:	4b3c      	ldr	r3, [pc, #240]	; (8000920 <fsm_automatic+0x378>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a3c      	ldr	r2, [pc, #240]	; (8000924 <fsm_automatic+0x37c>)
 8000832:	6811      	ldr	r1, [r2, #0]
 8000834:	4a3c      	ldr	r2, [pc, #240]	; (8000928 <fsm_automatic+0x380>)
 8000836:	6812      	ldr	r2, [r2, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fd69 	bl	8000310 <update7SEG>
				positon_7seg = (positon_7seg + 1) % 2;
 800083e:	4b38      	ldr	r3, [pc, #224]	; (8000920 <fsm_automatic+0x378>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	3301      	adds	r3, #1
 8000844:	2b00      	cmp	r3, #0
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	bfb8      	it	lt
 800084c:	425b      	neglt	r3, r3
 800084e:	4a34      	ldr	r2, [pc, #208]	; (8000920 <fsm_automatic+0x378>)
 8000850:	6013      	str	r3, [r2, #0]
				blinkGreen();
 8000852:	f000 fca1 	bl	8001198 <blinkGreen>
				setTimer0(500);
 8000856:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800085a:	f000 fb1b 	bl	8000e94 <setTimer0>
			}
			if (isButtonPressed(BUTTON_1_PRESS) == 1) {
 800085e:	2000      	movs	r0, #0
 8000860:	f7ff fdd8 	bl	8000414 <isButtonPressed>
 8000864:	4603      	mov	r3, r0
 8000866:	2b01      	cmp	r3, #1
 8000868:	d12c      	bne.n	80008c4 <fsm_automatic+0x31c>
				if (tempValRed == tempValGreen + tempValYellow) {
 800086a:	4b30      	ldr	r3, [pc, #192]	; (800092c <fsm_automatic+0x384>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	4b30      	ldr	r3, [pc, #192]	; (8000930 <fsm_automatic+0x388>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	441a      	add	r2, r3
 8000874:	4b2f      	ldr	r3, [pc, #188]	; (8000934 <fsm_automatic+0x38c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	d117      	bne.n	80008ac <fsm_automatic+0x304>
					if (flag_Red == 1) redTime = tempValRed;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <fsm_automatic+0x390>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d103      	bne.n	800088c <fsm_automatic+0x2e4>
 8000884:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <fsm_automatic+0x38c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a2c      	ldr	r2, [pc, #176]	; (800093c <fsm_automatic+0x394>)
 800088a:	6013      	str	r3, [r2, #0]
					if (flag_Yellow == 1) yellowTime = tempValYellow;
 800088c:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <fsm_automatic+0x398>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d103      	bne.n	800089c <fsm_automatic+0x2f4>
 8000894:	4b26      	ldr	r3, [pc, #152]	; (8000930 <fsm_automatic+0x388>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a2a      	ldr	r2, [pc, #168]	; (8000944 <fsm_automatic+0x39c>)
 800089a:	6013      	str	r3, [r2, #0]
					if (flag_Green == 1) greenTime = tempValGreen;
 800089c:	4b2a      	ldr	r3, [pc, #168]	; (8000948 <fsm_automatic+0x3a0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d103      	bne.n	80008ac <fsm_automatic+0x304>
 80008a4:	4b21      	ldr	r3, [pc, #132]	; (800092c <fsm_automatic+0x384>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a28      	ldr	r2, [pc, #160]	; (800094c <fsm_automatic+0x3a4>)
 80008aa:	6013      	str	r3, [r2, #0]
				}
				state = INIT;
 80008ac:	4b28      	ldr	r3, [pc, #160]	; (8000950 <fsm_automatic+0x3a8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
				mode = INIT;
 80008b2:	4b28      	ldr	r3, [pc, #160]	; (8000954 <fsm_automatic+0x3ac>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
				clearAll();
 80008b8:	f000 fb82 	bl	8000fc0 <clearAll>
				setTimer2(500);
 80008bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008c0:	f000 fb20 	bl	8000f04 <setTimer2>
			}
			if (isButtonPressed(BUTTON_2_PRESS) == 1) {
 80008c4:	2001      	movs	r0, #1
 80008c6:	f7ff fda5 	bl	8000414 <isButtonPressed>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d10f      	bne.n	80008f0 <fsm_automatic+0x348>
				if (tempValGreen > 99) {
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <fsm_automatic+0x384>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b63      	cmp	r3, #99	; 0x63
 80008d6:	dd02      	ble.n	80008de <fsm_automatic+0x336>
					tempValGreen = 1;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <fsm_automatic+0x384>)
 80008da:	2201      	movs	r2, #1
 80008dc:	601a      	str	r2, [r3, #0]
				}
				tempValGreen++;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <fsm_automatic+0x384>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	3301      	adds	r3, #1
 80008e4:	4a11      	ldr	r2, [pc, #68]	; (800092c <fsm_automatic+0x384>)
 80008e6:	6013      	str	r3, [r2, #0]
				valueData = tempValGreen;
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <fsm_automatic+0x384>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <fsm_automatic+0x380>)
 80008ee:	6013      	str	r3, [r2, #0]
			}
			if (isButtonPressed(BUTTON_3_PRESS) == 1) {
 80008f0:	2002      	movs	r0, #2
 80008f2:	f7ff fd8f 	bl	8000414 <isButtonPressed>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d10b      	bne.n	8000914 <fsm_automatic+0x36c>
				flag_Green = 1;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <fsm_automatic+0x3a0>)
 80008fe:	2201      	movs	r2, #1
 8000900:	601a      	str	r2, [r3, #0]
			}
			break;
 8000902:	e007      	b.n	8000914 <fsm_automatic+0x36c>
		default:
			break;
 8000904:	bf00      	nop
 8000906:	e006      	b.n	8000916 <fsm_automatic+0x36e>
			break;
 8000908:	bf00      	nop
 800090a:	e004      	b.n	8000916 <fsm_automatic+0x36e>
			break;
 800090c:	bf00      	nop
 800090e:	e002      	b.n	8000916 <fsm_automatic+0x36e>
			break;
 8000910:	bf00      	nop
 8000912:	e000      	b.n	8000916 <fsm_automatic+0x36e>
			break;
 8000914:	bf00      	nop
	}
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000100 	.word	0x20000100
 8000920:	2000007c 	.word	0x2000007c
 8000924:	200000a4 	.word	0x200000a4
 8000928:	200000a8 	.word	0x200000a8
 800092c:	20000090 	.word	0x20000090
 8000930:	20000088 	.word	0x20000088
 8000934:	20000080 	.word	0x20000080
 8000938:	20000084 	.word	0x20000084
 800093c:	20000098 	.word	0x20000098
 8000940:	2000008c 	.word	0x2000008c
 8000944:	2000009c 	.word	0x2000009c
 8000948:	20000094 	.word	0x20000094
 800094c:	200000a0 	.word	0x200000a0
 8000950:	200000b0 	.word	0x200000b0
 8000954:	200000ac 	.word	0x200000ac

08000958 <fsm_manual>:
 *  Created on: Nov 29, 2024
 *      Author: admin
 */
#include "fsm_manual.h"

void fsm_manual() {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	switch (state) {
 800095c:	4b66      	ldr	r3, [pc, #408]	; (8000af8 <fsm_manual+0x1a0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b04      	cmp	r3, #4
 8000962:	f200 80be 	bhi.w	8000ae2 <fsm_manual+0x18a>
 8000966:	a201      	add	r2, pc, #4	; (adr r2, 800096c <fsm_manual+0x14>)
 8000968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096c:	08000981 	.word	0x08000981
 8000970:	080009ad 	.word	0x080009ad
 8000974:	080009f3 	.word	0x080009f3
 8000978:	08000a4b 	.word	0x08000a4b
 800097c:	08000a8f 	.word	0x08000a8f
		case 0:
			setTimer1(1000);
 8000980:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000984:	f000 faa2 	bl	8000ecc <setTimer1>
			modeData = redTime;
 8000988:	4b5c      	ldr	r3, [pc, #368]	; (8000afc <fsm_manual+0x1a4>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a5c      	ldr	r2, [pc, #368]	; (8000b00 <fsm_manual+0x1a8>)
 800098e:	6013      	str	r3, [r2, #0]
			valueData = greenTime;
 8000990:	4b5c      	ldr	r3, [pc, #368]	; (8000b04 <fsm_manual+0x1ac>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a5c      	ldr	r2, [pc, #368]	; (8000b08 <fsm_manual+0x1b0>)
 8000996:	6013      	str	r3, [r2, #0]
			setRed1();
 8000998:	f000 fb36 	bl	8001008 <setRed1>
			setGreen2();
 800099c:	f000 fba2 	bl	80010e4 <setGreen2>
			state++;
 80009a0:	4b55      	ldr	r3, [pc, #340]	; (8000af8 <fsm_manual+0x1a0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	4a54      	ldr	r2, [pc, #336]	; (8000af8 <fsm_manual+0x1a0>)
 80009a8:	6013      	str	r3, [r2, #0]
			break;
 80009aa:	e0a3      	b.n	8000af4 <fsm_manual+0x19c>
		case 1:
			if (timer1_flag == 1) {
 80009ac:	4b57      	ldr	r3, [pc, #348]	; (8000b0c <fsm_manual+0x1b4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d10d      	bne.n	80009d0 <fsm_manual+0x78>
				modeData--;
 80009b4:	4b52      	ldr	r3, [pc, #328]	; (8000b00 <fsm_manual+0x1a8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	4a51      	ldr	r2, [pc, #324]	; (8000b00 <fsm_manual+0x1a8>)
 80009bc:	6013      	str	r3, [r2, #0]
				valueData--;
 80009be:	4b52      	ldr	r3, [pc, #328]	; (8000b08 <fsm_manual+0x1b0>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	4a50      	ldr	r2, [pc, #320]	; (8000b08 <fsm_manual+0x1b0>)
 80009c6:	6013      	str	r3, [r2, #0]
				setTimer1(1000);
 80009c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009cc:	f000 fa7e 	bl	8000ecc <setTimer1>
			}
			if (valueData == 0) {
 80009d0:	4b4d      	ldr	r3, [pc, #308]	; (8000b08 <fsm_manual+0x1b0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	f040 8086 	bne.w	8000ae6 <fsm_manual+0x18e>
				valueData = yellowTime;
 80009da:	4b4d      	ldr	r3, [pc, #308]	; (8000b10 <fsm_manual+0x1b8>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a4a      	ldr	r2, [pc, #296]	; (8000b08 <fsm_manual+0x1b0>)
 80009e0:	6013      	str	r3, [r2, #0]
				setYellow2();
 80009e2:	f000 fb69 	bl	80010b8 <setYellow2>
				state++;
 80009e6:	4b44      	ldr	r3, [pc, #272]	; (8000af8 <fsm_manual+0x1a0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	3301      	adds	r3, #1
 80009ec:	4a42      	ldr	r2, [pc, #264]	; (8000af8 <fsm_manual+0x1a0>)
 80009ee:	6013      	str	r3, [r2, #0]
			}
			break;
 80009f0:	e079      	b.n	8000ae6 <fsm_manual+0x18e>
		case 2:
			if (timer1_flag == 1) {
 80009f2:	4b46      	ldr	r3, [pc, #280]	; (8000b0c <fsm_manual+0x1b4>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d10d      	bne.n	8000a16 <fsm_manual+0xbe>
				modeData--;
 80009fa:	4b41      	ldr	r3, [pc, #260]	; (8000b00 <fsm_manual+0x1a8>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	4a3f      	ldr	r2, [pc, #252]	; (8000b00 <fsm_manual+0x1a8>)
 8000a02:	6013      	str	r3, [r2, #0]
				valueData--;
 8000a04:	4b40      	ldr	r3, [pc, #256]	; (8000b08 <fsm_manual+0x1b0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	4a3f      	ldr	r2, [pc, #252]	; (8000b08 <fsm_manual+0x1b0>)
 8000a0c:	6013      	str	r3, [r2, #0]
				setTimer1(1000);
 8000a0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a12:	f000 fa5b 	bl	8000ecc <setTimer1>
			}
			if ((modeData == 0) && (valueData == 0)) {
 8000a16:	4b3a      	ldr	r3, [pc, #232]	; (8000b00 <fsm_manual+0x1a8>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d165      	bne.n	8000aea <fsm_manual+0x192>
 8000a1e:	4b3a      	ldr	r3, [pc, #232]	; (8000b08 <fsm_manual+0x1b0>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d161      	bne.n	8000aea <fsm_manual+0x192>
				modeData = greenTime;
 8000a26:	4b37      	ldr	r3, [pc, #220]	; (8000b04 <fsm_manual+0x1ac>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a35      	ldr	r2, [pc, #212]	; (8000b00 <fsm_manual+0x1a8>)
 8000a2c:	6013      	str	r3, [r2, #0]
				valueData = redTime;
 8000a2e:	4b33      	ldr	r3, [pc, #204]	; (8000afc <fsm_manual+0x1a4>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a35      	ldr	r2, [pc, #212]	; (8000b08 <fsm_manual+0x1b0>)
 8000a34:	6013      	str	r3, [r2, #0]
				setGreen1();
 8000a36:	f000 fb13 	bl	8001060 <setGreen1>
				setRed2();
 8000a3a:	f000 fb27 	bl	800108c <setRed2>
				state++;
 8000a3e:	4b2e      	ldr	r3, [pc, #184]	; (8000af8 <fsm_manual+0x1a0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	3301      	adds	r3, #1
 8000a44:	4a2c      	ldr	r2, [pc, #176]	; (8000af8 <fsm_manual+0x1a0>)
 8000a46:	6013      	str	r3, [r2, #0]
			}
			break;
 8000a48:	e04f      	b.n	8000aea <fsm_manual+0x192>
		case 3:
			if (timer1_flag == 1) {
 8000a4a:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <fsm_manual+0x1b4>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d10d      	bne.n	8000a6e <fsm_manual+0x116>
				modeData--;
 8000a52:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <fsm_manual+0x1a8>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	4a29      	ldr	r2, [pc, #164]	; (8000b00 <fsm_manual+0x1a8>)
 8000a5a:	6013      	str	r3, [r2, #0]
				valueData--;
 8000a5c:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <fsm_manual+0x1b0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	4a29      	ldr	r2, [pc, #164]	; (8000b08 <fsm_manual+0x1b0>)
 8000a64:	6013      	str	r3, [r2, #0]
				setTimer1(1000);
 8000a66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a6a:	f000 fa2f 	bl	8000ecc <setTimer1>
			}
			if (modeData == 0){
 8000a6e:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <fsm_manual+0x1a8>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d13b      	bne.n	8000aee <fsm_manual+0x196>
				modeData = yellowTime;
 8000a76:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <fsm_manual+0x1b8>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a21      	ldr	r2, [pc, #132]	; (8000b00 <fsm_manual+0x1a8>)
 8000a7c:	6013      	str	r3, [r2, #0]
				setYellow1();
 8000a7e:	f000 fad9 	bl	8001034 <setYellow1>
				state++;
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <fsm_manual+0x1a0>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	4a1b      	ldr	r2, [pc, #108]	; (8000af8 <fsm_manual+0x1a0>)
 8000a8a:	6013      	str	r3, [r2, #0]
			}
			break;
 8000a8c:	e02f      	b.n	8000aee <fsm_manual+0x196>
		case 4:
			if (timer1_flag == 1) {
 8000a8e:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <fsm_manual+0x1b4>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d10d      	bne.n	8000ab2 <fsm_manual+0x15a>
				modeData--;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <fsm_manual+0x1a8>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	4a18      	ldr	r2, [pc, #96]	; (8000b00 <fsm_manual+0x1a8>)
 8000a9e:	6013      	str	r3, [r2, #0]
				valueData--;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <fsm_manual+0x1b0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <fsm_manual+0x1b0>)
 8000aa8:	6013      	str	r3, [r2, #0]
				setTimer1(1000);
 8000aaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aae:	f000 fa0d 	bl	8000ecc <setTimer1>
			}
			if ((modeData == 0) && (valueData == 0)) {
 8000ab2:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <fsm_manual+0x1a8>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d11b      	bne.n	8000af2 <fsm_manual+0x19a>
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <fsm_manual+0x1b0>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d117      	bne.n	8000af2 <fsm_manual+0x19a>
				modeData = redTime;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <fsm_manual+0x1a4>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <fsm_manual+0x1a8>)
 8000ac8:	6013      	str	r3, [r2, #0]
				valueData = greenTime;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <fsm_manual+0x1ac>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <fsm_manual+0x1b0>)
 8000ad0:	6013      	str	r3, [r2, #0]
				setRed1();
 8000ad2:	f000 fa99 	bl	8001008 <setRed1>
				setGreen2();
 8000ad6:	f000 fb05 	bl	80010e4 <setGreen2>
				state = 0;
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <fsm_manual+0x1a0>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
			}
			break;
 8000ae0:	e007      	b.n	8000af2 <fsm_manual+0x19a>
		default:
			break;
 8000ae2:	bf00      	nop
 8000ae4:	e006      	b.n	8000af4 <fsm_manual+0x19c>
			break;
 8000ae6:	bf00      	nop
 8000ae8:	e004      	b.n	8000af4 <fsm_manual+0x19c>
			break;
 8000aea:	bf00      	nop
 8000aec:	e002      	b.n	8000af4 <fsm_manual+0x19c>
			break;
 8000aee:	bf00      	nop
 8000af0:	e000      	b.n	8000af4 <fsm_manual+0x19c>
			break;
 8000af2:	bf00      	nop
	}
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200000b0 	.word	0x200000b0
 8000afc:	20000098 	.word	0x20000098
 8000b00:	200000a4 	.word	0x200000a4
 8000b04:	200000a0 	.word	0x200000a0
 8000b08:	200000a8 	.word	0x200000a8
 8000b0c:	20000108 	.word	0x20000108
 8000b10:	2000009c 	.word	0x2000009c

08000b14 <initParams>:
int valueData;

int mode = INIT;
int state = INIT;

void initParams() {
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
	redTime = RED_TIME;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <initParams+0x30>)
 8000b1a:	2205      	movs	r2, #5
 8000b1c:	601a      	str	r2, [r3, #0]
	yellowTime = YELLOW_TIME;
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <initParams+0x34>)
 8000b20:	2202      	movs	r2, #2
 8000b22:	601a      	str	r2, [r3, #0]
	greenTime = GREEN_TIME;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <initParams+0x38>)
 8000b26:	2203      	movs	r2, #3
 8000b28:	601a      	str	r2, [r3, #0]
	modeData = redTime;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <initParams+0x30>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <initParams+0x3c>)
 8000b30:	6013      	str	r3, [r2, #0]
	valueData = greenTime;
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <initParams+0x38>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <initParams+0x40>)
 8000b38:	6013      	str	r3, [r2, #0]
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000098 	.word	0x20000098
 8000b48:	2000009c 	.word	0x2000009c
 8000b4c:	200000a0 	.word	0x200000a0
 8000b50:	200000a4 	.word	0x200000a4
 8000b54:	200000a8 	.word	0x200000a8

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f000 fb64 	bl	8001228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f81a 	bl	8000b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b64:	f000 f8a0 	bl	8000ca8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b68:	f000 f852 	bl	8000c10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b6c:	4803      	ldr	r0, [pc, #12]	; (8000b7c <main+0x24>)
 8000b6e:	f001 fabd 	bl	80020ec <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  setTimer0(500);
//  setTimer1(1000);
//  setTimer2(1000);
  initParams();
 8000b72:	f7ff ffcf 	bl	8000b14 <initParams>
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_automatic();
 8000b76:	f7ff fd17 	bl	80005a8 <fsm_automatic>
 8000b7a:	e7fc      	b.n	8000b76 <main+0x1e>
 8000b7c:	200000b4 	.word	0x200000b4

08000b80 <HAL_TIM_PeriodElapsedCallback>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	timerRun();
 8000b88:	f000 f9d8 	bl	8000f3c <timerRun>
	getKeyInput();
 8000b8c:	f7ff fc6c 	bl	8000468 <getKeyInput>
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b090      	sub	sp, #64	; 0x40
 8000b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9e:	f107 0318 	add.w	r3, r7, #24
 8000ba2:	2228      	movs	r2, #40	; 0x28
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 fe2c 	bl	8002804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc2:	2310      	movs	r3, #16
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 fe5e 	bl	8001890 <HAL_RCC_OscConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000bda:	f000 f8c7 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bde:	230f      	movs	r3, #15
 8000be0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 f8cc 	bl	8001d94 <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c02:	f000 f8b3 	bl	8000d6c <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3740      	adds	r7, #64	; 0x40
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	463b      	mov	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c36:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c44:	2209      	movs	r2, #9
 8000c46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c54:	4813      	ldr	r0, [pc, #76]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c56:	f001 f9f9 	bl	800204c <HAL_TIM_Base_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c60:	f000 f884 	bl	8000d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c72:	f001 fb77 	bl	8002364 <HAL_TIM_ConfigClockSource>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c7c:	f000 f876 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c8e:	f001 fd4f 	bl	8002730 <HAL_TIMEx_MasterConfigSynchronization>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c98:	f000 f868 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200000b4 	.word	0x200000b4

08000ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbc:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <MX_GPIO_Init+0xb8>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a27      	ldr	r2, [pc, #156]	; (8000d60 <MX_GPIO_Init+0xb8>)
 8000cc2:	f043 0304 	orr.w	r3, r3, #4
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <MX_GPIO_Init+0xb8>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd4:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <MX_GPIO_Init+0xb8>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a21      	ldr	r2, [pc, #132]	; (8000d60 <MX_GPIO_Init+0xb8>)
 8000cda:	f043 0308 	orr.w	r3, r3, #8
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <MX_GPIO_Init+0xb8>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0308 	and.w	r3, r3, #8
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 8000cec:	2200      	movs	r2, #0
 8000cee:	f64f 613f 	movw	r1, #65087	; 0xfe3f
 8000cf2:	481c      	ldr	r0, [pc, #112]	; (8000d64 <MX_GPIO_Init+0xbc>)
 8000cf4:	f000 fd9b 	bl	800182e <HAL_GPIO_WritePin>
                          |YELLOW_2_Pin|GREEN_2_Pin|MODE_A_Pin|MODE_B_Pin
                          |MODE_C_Pin|MODE_D_Pin|MODE_E_Pin|MODE_F_Pin
                          |MODE_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_VAL_0_Pin|EN_VAL_1_Pin|EN_MODE_0_Pin|EN_MODE_1_Pin
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f24f 31f8 	movw	r1, #62456	; 0xf3f8
 8000cfe:	481a      	ldr	r0, [pc, #104]	; (8000d68 <MX_GPIO_Init+0xc0>)
 8000d00:	f000 fd95 	bl	800182e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_1_Pin YELLOW_1_Pin GREEN_1_Pin RED_2_Pin
                           YELLOW_2_Pin GREEN_2_Pin MODE_A_Pin MODE_B_Pin
                           MODE_C_Pin MODE_D_Pin MODE_E_Pin MODE_F_Pin
                           MODE_G_Pin */
  GPIO_InitStruct.Pin = RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 8000d04:	f64f 633f 	movw	r3, #65087	; 0xfe3f
 8000d08:	60bb      	str	r3, [r7, #8]
                          |YELLOW_2_Pin|GREEN_2_Pin|MODE_A_Pin|MODE_B_Pin
                          |MODE_C_Pin|MODE_D_Pin|MODE_E_Pin|MODE_F_Pin
                          |MODE_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2302      	movs	r3, #2
 8000d14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 0308 	add.w	r3, r7, #8
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4811      	ldr	r0, [pc, #68]	; (8000d64 <MX_GPIO_Init+0xbc>)
 8000d1e:	f000 fbf3 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000d22:	2307      	movs	r3, #7
 8000d24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	4619      	mov	r1, r3
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <MX_GPIO_Init+0xc0>)
 8000d36:	f000 fbe7 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_VAL_0_Pin EN_VAL_1_Pin EN_MODE_0_Pin EN_MODE_1_Pin
                           VALUE_A_Pin VALUE_B_Pin VALUE_C_Pin VALUE_D_Pin
                           VALUE_E_Pin VALUE_F_Pin VALUE_G_Pin */
  GPIO_InitStruct.Pin = EN_VAL_0_Pin|EN_VAL_1_Pin|EN_MODE_0_Pin|EN_MODE_1_Pin
 8000d3a:	f24f 33f8 	movw	r3, #62456	; 0xf3f8
 8000d3e:	60bb      	str	r3, [r7, #8]
                          |VALUE_A_Pin|VALUE_B_Pin|VALUE_C_Pin|VALUE_D_Pin
                          |VALUE_E_Pin|VALUE_F_Pin|VALUE_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	f107 0308 	add.w	r3, r7, #8
 8000d50:	4619      	mov	r1, r3
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_GPIO_Init+0xc0>)
 8000d54:	f000 fbd8 	bl	8001508 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40010800 	.word	0x40010800
 8000d68:	40010c00 	.word	0x40010c00

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <Error_Handler+0x8>
	...

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6193      	str	r3, [r2, #24]
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	61d3      	str	r3, [r2, #28]
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_MspInit+0x60>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_MspInit+0x60>)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010000 	.word	0x40010000

08000ddc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dec:	d113      	bne.n	8000e16 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <HAL_TIM_Base_MspInit+0x44>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <HAL_TIM_Base_MspInit+0x44>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	61d3      	str	r3, [r2, #28]
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_TIM_Base_MspInit+0x44>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	201c      	movs	r0, #28
 8000e0c:	f000 fb45 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e10:	201c      	movs	r0, #28
 8000e12:	f000 fb5e 	bl	80014d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e28:	e7fe      	b.n	8000e28 <NMI_Handler+0x4>

08000e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <MemManage_Handler+0x4>

08000e36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr

08000e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr

08000e66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6a:	f000 fa23 	bl	80012b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <TIM2_IRQHandler+0x10>)
 8000e7a:	f001 f983 	bl	8002184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200000b4 	.word	0x200000b4

08000e88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr

08000e94 <setTimer0>:

int timer0_counter = 0, timer0_flag = 0;
int timer1_counter = 0, timer1_flag = 0;
int timer2_counter = 0, timer2_flag = 0;

void setTimer0(int duration) {
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <setTimer0+0x2c>)
 8000ea0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea4:	1092      	asrs	r2, r2, #2
 8000ea6:	17db      	asrs	r3, r3, #31
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <setTimer0+0x30>)
 8000eac:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <setTimer0+0x34>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	66666667 	.word	0x66666667
 8000ec4:	200000fc 	.word	0x200000fc
 8000ec8:	20000100 	.word	0x20000100

08000ecc <setTimer1>:

void setTimer1(int duration) {
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <setTimer1+0x2c>)
 8000ed8:	fb82 1203 	smull	r1, r2, r2, r3
 8000edc:	1092      	asrs	r2, r2, #2
 8000ede:	17db      	asrs	r3, r3, #31
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	4a06      	ldr	r2, [pc, #24]	; (8000efc <setTimer1+0x30>)
 8000ee4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <setTimer1+0x34>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	66666667 	.word	0x66666667
 8000efc:	20000104 	.word	0x20000104
 8000f00:	20000108 	.word	0x20000108

08000f04 <setTimer2>:

void setTimer2(int duration) {
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <setTimer2+0x2c>)
 8000f10:	fb82 1203 	smull	r1, r2, r2, r3
 8000f14:	1092      	asrs	r2, r2, #2
 8000f16:	17db      	asrs	r3, r3, #31
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <setTimer2+0x30>)
 8000f1c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <setTimer2+0x34>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	66666667 	.word	0x66666667
 8000f34:	2000010c 	.word	0x2000010c
 8000f38:	20000110 	.word	0x20000110

08000f3c <timerRun>:

void timerRun() {
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 8000f40:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <timerRun+0x6c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	dd0b      	ble.n	8000f60 <timerRun+0x24>
		timer0_counter--;
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <timerRun+0x6c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	4a16      	ldr	r2, [pc, #88]	; (8000fa8 <timerRun+0x6c>)
 8000f50:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0) timer0_flag = 1;
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <timerRun+0x6c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d102      	bne.n	8000f60 <timerRun+0x24>
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <timerRun+0x70>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]
	}
	if (timer1_counter > 0) {
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <timerRun+0x74>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	dd0b      	ble.n	8000f80 <timerRun+0x44>
		timer1_counter--;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <timerRun+0x74>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <timerRun+0x74>)
 8000f70:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) timer1_flag = 1;
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <timerRun+0x74>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d102      	bne.n	8000f80 <timerRun+0x44>
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <timerRun+0x78>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter > 0) {
 8000f80:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <timerRun+0x7c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	dd0b      	ble.n	8000fa0 <timerRun+0x64>
		timer2_counter--;
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <timerRun+0x7c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <timerRun+0x7c>)
 8000f90:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) timer2_flag = 1;
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <timerRun+0x7c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d102      	bne.n	8000fa0 <timerRun+0x64>
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <timerRun+0x80>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
	}
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	200000fc 	.word	0x200000fc
 8000fac:	20000100 	.word	0x20000100
 8000fb0:	20000104 	.word	0x20000104
 8000fb4:	20000108 	.word	0x20000108
 8000fb8:	2000010c 	.word	0x2000010c
 8000fbc:	20000110 	.word	0x20000110

08000fc0 <clearAll>:
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_RESET);
}

void clearAll() {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	480e      	ldr	r0, [pc, #56]	; (8001004 <clearAll+0x44>)
 8000fca:	f000 fc30 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_SET);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	480c      	ldr	r0, [pc, #48]	; (8001004 <clearAll+0x44>)
 8000fd4:	f000 fc2b 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2104      	movs	r1, #4
 8000fdc:	4809      	ldr	r0, [pc, #36]	; (8001004 <clearAll+0x44>)
 8000fde:	f000 fc26 	bl	800182e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2108      	movs	r1, #8
 8000fe6:	4807      	ldr	r0, [pc, #28]	; (8001004 <clearAll+0x44>)
 8000fe8:	f000 fc21 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2110      	movs	r1, #16
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <clearAll+0x44>)
 8000ff2:	f000 fc1c 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	4802      	ldr	r0, [pc, #8]	; (8001004 <clearAll+0x44>)
 8000ffc:	f000 fc17 	bl	800182e <HAL_GPIO_WritePin>
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40010800 	.word	0x40010800

08001008 <setRed1>:

void setRed1() {
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	2101      	movs	r1, #1
 8001010:	4807      	ldr	r0, [pc, #28]	; (8001030 <setRed1+0x28>)
 8001012:	f000 fc0c 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_SET);
 8001016:	2201      	movs	r2, #1
 8001018:	2102      	movs	r1, #2
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <setRed1+0x28>)
 800101c:	f000 fc07 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	2104      	movs	r1, #4
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <setRed1+0x28>)
 8001026:	f000 fc02 	bl	800182e <HAL_GPIO_WritePin>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40010800 	.word	0x40010800

08001034 <setYellow1>:

void setYellow1() {
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2101      	movs	r1, #1
 800103c:	4807      	ldr	r0, [pc, #28]	; (800105c <setYellow1+0x28>)
 800103e:	f000 fbf6 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2102      	movs	r1, #2
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <setYellow1+0x28>)
 8001048:	f000 fbf1 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	2104      	movs	r1, #4
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <setYellow1+0x28>)
 8001052:	f000 fbec 	bl	800182e <HAL_GPIO_WritePin>
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40010800 	.word	0x40010800

08001060 <setGreen1>:

void setGreen1() {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	2101      	movs	r1, #1
 8001068:	4807      	ldr	r0, [pc, #28]	; (8001088 <setGreen1+0x28>)
 800106a:	f000 fbe0 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_SET);
 800106e:	2201      	movs	r2, #1
 8001070:	2102      	movs	r1, #2
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <setGreen1+0x28>)
 8001074:	f000 fbdb 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2104      	movs	r1, #4
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <setGreen1+0x28>)
 800107e:	f000 fbd6 	bl	800182e <HAL_GPIO_WritePin>
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40010800 	.word	0x40010800

0800108c <setRed2>:

void setRed2() {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2108      	movs	r1, #8
 8001094:	4807      	ldr	r0, [pc, #28]	; (80010b4 <setRed2+0x28>)
 8001096:	f000 fbca 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2110      	movs	r1, #16
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <setRed2+0x28>)
 80010a0:	f000 fbc5 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2120      	movs	r1, #32
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <setRed2+0x28>)
 80010aa:	f000 fbc0 	bl	800182e <HAL_GPIO_WritePin>
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40010800 	.word	0x40010800

080010b8 <setYellow2>:

void setYellow2() {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	2108      	movs	r1, #8
 80010c0:	4807      	ldr	r0, [pc, #28]	; (80010e0 <setYellow2+0x28>)
 80010c2:	f000 fbb4 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2110      	movs	r1, #16
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <setYellow2+0x28>)
 80010cc:	f000 fbaf 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2120      	movs	r1, #32
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <setYellow2+0x28>)
 80010d6:	f000 fbaa 	bl	800182e <HAL_GPIO_WritePin>
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40010800 	.word	0x40010800

080010e4 <setGreen2>:

void setGreen2() {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2108      	movs	r1, #8
 80010ec:	4807      	ldr	r0, [pc, #28]	; (800110c <setGreen2+0x28>)
 80010ee:	f000 fb9e 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	2110      	movs	r1, #16
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <setGreen2+0x28>)
 80010f8:	f000 fb99 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2120      	movs	r1, #32
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <setGreen2+0x28>)
 8001102:	f000 fb94 	bl	800182e <HAL_GPIO_WritePin>
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40010800 	.word	0x40010800

08001110 <blinkRed>:

void blinkRed() {
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED_1_GPIO_Port, RED_1_Pin);
 8001114:	2101      	movs	r1, #1
 8001116:	480e      	ldr	r0, [pc, #56]	; (8001150 <blinkRed+0x40>)
 8001118:	f000 fba1 	bl	800185e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	2102      	movs	r1, #2
 8001120:	480b      	ldr	r0, [pc, #44]	; (8001150 <blinkRed+0x40>)
 8001122:	f000 fb84 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 8001126:	2201      	movs	r2, #1
 8001128:	2104      	movs	r1, #4
 800112a:	4809      	ldr	r0, [pc, #36]	; (8001150 <blinkRed+0x40>)
 800112c:	f000 fb7f 	bl	800182e <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(RED_2_GPIO_Port, RED_2_Pin);
 8001130:	2108      	movs	r1, #8
 8001132:	4807      	ldr	r0, [pc, #28]	; (8001150 <blinkRed+0x40>)
 8001134:	f000 fb93 	bl	800185e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	2110      	movs	r1, #16
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <blinkRed+0x40>)
 800113e:	f000 fb76 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_SET);
 8001142:	2201      	movs	r2, #1
 8001144:	2120      	movs	r1, #32
 8001146:	4802      	ldr	r0, [pc, #8]	; (8001150 <blinkRed+0x40>)
 8001148:	f000 fb71 	bl	800182e <HAL_GPIO_WritePin>
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40010800 	.word	0x40010800

08001154 <blinkYellow>:

void blinkYellow() {
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 8001158:	2201      	movs	r2, #1
 800115a:	2101      	movs	r1, #1
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <blinkYellow+0x40>)
 800115e:	f000 fb66 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin);
 8001162:	2102      	movs	r1, #2
 8001164:	480b      	ldr	r0, [pc, #44]	; (8001194 <blinkYellow+0x40>)
 8001166:	f000 fb7a 	bl	800185e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	2104      	movs	r1, #4
 800116e:	4809      	ldr	r0, [pc, #36]	; (8001194 <blinkYellow+0x40>)
 8001170:	f000 fb5d 	bl	800182e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	2108      	movs	r1, #8
 8001178:	4806      	ldr	r0, [pc, #24]	; (8001194 <blinkYellow+0x40>)
 800117a:	f000 fb58 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin);
 800117e:	2110      	movs	r1, #16
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <blinkYellow+0x40>)
 8001182:	f000 fb6c 	bl	800185e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	2120      	movs	r1, #32
 800118a:	4802      	ldr	r0, [pc, #8]	; (8001194 <blinkYellow+0x40>)
 800118c:	f000 fb4f 	bl	800182e <HAL_GPIO_WritePin>
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40010800 	.word	0x40010800

08001198 <blinkGreen>:
void blinkGreen() {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2101      	movs	r1, #1
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <blinkGreen+0x40>)
 80011a2:	f000 fb44 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	2102      	movs	r1, #2
 80011aa:	480b      	ldr	r0, [pc, #44]	; (80011d8 <blinkGreen+0x40>)
 80011ac:	f000 fb3f 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GREEN_1_GPIO_Port, GREEN_1_Pin);
 80011b0:	2104      	movs	r1, #4
 80011b2:	4809      	ldr	r0, [pc, #36]	; (80011d8 <blinkGreen+0x40>)
 80011b4:	f000 fb53 	bl	800185e <HAL_GPIO_TogglePin>

	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2108      	movs	r1, #8
 80011bc:	4806      	ldr	r0, [pc, #24]	; (80011d8 <blinkGreen+0x40>)
 80011be:	f000 fb36 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, GPIO_PIN_SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	2110      	movs	r1, #16
 80011c6:	4804      	ldr	r0, [pc, #16]	; (80011d8 <blinkGreen+0x40>)
 80011c8:	f000 fb31 	bl	800182e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GREEN_2_GPIO_Port, GREEN_2_Pin);
 80011cc:	2120      	movs	r1, #32
 80011ce:	4802      	ldr	r0, [pc, #8]	; (80011d8 <blinkGreen+0x40>)
 80011d0:	f000 fb45 	bl	800185e <HAL_GPIO_TogglePin>
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40010800 	.word	0x40010800

080011dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011dc:	f7ff fe54 	bl	8000e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e0:	480b      	ldr	r0, [pc, #44]	; (8001210 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011e2:	490c      	ldr	r1, [pc, #48]	; (8001214 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011e4:	4a0c      	ldr	r2, [pc, #48]	; (8001218 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e8:	e002      	b.n	80011f0 <LoopCopyDataInit>

080011ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ee:	3304      	adds	r3, #4

080011f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f4:	d3f9      	bcc.n	80011ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f6:	4a09      	ldr	r2, [pc, #36]	; (800121c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011f8:	4c09      	ldr	r4, [pc, #36]	; (8001220 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011fc:	e001      	b.n	8001202 <LoopFillZerobss>

080011fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001200:	3204      	adds	r2, #4

08001202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001204:	d3fb      	bcc.n	80011fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001206:	f001 fb05 	bl	8002814 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800120a:	f7ff fca5 	bl	8000b58 <main>
  bx lr
 800120e:	4770      	bx	lr
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8001218:	080028a0 	.word	0x080028a0
  ldr r2, =_sbss
 800121c:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8001220:	20000118 	.word	0x20000118

08001224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC1_2_IRQHandler>
	...

08001228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_Init+0x28>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a07      	ldr	r2, [pc, #28]	; (8001250 <HAL_Init+0x28>)
 8001232:	f043 0310 	orr.w	r3, r3, #16
 8001236:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001238:	2003      	movs	r0, #3
 800123a:	f000 f923 	bl	8001484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123e:	200f      	movs	r0, #15
 8001240:	f000 f808 	bl	8001254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001244:	f7ff fd98 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40022000 	.word	0x40022000

08001254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_InitTick+0x54>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_InitTick+0x58>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	fbb3 f3f1 	udiv	r3, r3, r1
 800126e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f93b 	bl	80014ee <HAL_SYSTICK_Config>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e00e      	b.n	80012a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b0f      	cmp	r3, #15
 8001286:	d80a      	bhi.n	800129e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001288:	2200      	movs	r2, #0
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f000 f903 	bl	800149a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001294:	4a06      	ldr	r2, [pc, #24]	; (80012b0 <HAL_InitTick+0x5c>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	e000      	b.n	80012a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2000003c 	.word	0x2000003c
 80012ac:	20000044 	.word	0x20000044
 80012b0:	20000040 	.word	0x20000040

080012b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_IncTick+0x1c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <HAL_IncTick+0x20>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4413      	add	r3, r2
 80012c4:	4a03      	ldr	r2, [pc, #12]	; (80012d4 <HAL_IncTick+0x20>)
 80012c6:	6013      	str	r3, [r2, #0]
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	20000044 	.word	0x20000044
 80012d4:	20000114 	.word	0x20000114

080012d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b02      	ldr	r3, [pc, #8]	; (80012e8 <HAL_GetTick+0x10>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	20000114 	.word	0x20000114

080012ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001308:	4013      	ands	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131e:	4a04      	ldr	r2, [pc, #16]	; (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	60d3      	str	r3, [r2, #12]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <__NVIC_GetPriorityGrouping+0x18>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	f003 0307 	and.w	r3, r3, #7
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db0b      	blt.n	800137a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f003 021f 	and.w	r2, r3, #31
 8001368:	4906      	ldr	r1, [pc, #24]	; (8001384 <__NVIC_EnableIRQ+0x34>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	2001      	movs	r0, #1
 8001372:	fa00 f202 	lsl.w	r2, r0, r2
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	; (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001450:	d301      	bcc.n	8001456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001452:	2301      	movs	r3, #1
 8001454:	e00f      	b.n	8001476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <SysTick_Config+0x40>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145e:	210f      	movs	r1, #15
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	f7ff ff90 	bl	8001388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <SysTick_Config+0x40>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <SysTick_Config+0x40>)
 8001470:	2207      	movs	r2, #7
 8001472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	e000e010 	.word	0xe000e010

08001484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ff2d 	bl	80012ec <__NVIC_SetPriorityGrouping>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ac:	f7ff ff42 	bl	8001334 <__NVIC_GetPriorityGrouping>
 80014b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7ff ff90 	bl	80013dc <NVIC_EncodePriority>
 80014bc:	4602      	mov	r2, r0
 80014be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff5f 	bl	8001388 <__NVIC_SetPriority>
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff35 	bl	8001350 <__NVIC_EnableIRQ>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffa2 	bl	8001440 <SysTick_Config>
 80014fc:	4603      	mov	r3, r0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b08b      	sub	sp, #44	; 0x2c
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151a:	e161      	b.n	80017e0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800151c:	2201      	movs	r2, #1
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	429a      	cmp	r2, r3
 8001536:	f040 8150 	bne.w	80017da <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4a97      	ldr	r2, [pc, #604]	; (800179c <HAL_GPIO_Init+0x294>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d05e      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 8001544:	4a95      	ldr	r2, [pc, #596]	; (800179c <HAL_GPIO_Init+0x294>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d875      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 800154a:	4a95      	ldr	r2, [pc, #596]	; (80017a0 <HAL_GPIO_Init+0x298>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d058      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 8001550:	4a93      	ldr	r2, [pc, #588]	; (80017a0 <HAL_GPIO_Init+0x298>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d86f      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 8001556:	4a93      	ldr	r2, [pc, #588]	; (80017a4 <HAL_GPIO_Init+0x29c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d052      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 800155c:	4a91      	ldr	r2, [pc, #580]	; (80017a4 <HAL_GPIO_Init+0x29c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d869      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 8001562:	4a91      	ldr	r2, [pc, #580]	; (80017a8 <HAL_GPIO_Init+0x2a0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d04c      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 8001568:	4a8f      	ldr	r2, [pc, #572]	; (80017a8 <HAL_GPIO_Init+0x2a0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d863      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 800156e:	4a8f      	ldr	r2, [pc, #572]	; (80017ac <HAL_GPIO_Init+0x2a4>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d046      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 8001574:	4a8d      	ldr	r2, [pc, #564]	; (80017ac <HAL_GPIO_Init+0x2a4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d85d      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 800157a:	2b12      	cmp	r3, #18
 800157c:	d82a      	bhi.n	80015d4 <HAL_GPIO_Init+0xcc>
 800157e:	2b12      	cmp	r3, #18
 8001580:	d859      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 8001582:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <HAL_GPIO_Init+0x80>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	08001603 	.word	0x08001603
 800158c:	080015dd 	.word	0x080015dd
 8001590:	080015ef 	.word	0x080015ef
 8001594:	08001631 	.word	0x08001631
 8001598:	08001637 	.word	0x08001637
 800159c:	08001637 	.word	0x08001637
 80015a0:	08001637 	.word	0x08001637
 80015a4:	08001637 	.word	0x08001637
 80015a8:	08001637 	.word	0x08001637
 80015ac:	08001637 	.word	0x08001637
 80015b0:	08001637 	.word	0x08001637
 80015b4:	08001637 	.word	0x08001637
 80015b8:	08001637 	.word	0x08001637
 80015bc:	08001637 	.word	0x08001637
 80015c0:	08001637 	.word	0x08001637
 80015c4:	08001637 	.word	0x08001637
 80015c8:	08001637 	.word	0x08001637
 80015cc:	080015e5 	.word	0x080015e5
 80015d0:	080015f9 	.word	0x080015f9
 80015d4:	4a76      	ldr	r2, [pc, #472]	; (80017b0 <HAL_GPIO_Init+0x2a8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d013      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015da:	e02c      	b.n	8001636 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	623b      	str	r3, [r7, #32]
          break;
 80015e2:	e029      	b.n	8001638 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	3304      	adds	r3, #4
 80015ea:	623b      	str	r3, [r7, #32]
          break;
 80015ec:	e024      	b.n	8001638 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	3308      	adds	r3, #8
 80015f4:	623b      	str	r3, [r7, #32]
          break;
 80015f6:	e01f      	b.n	8001638 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	330c      	adds	r3, #12
 80015fe:	623b      	str	r3, [r7, #32]
          break;
 8001600:	e01a      	b.n	8001638 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800160a:	2304      	movs	r3, #4
 800160c:	623b      	str	r3, [r7, #32]
          break;
 800160e:	e013      	b.n	8001638 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d105      	bne.n	8001624 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001618:	2308      	movs	r3, #8
 800161a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	611a      	str	r2, [r3, #16]
          break;
 8001622:	e009      	b.n	8001638 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001624:	2308      	movs	r3, #8
 8001626:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	615a      	str	r2, [r3, #20]
          break;
 800162e:	e003      	b.n	8001638 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
          break;
 8001634:	e000      	b.n	8001638 <HAL_GPIO_Init+0x130>
          break;
 8001636:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	2bff      	cmp	r3, #255	; 0xff
 800163c:	d801      	bhi.n	8001642 <HAL_GPIO_Init+0x13a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	e001      	b.n	8001646 <HAL_GPIO_Init+0x13e>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3304      	adds	r3, #4
 8001646:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2bff      	cmp	r3, #255	; 0xff
 800164c:	d802      	bhi.n	8001654 <HAL_GPIO_Init+0x14c>
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	e002      	b.n	800165a <HAL_GPIO_Init+0x152>
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	3b08      	subs	r3, #8
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	210f      	movs	r1, #15
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	fa01 f303 	lsl.w	r3, r1, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	401a      	ands	r2, r3
 800166c:	6a39      	ldr	r1, [r7, #32]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	431a      	orrs	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 80a9 	beq.w	80017da <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001688:	4b4a      	ldr	r3, [pc, #296]	; (80017b4 <HAL_GPIO_Init+0x2ac>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a49      	ldr	r2, [pc, #292]	; (80017b4 <HAL_GPIO_Init+0x2ac>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b47      	ldr	r3, [pc, #284]	; (80017b4 <HAL_GPIO_Init+0x2ac>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016a0:	4a45      	ldr	r2, [pc, #276]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	3302      	adds	r3, #2
 80016a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	220f      	movs	r2, #15
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4013      	ands	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a3d      	ldr	r2, [pc, #244]	; (80017bc <HAL_GPIO_Init+0x2b4>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d00d      	beq.n	80016e8 <HAL_GPIO_Init+0x1e0>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a3c      	ldr	r2, [pc, #240]	; (80017c0 <HAL_GPIO_Init+0x2b8>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d007      	beq.n	80016e4 <HAL_GPIO_Init+0x1dc>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a3b      	ldr	r2, [pc, #236]	; (80017c4 <HAL_GPIO_Init+0x2bc>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d101      	bne.n	80016e0 <HAL_GPIO_Init+0x1d8>
 80016dc:	2302      	movs	r3, #2
 80016de:	e004      	b.n	80016ea <HAL_GPIO_Init+0x1e2>
 80016e0:	2303      	movs	r3, #3
 80016e2:	e002      	b.n	80016ea <HAL_GPIO_Init+0x1e2>
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <HAL_GPIO_Init+0x1e2>
 80016e8:	2300      	movs	r3, #0
 80016ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ec:	f002 0203 	and.w	r2, r2, #3
 80016f0:	0092      	lsls	r2, r2, #2
 80016f2:	4093      	lsls	r3, r2
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016fa:	492f      	ldr	r1, [pc, #188]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	3302      	adds	r3, #2
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001714:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	492b      	ldr	r1, [pc, #172]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	608b      	str	r3, [r1, #8]
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001722:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	43db      	mvns	r3, r3
 800172a:	4927      	ldr	r1, [pc, #156]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 800172c:	4013      	ands	r3, r2
 800172e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	4921      	ldr	r1, [pc, #132]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	60cb      	str	r3, [r1, #12]
 8001748:	e006      	b.n	8001758 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800174a:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	43db      	mvns	r3, r3
 8001752:	491d      	ldr	r1, [pc, #116]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 8001754:	4013      	ands	r3, r2
 8001756:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	4917      	ldr	r1, [pc, #92]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	43db      	mvns	r3, r3
 800177a:	4913      	ldr	r1, [pc, #76]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 800177c:	4013      	ands	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d01f      	beq.n	80017cc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	490d      	ldr	r1, [pc, #52]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	600b      	str	r3, [r1, #0]
 8001798:	e01f      	b.n	80017da <HAL_GPIO_Init+0x2d2>
 800179a:	bf00      	nop
 800179c:	10320000 	.word	0x10320000
 80017a0:	10310000 	.word	0x10310000
 80017a4:	10220000 	.word	0x10220000
 80017a8:	10210000 	.word	0x10210000
 80017ac:	10120000 	.word	0x10120000
 80017b0:	10110000 	.word	0x10110000
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010000 	.word	0x40010000
 80017bc:	40010800 	.word	0x40010800
 80017c0:	40010c00 	.word	0x40010c00
 80017c4:	40011000 	.word	0x40011000
 80017c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_GPIO_Init+0x2f4>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	4909      	ldr	r1, [pc, #36]	; (80017fc <HAL_GPIO_Init+0x2f4>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	3301      	adds	r3, #1
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f47f ae96 	bne.w	800151c <HAL_GPIO_Init+0x14>
  }
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	372c      	adds	r7, #44	; 0x2c
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	40010400 	.word	0x40010400

08001800 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	887b      	ldrh	r3, [r7, #2]
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001818:	2301      	movs	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	e001      	b.n	8001822 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001822:	7bfb      	ldrb	r3, [r7, #15]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr

0800182e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	460b      	mov	r3, r1
 8001838:	807b      	strh	r3, [r7, #2]
 800183a:	4613      	mov	r3, r2
 800183c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800183e:	787b      	ldrb	r3, [r7, #1]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001844:	887a      	ldrh	r2, [r7, #2]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800184a:	e003      	b.n	8001854 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800184c:	887b      	ldrh	r3, [r7, #2]
 800184e:	041a      	lsls	r2, r3, #16
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	611a      	str	r2, [r3, #16]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800185e:	b480      	push	{r7}
 8001860:	b085      	sub	sp, #20
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	460b      	mov	r3, r1
 8001868:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001870:	887a      	ldrh	r2, [r7, #2]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4013      	ands	r3, r2
 8001876:	041a      	lsls	r2, r3, #16
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	43d9      	mvns	r1, r3
 800187c:	887b      	ldrh	r3, [r7, #2]
 800187e:	400b      	ands	r3, r1
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	611a      	str	r2, [r3, #16]
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e272      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 8087 	beq.w	80019be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018b0:	4b92      	ldr	r3, [pc, #584]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d00c      	beq.n	80018d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018bc:	4b8f      	ldr	r3, [pc, #572]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d112      	bne.n	80018ee <HAL_RCC_OscConfig+0x5e>
 80018c8:	4b8c      	ldr	r3, [pc, #560]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d4:	d10b      	bne.n	80018ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d6:	4b89      	ldr	r3, [pc, #548]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d06c      	beq.n	80019bc <HAL_RCC_OscConfig+0x12c>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d168      	bne.n	80019bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e24c      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f6:	d106      	bne.n	8001906 <HAL_RCC_OscConfig+0x76>
 80018f8:	4b80      	ldr	r3, [pc, #512]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a7f      	ldr	r2, [pc, #508]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	e02e      	b.n	8001964 <HAL_RCC_OscConfig+0xd4>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0x98>
 800190e:	4b7b      	ldr	r3, [pc, #492]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a7a      	ldr	r2, [pc, #488]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b78      	ldr	r3, [pc, #480]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a77      	ldr	r2, [pc, #476]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e01d      	b.n	8001964 <HAL_RCC_OscConfig+0xd4>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0xbc>
 8001932:	4b72      	ldr	r3, [pc, #456]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a71      	ldr	r2, [pc, #452]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	4b6f      	ldr	r3, [pc, #444]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a6e      	ldr	r2, [pc, #440]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e00b      	b.n	8001964 <HAL_RCC_OscConfig+0xd4>
 800194c:	4b6b      	ldr	r3, [pc, #428]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a6a      	ldr	r2, [pc, #424]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	4b68      	ldr	r3, [pc, #416]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a67      	ldr	r2, [pc, #412]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 800195e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001962:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d013      	beq.n	8001994 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7ff fcb4 	bl	80012d8 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001974:	f7ff fcb0 	bl	80012d8 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b64      	cmp	r3, #100	; 0x64
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e200      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	4b5d      	ldr	r3, [pc, #372]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0xe4>
 8001992:	e014      	b.n	80019be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff fca0 	bl	80012d8 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800199c:	f7ff fc9c 	bl	80012d8 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b64      	cmp	r3, #100	; 0x64
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e1ec      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ae:	4b53      	ldr	r3, [pc, #332]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x10c>
 80019ba:	e000      	b.n	80019be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d063      	beq.n	8001a92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ca:	4b4c      	ldr	r3, [pc, #304]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00b      	beq.n	80019ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019d6:	4b49      	ldr	r3, [pc, #292]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 030c 	and.w	r3, r3, #12
 80019de:	2b08      	cmp	r3, #8
 80019e0:	d11c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x18c>
 80019e2:	4b46      	ldr	r3, [pc, #280]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d116      	bne.n	8001a1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ee:	4b43      	ldr	r3, [pc, #268]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <HAL_RCC_OscConfig+0x176>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d001      	beq.n	8001a06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e1c0      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a06:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4939      	ldr	r1, [pc, #228]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1a:	e03a      	b.n	8001a92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d020      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a24:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2a:	f7ff fc55 	bl	80012d8 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a32:	f7ff fc51 	bl	80012d8 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e1a1      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a44:	4b2d      	ldr	r3, [pc, #180]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a50:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4927      	ldr	r1, [pc, #156]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]
 8001a64:	e015      	b.n	8001a92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a66:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fc34 	bl	80012d8 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a74:	f7ff fc30 	bl	80012d8 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e180      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a86:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d03a      	beq.n	8001b14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d019      	beq.n	8001ada <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aac:	f7ff fc14 	bl	80012d8 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab4:	f7ff fc10 	bl	80012d8 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e160      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f000 fa9c 	bl	8002010 <RCC_Delay>
 8001ad8:	e01c      	b.n	8001b14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae0:	f7ff fbfa 	bl	80012d8 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae6:	e00f      	b.n	8001b08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae8:	f7ff fbf6 	bl	80012d8 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d908      	bls.n	8001b08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e146      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000
 8001b00:	42420000 	.word	0x42420000
 8001b04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b08:	4b92      	ldr	r3, [pc, #584]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1e9      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80a6 	beq.w	8001c6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b26:	4b8b      	ldr	r3, [pc, #556]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10d      	bne.n	8001b4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	4b88      	ldr	r3, [pc, #544]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	4a87      	ldr	r2, [pc, #540]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	61d3      	str	r3, [r2, #28]
 8001b3e:	4b85      	ldr	r3, [pc, #532]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4e:	4b82      	ldr	r3, [pc, #520]	; (8001d58 <HAL_RCC_OscConfig+0x4c8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d118      	bne.n	8001b8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5a:	4b7f      	ldr	r3, [pc, #508]	; (8001d58 <HAL_RCC_OscConfig+0x4c8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a7e      	ldr	r2, [pc, #504]	; (8001d58 <HAL_RCC_OscConfig+0x4c8>)
 8001b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b66:	f7ff fbb7 	bl	80012d8 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6e:	f7ff fbb3 	bl	80012d8 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b64      	cmp	r3, #100	; 0x64
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e103      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	4b75      	ldr	r3, [pc, #468]	; (8001d58 <HAL_RCC_OscConfig+0x4c8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x312>
 8001b94:	4b6f      	ldr	r3, [pc, #444]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4a6e      	ldr	r2, [pc, #440]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6213      	str	r3, [r2, #32]
 8001ba0:	e02d      	b.n	8001bfe <HAL_RCC_OscConfig+0x36e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x334>
 8001baa:	4b6a      	ldr	r3, [pc, #424]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a69      	ldr	r2, [pc, #420]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	f023 0301 	bic.w	r3, r3, #1
 8001bb4:	6213      	str	r3, [r2, #32]
 8001bb6:	4b67      	ldr	r3, [pc, #412]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	4a66      	ldr	r2, [pc, #408]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	f023 0304 	bic.w	r3, r3, #4
 8001bc0:	6213      	str	r3, [r2, #32]
 8001bc2:	e01c      	b.n	8001bfe <HAL_RCC_OscConfig+0x36e>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b05      	cmp	r3, #5
 8001bca:	d10c      	bne.n	8001be6 <HAL_RCC_OscConfig+0x356>
 8001bcc:	4b61      	ldr	r3, [pc, #388]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4a60      	ldr	r2, [pc, #384]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
 8001bd6:	6213      	str	r3, [r2, #32]
 8001bd8:	4b5e      	ldr	r3, [pc, #376]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	4a5d      	ldr	r2, [pc, #372]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6213      	str	r3, [r2, #32]
 8001be4:	e00b      	b.n	8001bfe <HAL_RCC_OscConfig+0x36e>
 8001be6:	4b5b      	ldr	r3, [pc, #364]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4a5a      	ldr	r2, [pc, #360]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bec:	f023 0301 	bic.w	r3, r3, #1
 8001bf0:	6213      	str	r3, [r2, #32]
 8001bf2:	4b58      	ldr	r3, [pc, #352]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	4a57      	ldr	r2, [pc, #348]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	f023 0304 	bic.w	r3, r3, #4
 8001bfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d015      	beq.n	8001c32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c06:	f7ff fb67 	bl	80012d8 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0c:	e00a      	b.n	8001c24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0e:	f7ff fb63 	bl	80012d8 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e0b1      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c24:	4b4b      	ldr	r3, [pc, #300]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0ee      	beq.n	8001c0e <HAL_RCC_OscConfig+0x37e>
 8001c30:	e014      	b.n	8001c5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c32:	f7ff fb51 	bl	80012d8 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c38:	e00a      	b.n	8001c50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3a:	f7ff fb4d 	bl	80012d8 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e09b      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c50:	4b40      	ldr	r3, [pc, #256]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1ee      	bne.n	8001c3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c5c:	7dfb      	ldrb	r3, [r7, #23]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d105      	bne.n	8001c6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c62:	4b3c      	ldr	r3, [pc, #240]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	4a3b      	ldr	r2, [pc, #236]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 8087 	beq.w	8001d86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c78:	4b36      	ldr	r3, [pc, #216]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d061      	beq.n	8001d48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d146      	bne.n	8001d1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8c:	4b33      	ldr	r3, [pc, #204]	; (8001d5c <HAL_RCC_OscConfig+0x4cc>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c92:	f7ff fb21 	bl	80012d8 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9a:	f7ff fb1d 	bl	80012d8 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e06d      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cac:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f0      	bne.n	8001c9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc0:	d108      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cc2:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	4921      	ldr	r1, [pc, #132]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd4:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a19      	ldr	r1, [r3, #32]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	491b      	ldr	r1, [pc, #108]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_RCC_OscConfig+0x4cc>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf2:	f7ff faf1 	bl	80012d8 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfa:	f7ff faed 	bl	80012d8 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e03d      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x46a>
 8001d18:	e035      	b.n	8001d86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <HAL_RCC_OscConfig+0x4cc>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fada 	bl	80012d8 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d28:	f7ff fad6 	bl	80012d8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e026      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x498>
 8001d46:	e01e      	b.n	8001d86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d107      	bne.n	8001d60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e019      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40007000 	.word	0x40007000
 8001d5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_RCC_OscConfig+0x500>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d106      	bne.n	8001d82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000

08001d94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0d0      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da8:	4b6a      	ldr	r3, [pc, #424]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d910      	bls.n	8001dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4b67      	ldr	r3, [pc, #412]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 0207 	bic.w	r2, r3, #7
 8001dbe:	4965      	ldr	r1, [pc, #404]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b63      	ldr	r3, [pc, #396]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0b8      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d020      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df0:	4b59      	ldr	r3, [pc, #356]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4a58      	ldr	r2, [pc, #352]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e08:	4b53      	ldr	r3, [pc, #332]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	4a52      	ldr	r2, [pc, #328]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e14:	4b50      	ldr	r3, [pc, #320]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	494d      	ldr	r1, [pc, #308]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d040      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d107      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d115      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e07f      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d107      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e52:	4b41      	ldr	r3, [pc, #260]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d109      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e073      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e62:	4b3d      	ldr	r3, [pc, #244]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e06b      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e72:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f023 0203 	bic.w	r2, r3, #3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4936      	ldr	r1, [pc, #216]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e84:	f7ff fa28 	bl	80012d8 <HAL_GetTick>
 8001e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e8c:	f7ff fa24 	bl	80012d8 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e053      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 020c 	and.w	r2, r3, #12
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d1eb      	bne.n	8001e8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb4:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d210      	bcs.n	8001ee4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec2:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 0207 	bic.w	r2, r3, #7
 8001eca:	4922      	ldr	r1, [pc, #136]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e032      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	4916      	ldr	r1, [pc, #88]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	490e      	ldr	r1, [pc, #56]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f22:	f000 f821 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 8001f26:	4602      	mov	r2, r0
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	490a      	ldr	r1, [pc, #40]	; (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001f34:	5ccb      	ldrb	r3, [r1, r3]
 8001f36:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3a:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <HAL_RCC_ClockConfig+0x1cc>)
 8001f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_RCC_ClockConfig+0x1d0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff f986 	bl	8001254 <HAL_InitTick>

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40022000 	.word	0x40022000
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	08002874 	.word	0x08002874
 8001f60:	2000003c 	.word	0x2000003c
 8001f64:	20000040 	.word	0x20000040

08001f68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f82:	4b1e      	ldr	r3, [pc, #120]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d002      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0x30>
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d003      	beq.n	8001f9e <HAL_RCC_GetSysClockFreq+0x36>
 8001f96:	e027      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f9a:	613b      	str	r3, [r7, #16]
      break;
 8001f9c:	e027      	b.n	8001fee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	0c9b      	lsrs	r3, r3, #18
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	4a17      	ldr	r2, [pc, #92]	; (8002004 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fa8:	5cd3      	ldrb	r3, [r2, r3]
 8001faa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d010      	beq.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x94>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	0c5b      	lsrs	r3, r3, #17
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	4a11      	ldr	r2, [pc, #68]	; (8002008 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fc2:	5cd3      	ldrb	r3, [r2, r3]
 8001fc4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a0d      	ldr	r2, [pc, #52]	; (8002000 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fca:	fb03 f202 	mul.w	r2, r3, r2
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	e004      	b.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a0c      	ldr	r2, [pc, #48]	; (800200c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	613b      	str	r3, [r7, #16]
      break;
 8001fe6:	e002      	b.n	8001fee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fea:	613b      	str	r3, [r7, #16]
      break;
 8001fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fee:	693b      	ldr	r3, [r7, #16]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000
 8002000:	007a1200 	.word	0x007a1200
 8002004:	08002884 	.word	0x08002884
 8002008:	08002894 	.word	0x08002894
 800200c:	003d0900 	.word	0x003d0900

08002010 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <RCC_Delay+0x34>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <RCC_Delay+0x38>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	0a5b      	lsrs	r3, r3, #9
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800202c:	bf00      	nop
  }
  while (Delay --);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1e5a      	subs	r2, r3, #1
 8002032:	60fa      	str	r2, [r7, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f9      	bne.n	800202c <RCC_Delay+0x1c>
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	2000003c 	.word	0x2000003c
 8002048:	10624dd3 	.word	0x10624dd3

0800204c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e041      	b.n	80020e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d106      	bne.n	8002078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7fe feb2 	bl	8000ddc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3304      	adds	r3, #4
 8002088:	4619      	mov	r1, r3
 800208a:	4610      	mov	r0, r2
 800208c:	f000 fa56 	bl	800253c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d001      	beq.n	8002104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e035      	b.n	8002170 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0201 	orr.w	r2, r2, #1
 800211a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a16      	ldr	r2, [pc, #88]	; (800217c <HAL_TIM_Base_Start_IT+0x90>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d009      	beq.n	800213a <HAL_TIM_Base_Start_IT+0x4e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800212e:	d004      	beq.n	800213a <HAL_TIM_Base_Start_IT+0x4e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a12      	ldr	r2, [pc, #72]	; (8002180 <HAL_TIM_Base_Start_IT+0x94>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d111      	bne.n	800215e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b06      	cmp	r3, #6
 800214a:	d010      	beq.n	800216e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800215c:	e007      	b.n	800216e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f042 0201 	orr.w	r2, r2, #1
 800216c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40012c00 	.word	0x40012c00
 8002180:	40000400 	.word	0x40000400

08002184 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d020      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d01b      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0202 	mvn.w	r2, #2
 80021b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f998 	bl	8002504 <HAL_TIM_IC_CaptureCallback>
 80021d4:	e005      	b.n	80021e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f98b 	bl	80024f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f99a 	bl	8002516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d020      	beq.n	8002234 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d01b      	beq.n	8002234 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0204 	mvn.w	r2, #4
 8002204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2202      	movs	r2, #2
 800220a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f972 	bl	8002504 <HAL_TIM_IC_CaptureCallback>
 8002220:	e005      	b.n	800222e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f965 	bl	80024f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f974 	bl	8002516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d020      	beq.n	8002280 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01b      	beq.n	8002280 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0208 	mvn.w	r2, #8
 8002250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2204      	movs	r2, #4
 8002256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f94c 	bl	8002504 <HAL_TIM_IC_CaptureCallback>
 800226c:	e005      	b.n	800227a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f93f 	bl	80024f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f94e 	bl	8002516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b00      	cmp	r3, #0
 8002288:	d020      	beq.n	80022cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01b      	beq.n	80022cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0210 	mvn.w	r2, #16
 800229c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2208      	movs	r2, #8
 80022a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f926 	bl	8002504 <HAL_TIM_IC_CaptureCallback>
 80022b8:	e005      	b.n	80022c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f919 	bl	80024f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f928 	bl	8002516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00c      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0201 	mvn.w	r2, #1
 80022e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fc48 	bl	8000b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00c      	beq.n	8002314 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002300:	2b00      	cmp	r3, #0
 8002302:	d007      	beq.n	8002314 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800230c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fa6f 	bl	80027f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00c      	beq.n	8002338 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f8f8 	bl	8002528 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f003 0320 	and.w	r3, r3, #32
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00c      	beq.n	800235c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b00      	cmp	r3, #0
 800234a:	d007      	beq.n	800235c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f06f 0220 	mvn.w	r2, #32
 8002354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fa42 	bl	80027e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_TIM_ConfigClockSource+0x1c>
 800237c:	2302      	movs	r3, #2
 800237e:	e0b4      	b.n	80024ea <HAL_TIM_ConfigClockSource+0x186>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800239e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b8:	d03e      	beq.n	8002438 <HAL_TIM_ConfigClockSource+0xd4>
 80023ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023be:	f200 8087 	bhi.w	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 80023c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c6:	f000 8086 	beq.w	80024d6 <HAL_TIM_ConfigClockSource+0x172>
 80023ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ce:	d87f      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 80023d0:	2b70      	cmp	r3, #112	; 0x70
 80023d2:	d01a      	beq.n	800240a <HAL_TIM_ConfigClockSource+0xa6>
 80023d4:	2b70      	cmp	r3, #112	; 0x70
 80023d6:	d87b      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 80023d8:	2b60      	cmp	r3, #96	; 0x60
 80023da:	d050      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x11a>
 80023dc:	2b60      	cmp	r3, #96	; 0x60
 80023de:	d877      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 80023e0:	2b50      	cmp	r3, #80	; 0x50
 80023e2:	d03c      	beq.n	800245e <HAL_TIM_ConfigClockSource+0xfa>
 80023e4:	2b50      	cmp	r3, #80	; 0x50
 80023e6:	d873      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 80023e8:	2b40      	cmp	r3, #64	; 0x40
 80023ea:	d058      	beq.n	800249e <HAL_TIM_ConfigClockSource+0x13a>
 80023ec:	2b40      	cmp	r3, #64	; 0x40
 80023ee:	d86f      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 80023f0:	2b30      	cmp	r3, #48	; 0x30
 80023f2:	d064      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x15a>
 80023f4:	2b30      	cmp	r3, #48	; 0x30
 80023f6:	d86b      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 80023f8:	2b20      	cmp	r3, #32
 80023fa:	d060      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x15a>
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d867      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002400:	2b00      	cmp	r3, #0
 8002402:	d05c      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x15a>
 8002404:	2b10      	cmp	r3, #16
 8002406:	d05a      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x15a>
 8002408:	e062      	b.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800241a:	f000 f96a 	bl	80026f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800242c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	609a      	str	r2, [r3, #8]
      break;
 8002436:	e04f      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002448:	f000 f953 	bl	80026f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800245a:	609a      	str	r2, [r3, #8]
      break;
 800245c:	e03c      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800246a:	461a      	mov	r2, r3
 800246c:	f000 f8ca 	bl	8002604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2150      	movs	r1, #80	; 0x50
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f921 	bl	80026be <TIM_ITRx_SetConfig>
      break;
 800247c:	e02c      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800248a:	461a      	mov	r2, r3
 800248c:	f000 f8e8 	bl	8002660 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2160      	movs	r1, #96	; 0x60
 8002496:	4618      	mov	r0, r3
 8002498:	f000 f911 	bl	80026be <TIM_ITRx_SetConfig>
      break;
 800249c:	e01c      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024aa:	461a      	mov	r2, r3
 80024ac:	f000 f8aa 	bl	8002604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2140      	movs	r1, #64	; 0x40
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 f901 	bl	80026be <TIM_ITRx_SetConfig>
      break;
 80024bc:	e00c      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4619      	mov	r1, r3
 80024c8:	4610      	mov	r0, r2
 80024ca:	f000 f8f8 	bl	80026be <TIM_ITRx_SetConfig>
      break;
 80024ce:	e003      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
      break;
 80024d4:	e000      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
	...

0800253c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a2b      	ldr	r2, [pc, #172]	; (80025fc <TIM_Base_SetConfig+0xc0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d007      	beq.n	8002564 <TIM_Base_SetConfig+0x28>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800255a:	d003      	beq.n	8002564 <TIM_Base_SetConfig+0x28>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a28      	ldr	r2, [pc, #160]	; (8002600 <TIM_Base_SetConfig+0xc4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d108      	bne.n	8002576 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800256a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a20      	ldr	r2, [pc, #128]	; (80025fc <TIM_Base_SetConfig+0xc0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d007      	beq.n	800258e <TIM_Base_SetConfig+0x52>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002584:	d003      	beq.n	800258e <TIM_Base_SetConfig+0x52>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a1d      	ldr	r2, [pc, #116]	; (8002600 <TIM_Base_SetConfig+0xc4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d108      	bne.n	80025a0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4313      	orrs	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <TIM_Base_SetConfig+0xc0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d103      	bne.n	80025d4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f023 0201 	bic.w	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	611a      	str	r2, [r3, #16]
  }
}
 80025f2:	bf00      	nop
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	40012c00 	.word	0x40012c00
 8002600:	40000400 	.word	0x40000400

08002604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	f023 0201 	bic.w	r2, r3, #1
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800262e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f023 030a 	bic.w	r3, r3, #10
 8002640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4313      	orrs	r3, r2
 8002648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	621a      	str	r2, [r3, #32]
}
 8002656:	bf00      	nop
 8002658:	371c      	adds	r7, #28
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	f023 0210 	bic.w	r2, r3, #16
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800268a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	031b      	lsls	r3, r3, #12
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800269c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	621a      	str	r2, [r3, #32]
}
 80026b4:	bf00      	nop
 80026b6:	371c      	adds	r7, #28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026be:	b480      	push	{r7}
 80026c0:	b085      	sub	sp, #20
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	f043 0307 	orr.w	r3, r3, #7
 80026e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	609a      	str	r2, [r3, #8]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr

080026f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b087      	sub	sp, #28
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
 80026fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800270c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	021a      	lsls	r2, r3, #8
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	431a      	orrs	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	4313      	orrs	r3, r2
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	4313      	orrs	r3, r2
 800271e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	609a      	str	r2, [r3, #8]
}
 8002726:	bf00      	nop
 8002728:	371c      	adds	r7, #28
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002744:	2302      	movs	r3, #2
 8002746:	e041      	b.n	80027cc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a14      	ldr	r2, [pc, #80]	; (80027d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d009      	beq.n	80027a0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002794:	d004      	beq.n	80027a0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a10      	ldr	r2, [pc, #64]	; (80027dc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d10c      	bne.n	80027ba <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40012c00 	.word	0x40012c00
 80027dc:	40000400 	.word	0x40000400

080027e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <memset>:
 8002804:	4603      	mov	r3, r0
 8002806:	4402      	add	r2, r0
 8002808:	4293      	cmp	r3, r2
 800280a:	d100      	bne.n	800280e <memset+0xa>
 800280c:	4770      	bx	lr
 800280e:	f803 1b01 	strb.w	r1, [r3], #1
 8002812:	e7f9      	b.n	8002808 <memset+0x4>

08002814 <__libc_init_array>:
 8002814:	b570      	push	{r4, r5, r6, lr}
 8002816:	2600      	movs	r6, #0
 8002818:	4d0c      	ldr	r5, [pc, #48]	; (800284c <__libc_init_array+0x38>)
 800281a:	4c0d      	ldr	r4, [pc, #52]	; (8002850 <__libc_init_array+0x3c>)
 800281c:	1b64      	subs	r4, r4, r5
 800281e:	10a4      	asrs	r4, r4, #2
 8002820:	42a6      	cmp	r6, r4
 8002822:	d109      	bne.n	8002838 <__libc_init_array+0x24>
 8002824:	f000 f81a 	bl	800285c <_init>
 8002828:	2600      	movs	r6, #0
 800282a:	4d0a      	ldr	r5, [pc, #40]	; (8002854 <__libc_init_array+0x40>)
 800282c:	4c0a      	ldr	r4, [pc, #40]	; (8002858 <__libc_init_array+0x44>)
 800282e:	1b64      	subs	r4, r4, r5
 8002830:	10a4      	asrs	r4, r4, #2
 8002832:	42a6      	cmp	r6, r4
 8002834:	d105      	bne.n	8002842 <__libc_init_array+0x2e>
 8002836:	bd70      	pop	{r4, r5, r6, pc}
 8002838:	f855 3b04 	ldr.w	r3, [r5], #4
 800283c:	4798      	blx	r3
 800283e:	3601      	adds	r6, #1
 8002840:	e7ee      	b.n	8002820 <__libc_init_array+0xc>
 8002842:	f855 3b04 	ldr.w	r3, [r5], #4
 8002846:	4798      	blx	r3
 8002848:	3601      	adds	r6, #1
 800284a:	e7f2      	b.n	8002832 <__libc_init_array+0x1e>
 800284c:	08002898 	.word	0x08002898
 8002850:	08002898 	.word	0x08002898
 8002854:	08002898 	.word	0x08002898
 8002858:	0800289c 	.word	0x0800289c

0800285c <_init>:
 800285c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285e:	bf00      	nop
 8002860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002862:	bc08      	pop	{r3}
 8002864:	469e      	mov	lr, r3
 8002866:	4770      	bx	lr

08002868 <_fini>:
 8002868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286a:	bf00      	nop
 800286c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286e:	bc08      	pop	{r3}
 8002870:	469e      	mov	lr, r3
 8002872:	4770      	bx	lr
